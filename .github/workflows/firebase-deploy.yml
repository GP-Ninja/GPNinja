name: Deploy to Firebase Hosting

on:
  push:
    branches:
      - flutterflow   # Change if your target branch is different

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - uses: actions/checkout@v3

      # 2. Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.2'
          channel: 'stable'

      # 3. Install dependencies
      - name: Install Dependencies
        run: flutter pub get

      # 4. Build Flutter Web (release mode)
      - name: Build Web
        run: flutter build web

      # 5. Remove any meta-based CSP tag from index.html (if FlutterFlow placed one)
      - name: Remove meta CSP
        run: sed -i '/<meta http-equiv="Content-Security-Policy"/d' build/web/index.html

      # 6. Create a custom widget initialization script (deferred to after page load)
      - name: Create custom script file
        run: |
          cat << 'EOF' > custom_script.html
          <!-- BEGIN: Custom Widget Initialization -->
          <script>
          // Defer widget initialization until after UI render
          window.addEventListener('load', function() {
            if (window.firebase && firebase.auth) {
              console.log("Firebase is loaded. Initializing Intercom & Canny...");
              firebase.auth().onAuthStateChanged(async function(user) {
                if (user) {
                  try {
                    const db = firebase.firestore();
                    const doc = await db.collection('users').doc(user.uid).get();
                    if (!doc.exists) {
                      console.log("No user data found in Firestore.");
                      return;
                    }
                    const userData = doc.data();
                    const userName = userData.display_name || "Anonymous";
                    const userEmail = user.email;
                    const userAvatarURL = userData.avatarURL || null;

                    // Convert creationTime (in ms) to seconds for Intercom & Canny
                    const userCreatedAt = Math.floor(new Date(user.metadata.creationTime).getTime() / 1000);
                    
                    // Intercom: Call cloud function to get identity hash
                    const regionFunctions = firebase.app().functions('europe-west2');
                    const generateHmac = regionFunctions.httpsCallable('generateIntercomHmac');
                    const result = await generateHmac({});
                    const userHash = result.data.userHash;
                    console.log("Generated user hash:", userHash);
                    
                    // Configure Intercom settings
                    window.intercomSettings = {
                      api_base: "https://api-iam.intercom.io",
                      app_id: "jonpetzm",
                      user_id: user.uid,
                      name: userName,
                      email: userEmail,
                      created_at: userCreatedAt,
                      user_hash: userHash
                    };
                    
                    // Load Intercom widget asynchronously
                    (function() {
                      var w = window;
                      if (typeof w.Intercom === "function") {
                        w.Intercom('reattach_activator');
                        w.Intercom('update', window.intercomSettings);
                      } else {
                        var d = document;
                        var i = function(){ i.c(arguments); };
                        i.q = [];
                        i.c = function(args){ i.q.push(args); };
                        w.Intercom = i;
                        var s = d.createElement('script');
                        s.type = 'text/javascript';
                        s.async = true;
                        s.src = 'https://widget.intercom.io/widget/jonpetzm';
                        var x = d.getElementsByTagName('script')[0];
                        x.parentNode.insertBefore(s, x);
                      }
                    })();
                    
                    // Load Canny widget asynchronously
                    (function() {
                      function loadCanny() {
                        if (!document.getElementById("canny-jssdk")) {
                          var s = document.createElement("script");
                          s.id = "canny-jssdk";
                          s.type = "text/javascript";
                          s.async = true;
                          s.src = "https://canny.io/sdk.js";
                          document.body.appendChild(s);
                        }
                      }
                      loadCanny();
                      if (typeof Canny === "function") {
                        Canny('identify', {
                          appID: '6654a3040a8e721bebde1514',
                          user: {
                            id: user.uid,
                            name: userName,
                            email: userEmail,
                            avatarURL: userAvatarURL,
                            // user.created must be a valid Unix timestamp in seconds
                            created: userCreatedAt
                          }
                        });
                        console.log('Canny identify called successfully.');
                      } else {
                        console.log('Canny SDK not yet loaded.');
                      }
                    })();
                  } catch (error) {
                    console.error("Error initializing widgets:", error);
                  }
                } else {
                  console.log("User not signed in.");
                  if (window.Intercom) {
                    window.Intercom('shutdown');
                  }
                }
              });
            } else {
              console.warn("Firebase not available yet.");
            }
          });
          </script>
          <!-- END: Custom Widget Initialization -->
          EOF

      # 7. Inject the custom script before the closing </body> tag
      - name: Inject custom script
        run: sed -i '/<\/body>/r custom_script.html' build/web/index.html

      # 8. Create firebase.json with performanceâ€‘optimized caching & security headers
      - name: Create firebase.json
        run: |
          cat <<EOF > firebase.json
          {
            "hosting": {
              "public": "build/web",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ],
              "headers": [
                {
                  "source": "/index.html",
                  "headers": [
                    {
                      "key": "Cache-Control",
                      "value": "no-cache"
                    }
                  ]
                },
                {
                  "source": "/flutter.js",
                  "headers": [
                    {
                      "key": "Cache-Control",
                      "value": "max-age=31536000, immutable"
                    }
                  ]
                },
                {
                  "source": "/flutter_service_worker.js",
                  "headers": [
                    {
                      "key": "Cache-Control",
                      "value": "max-age=31536000, immutable"
                    }
                  ]
                },
                {
                  "source": "/**/*.{js,css}",
                  "headers": [
                    {
                      "key": "Cache-Control",
                      "value": "max-age=31536000, immutable"
                    }
                  ]
                },
                {
                  "source": "/assets/**",
                  "headers": [
                    {
                      "key": "Cache-Control",
                      "value": "max-age=31536000, immutable"
                    }
                  ]
                },
                {
                  "source": "/**/*.@(jpg|jpeg|gif|png|svg|webp)",
                  "headers": [
                    {
                      "key": "Cache-Control",
                      "value": "max-age=31536000, immutable"
                    }
                  ]
                },
                {
                  "source": "/**",
                  "headers": [
                    {
                      "key": "Strict-Transport-Security",
                      "value": "max-age=31536000; includeSubDomains"
                    },
                    {
                      "key": "Content-Security-Policy",
                      "value": "default-src 'self'; \
                                script-src 'self' 'unsafe-inline' 'unsafe-eval' blob: https://www.gstatic.com https://*.googleapis.com https://*.firebaseapp.com https://*.firebaseio.com https://*.intercom.io https://widget.intercom.io https://js.intercomcdn.com https://canny.io https://js.stripe.com https://accounts.google.com https://apis.google.com https://www.googletagmanager.com; \
                                connect-src 'self' wss: https://www.gstatic.com https://fonts.gstatic.com https://*.firebaseio.com https://*.intercom.io https://api-iam.intercom.io https://api.canny.io https://canny.io https://api.stripe.com https://api.openai.com https://firebase.googleapis.com https://firestore.googleapis.com https://identitytoolkit.googleapis.com https://region1.google-analytics.com https://europe-west2-gpninja-1c716.cloudfunctions.net https://us-central1-gpninja-1c716.cloudfunctions.net https://firebaseinstallations.googleapis.com https://lottie.host https://i.imgur.com https://www.googleapis.com https://*.googleapis.com; \
                                style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; \
                                font-src 'self' https://fonts.gstatic.com https://fonts.intercomcdn.com data:; \
                                img-src 'self' https: data: blob: https://i.imgur.com; \
                                frame-src 'self' https://*.firebaseapp.com https://js.stripe.com https://hooks.stripe.com https://intercom-sheets.com; \
                                frame-ancestors 'none'; \
                                base-uri 'self'; \
                                worker-src 'self' blob:; \
                                manifest-src 'self';"
                    },
                    {
                      "key": "X-Frame-Options",
                      "value": "DENY"
                    },
                    {
                      "key": "X-Content-Type-Options",
                      "value": "nosniff"
                    },
                    {
                      "key": "Referrer-Policy",
                      "value": "strict-origin-when-cross-origin"
                    }
                  ]
                }
              ],
              "rewrites": [
                {
                  "source": "**",
                  "destination": "/index.html"
                }
              ]
            }
          }
          EOF

      # 9. Create .firebaserc referencing your Firebase project ID
      - name: Create .firebaserc
        run: |
          echo '{
            "projects": {
              "default": "gpninja-1c716"
            }
          }' > .firebaserc

      # 10. Deploy to Firebase Hosting
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          PROJECT_ID: gpninja-1c716

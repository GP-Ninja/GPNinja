import '/auth/firebase_auth/auth_util.dart';
import '/backend/api_requests/api_calls.dart';
import '/backend/backend.dart';
import '/flutter_flow/flutter_flow_animations.dart';
import '/flutter_flow/flutter_flow_choice_chips.dart';
import '/flutter_flow/flutter_flow_drop_down.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_timer.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/flutter_flow/flutter_flow_widgets.dart';
import '/flutter_flow/form_field_controller.dart';
import '/general/horizontal_navbar/horizontal_navbar_widget.dart';
import '/reflect/bottom_sheet_output_review/bottom_sheet_output_review_widget.dart';
import '/reflect/bottom_sheet_subscribe_reflect/bottom_sheet_subscribe_reflect_widget.dart';
import '/flutter_flow/custom_functions.dart' as functions;
import 'package:aligned_tooltip/aligned_tooltip.dart';
import 'package:stop_watch_timer/stop_watch_timer.dart';
import 'package:easy_debounce/easy_debounce.dart';
import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';
import 'package:webviewx_plus/webviewx_plus.dart';
import 'reflect_gp_trainee_model.dart';
export 'reflect_gp_trainee_model.dart';

class ReflectGpTraineeWidget extends StatefulWidget {
  const ReflectGpTraineeWidget({
    super.key,
    this.reflectionreference,
  });

  final DocumentReference? reflectionreference;

  @override
  State<ReflectGpTraineeWidget> createState() => _ReflectGpTraineeWidgetState();
}

class _ReflectGpTraineeWidgetState extends State<ReflectGpTraineeWidget>
    with TickerProviderStateMixin {
  late ReflectGpTraineeModel _model;

  final scaffoldKey = GlobalKey<ScaffoldState>();

  final animationsMap = <String, AnimationInfo>{};

  @override
  void initState() {
    super.initState();
    _model = createModel(context, () => ReflectGpTraineeModel());

    logFirebaseEvent('screen_view',
        parameters: {'screen_name': 'reflect_gp_trainee'});
    _model.switchHelpValue = false;
    _model.clinicalCaseTextController ??=
        TextEditingController(text: FFAppState().ClinicalCase);
    _model.clinicalCaseFocusNode ??= FocusNode();

    _model.keyLearningTextController ??=
        TextEditingController(text: FFAppState().ClinicalCase);
    _model.keyLearningFocusNode ??= FocusNode();

    _model.textFieldCapExtra1TextController ??= TextEditingController();
    _model.textFieldCapExtra1FocusNode ??= FocusNode();

    _model.textFieldCapExtra2TextController ??= TextEditingController();
    _model.textFieldCapExtra2FocusNode ??= FocusNode();

    _model.textFieldCapExtra3TextController ??= TextEditingController();
    _model.textFieldCapExtra3FocusNode ??= FocusNode();

    _model.levelSwitchValue = false;
    _model.capability1OutputTextController ??=
        TextEditingController(text: FFAppState().Capability1Output);
    _model.capability1OutputFocusNode ??= FocusNode();

    _model.capability2OutputTextController ??=
        TextEditingController(text: FFAppState().Capability2Output);
    _model.capability2OutputFocusNode ??= FocusNode();

    _model.capability3OutputTextController ??=
        TextEditingController(text: FFAppState().Capability3Output);
    _model.capability3OutputFocusNode ??= FocusNode();

    _model.reflectionOutputTextController ??=
        TextEditingController(text: FFAppState().ReflectionOutput);
    _model.reflectionOutputFocusNode ??= FocusNode();

    _model.learningOutputTextController ??=
        TextEditingController(text: FFAppState().LearningOutput);
    _model.learningOutputFocusNode ??= FocusNode();

    _model.pDPTopicTextController ??= TextEditingController();
    _model.pDPTopicFocusNode ??= FocusNode();

    _model.pDPOutputTextController ??= TextEditingController();
    _model.pDPOutputFocusNode ??= FocusNode();

    animationsMap.addAll({
      'containerOnPageLoadAnimation1': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 0.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation2': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 0.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation3': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 40.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation4': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 40.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation5': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 80.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation6': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 80.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation7': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 200.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation8': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 240.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation9': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 280.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation10': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 400.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation11': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 440.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation12': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 0.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation13': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 80.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
      'containerOnPageLoadAnimation14': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          FadeEffect(
            curve: Curves.easeInOut,
            delay: 200.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
        ],
      ),
    });

    WidgetsBinding.instance.addPostFrameCallback((_) => safeSetState(() {}));
  }

  @override
  void dispose() {
    _model.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    context.watch<FFAppState>();

    return Title(
        title: 'Reflect',
        color: FlutterFlowTheme.of(context).primary.withAlpha(0XFF),
        child: GestureDetector(
          onTap: () {
            FocusScope.of(context).unfocus();
            FocusManager.instance.primaryFocus?.unfocus();
          },
          child: Scaffold(
            key: scaffoldKey,
            backgroundColor: FlutterFlowTheme.of(context).secondaryBackground,
            body: StreamBuilder<List<UserCountsRecord>>(
              stream: queryUserCountsRecord(
                parent: currentUserReference,
                singleRecord: true,
              ),
              builder: (context, snapshot) {
                // Customize what your widget looks like when it's loading.
                if (!snapshot.hasData) {
                  return Center(
                    child: SizedBox(
                      width: 50.0,
                      height: 50.0,
                      child: SpinKitPulse(
                        color: FlutterFlowTheme.of(context).primary,
                        size: 50.0,
                      ),
                    ),
                  );
                }
                List<UserCountsRecord> columnUserCountsRecordList =
                    snapshot.data!;
                final columnUserCountsRecord =
                    columnUserCountsRecordList.isNotEmpty
                        ? columnUserCountsRecordList.first
                        : null;

                return SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.max,
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      if (responsiveVisibility(
                        context: context,
                        phone: false,
                        tablet: false,
                      ))
                        wrapWithModel(
                          model: _model.horizontalNavbarModel,
                          updateCallback: () => safeSetState(() {}),
                          child: HorizontalNavbarWidget(
                            homeColour: FlutterFlowTheme.of(context)
                                .secondaryBackground,
                            consultColour: FlutterFlowTheme.of(context)
                                .secondaryBackground,
                            clickNoteColour: FlutterFlowTheme.of(context)
                                .secondaryBackground,
                            reflectColour: FlutterFlowTheme.of(context).primary,
                            profileColour: FlutterFlowTheme.of(context)
                                .secondaryBackground,
                            subscriptionColour: FlutterFlowTheme.of(context)
                                .secondaryBackground,
                            learnColour: FlutterFlowTheme.of(context)
                                .secondaryBackground,
                            newsColour: FlutterFlowTheme.of(context)
                                .secondaryBackground,
                            jobsColour: FlutterFlowTheme.of(context)
                                .secondaryBackground,
                          ),
                        ),
                      if (responsiveVisibility(
                        context: context,
                        tabletLandscape: false,
                        desktop: false,
                      ))
                        Align(
                          alignment: AlignmentDirectional(0.0, 0.0),
                          child: Container(
                            width: double.infinity,
                            height: 44.0,
                            decoration: BoxDecoration(
                              color: FlutterFlowTheme.of(context)
                                  .primaryBackground,
                              borderRadius: BorderRadius.circular(0.0),
                            ),
                            alignment: AlignmentDirectional(0.0, 0.0),
                          ),
                        ),
                      Padding(
                        padding: EdgeInsetsDirectional.fromSTEB(
                            0.0, 20.0, 0.0, 20.0),
                        child: Row(
                          mainAxisSize: MainAxisSize.max,
                          mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            Expanded(
                              child: Align(
                                alignment: AlignmentDirectional(0.0, 0.0),
                                child: FlutterFlowChoiceChips(
                                  options: [
                                    ChipData('Clinical Case Reviews'),
                                    ChipData('Supporting Documentation'),
                                    ChipData('Personal Development Plans')
                                  ],
                                  onChanged: (val) => safeSetState(() => _model
                                      .choiceChipsValue = val?.firstOrNull),
                                  selectedChipStyle: ChipStyle(
                                    backgroundColor:
                                        FlutterFlowTheme.of(context).primary,
                                    textStyle: FlutterFlowTheme.of(context)
                                        .bodyMedium
                                        .override(
                                          fontFamily:
                                              FlutterFlowTheme.of(context)
                                                  .bodyMediumFamily,
                                          color: FlutterFlowTheme.of(context)
                                              .secondaryBackground,
                                          letterSpacing: 0.0,
                                          useGoogleFonts: GoogleFonts.asMap()
                                              .containsKey(
                                                  FlutterFlowTheme.of(context)
                                                      .bodyMediumFamily),
                                        ),
                                    iconColor: FlutterFlowTheme.of(context)
                                        .primaryText,
                                    iconSize: 18.0,
                                    elevation: 4.0,
                                    borderRadius: BorderRadius.circular(16.0),
                                  ),
                                  unselectedChipStyle: ChipStyle(
                                    backgroundColor:
                                        FlutterFlowTheme.of(context)
                                            .secondaryBackground,
                                    textStyle: FlutterFlowTheme.of(context)
                                        .bodyMedium
                                        .override(
                                          fontFamily:
                                              FlutterFlowTheme.of(context)
                                                  .bodyMediumFamily,
                                          color: FlutterFlowTheme.of(context)
                                              .secondaryText,
                                          letterSpacing: 0.0,
                                          useGoogleFonts: GoogleFonts.asMap()
                                              .containsKey(
                                                  FlutterFlowTheme.of(context)
                                                      .bodyMediumFamily),
                                        ),
                                    iconColor: FlutterFlowTheme.of(context)
                                        .secondaryText,
                                    iconSize: 18.0,
                                    elevation: 0.0,
                                    borderColor:
                                        FlutterFlowTheme.of(context).primary,
                                    borderWidth: 2.0,
                                    borderRadius: BorderRadius.circular(16.0),
                                  ),
                                  chipSpacing: 12.0,
                                  rowSpacing: 12.0,
                                  multiselect: false,
                                  initialized: _model.choiceChipsValue != null,
                                  alignment: WrapAlignment.start,
                                  controller:
                                      _model.choiceChipsValueController ??=
                                          FormFieldController<List<String>>(
                                    [FFAppState().currentReflectPage],
                                  ),
                                  wrapped: true,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      if ((_model.choiceChipsValue ==
                              'Clinical Case Reviews') ||
                          (_model.choiceChipsValue ==
                              'Supporting Documentation'))
                        Column(
                          mainAxisSize: MainAxisSize.max,
                          children: [
                            Padding(
                              padding: EdgeInsetsDirectional.fromSTEB(
                                  0.0, 10.0, 0.0, 0.0),
                              child: Row(
                                mainAxisSize: MainAxisSize.max,
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  if (_model.choiceChipsValue ==
                                      'Supporting Documentation')
                                    Container(
                                      width: 400.0,
                                      decoration: BoxDecoration(),
                                      child: Text(
                                        'Top tip: the Supporting Documentation logs are typically not direct clinical encounters, and therefore it will not be possible to address certain capabilities. Typically, this type of log focuses on the \'maintaining performance, learning and teaching\' capability.',
                                        style: FlutterFlowTheme.of(context)
                                            .bodyMedium
                                            .override(
                                              fontFamily:
                                                  FlutterFlowTheme.of(context)
                                                      .bodyMediumFamily,
                                              letterSpacing: 0.0,
                                              useGoogleFonts: GoogleFonts
                                                      .asMap()
                                                  .containsKey(
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .bodyMediumFamily),
                                            ),
                                      ),
                                    ),
                                  if (_model.choiceChipsValue ==
                                      'Clinical Case Reviews')
                                    Padding(
                                      padding: EdgeInsets.all(10.0),
                                      child: FFButtonWidget(
                                        onPressed: () async {
                                          logFirebaseEvent(
                                              'REFLECT_GP_TRAINEE_MY_CASES_BTN_ON_TAP');
                                          logFirebaseEvent(
                                              'Button_navigate_to');

                                          context.pushNamed(
                                            'my_cases',
                                            extra: <String, dynamic>{
                                              kTransitionInfoKey:
                                                  TransitionInfo(
                                                hasTransition: true,
                                                transitionType:
                                                    PageTransitionType
                                                        .rightToLeft,
                                              ),
                                            },
                                          );
                                        },
                                        text: 'My Cases',
                                        icon: Icon(
                                          Icons.collections_bookmark,
                                          size: 15.0,
                                        ),
                                        options: FFButtonOptions(
                                          width: 110.0,
                                          height: 50.0,
                                          padding:
                                              EdgeInsetsDirectional.fromSTEB(
                                                  0.0, 0.0, 0.0, 0.0),
                                          iconPadding:
                                              EdgeInsetsDirectional.fromSTEB(
                                                  0.0, 0.0, 0.0, 0.0),
                                          color: FlutterFlowTheme.of(context)
                                              .secondaryBackground,
                                          textStyle: FlutterFlowTheme.of(
                                                  context)
                                              .titleSmall
                                              .override(
                                                fontFamily:
                                                    FlutterFlowTheme.of(context)
                                                        .titleSmallFamily,
                                                color:
                                                    FlutterFlowTheme.of(context)
                                                        .primaryText,
                                                fontSize: 14.0,
                                                letterSpacing: 0.0,
                                                useGoogleFonts: GoogleFonts
                                                        .asMap()
                                                    .containsKey(
                                                        FlutterFlowTheme.of(
                                                                context)
                                                            .titleSmallFamily),
                                              ),
                                          borderRadius:
                                              BorderRadius.circular(8.0),
                                          hoverColor:
                                              FlutterFlowTheme.of(context)
                                                  .primaryBackground,
                                          hoverTextColor:
                                              FlutterFlowTheme.of(context)
                                                  .primaryText,
                                        ),
                                      ),
                                    ),
                                  if (_model.choiceChipsValue ==
                                      'Clinical Case Reviews')
                                    Padding(
                                      padding: EdgeInsets.all(10.0),
                                      child: FFButtonWidget(
                                        onPressed: () async {
                                          logFirebaseEvent(
                                              'REFLECT_GP_TRAINEE_DASHBOARD_BTN_ON_TAP');
                                          logFirebaseEvent(
                                              'Button_navigate_to');

                                          context.pushNamed(
                                            'reflect_gp_trainee_dashbaord',
                                            extra: <String, dynamic>{
                                              kTransitionInfoKey:
                                                  TransitionInfo(
                                                hasTransition: true,
                                                transitionType:
                                                    PageTransitionType
                                                        .rightToLeft,
                                              ),
                                            },
                                          );
                                        },
                                        text: 'Dashboard',
                                        icon: Icon(
                                          Icons.bar_chart,
                                          size: 15.0,
                                        ),
                                        options: FFButtonOptions(
                                          width: 110.0,
                                          height: 50.0,
                                          padding:
                                              EdgeInsetsDirectional.fromSTEB(
                                                  0.0, 0.0, 0.0, 0.0),
                                          iconPadding:
                                              EdgeInsetsDirectional.fromSTEB(
                                                  0.0, 0.0, 0.0, 0.0),
                                          color: FlutterFlowTheme.of(context)
                                              .secondaryBackground,
                                          textStyle: FlutterFlowTheme.of(
                                                  context)
                                              .titleSmall
                                              .override(
                                                fontFamily:
                                                    FlutterFlowTheme.of(context)
                                                        .titleSmallFamily,
                                                color:
                                                    FlutterFlowTheme.of(context)
                                                        .primaryText,
                                                fontSize: 14.0,
                                                letterSpacing: 0.0,
                                                useGoogleFonts: GoogleFonts
                                                        .asMap()
                                                    .containsKey(
                                                        FlutterFlowTheme.of(
                                                                context)
                                                            .titleSmallFamily),
                                              ),
                                          borderRadius:
                                              BorderRadius.circular(8.0),
                                          hoverColor:
                                              FlutterFlowTheme.of(context)
                                                  .primaryBackground,
                                          hoverTextColor:
                                              FlutterFlowTheme.of(context)
                                                  .primaryText,
                                        ),
                                      ),
                                    ),
                                  Padding(
                                    padding: EdgeInsetsDirectional.fromSTEB(
                                        20.0, 0.0, 20.0, 0.0),
                                    child: Column(
                                      mainAxisSize: MainAxisSize.max,
                                      children: [
                                        if (((widget.reflectionreference ==
                                                    null) &&
                                                (_model.choiceChipsValue ==
                                                    'Clinical Case Reviews')) &&
                                            responsiveVisibility(
                                              context: context,
                                              phone: false,
                                              tablet: false,
                                            ))
                                          Padding(
                                            padding:
                                                EdgeInsetsDirectional.fromSTEB(
                                                    20.0, 0.0, 20.0, 0.0),
                                            child: FFButtonWidget(
                                              onPressed: () async {
                                                logFirebaseEvent(
                                                    'REFLECT_GP_TRAINEE_PAGE_ButtonCCR_ON_TAP');
                                                logFirebaseEvent(
                                                    'ButtonCCR_update_app_state');
                                                FFAppState().Capability1Output =
                                                    '';
                                                FFAppState().Capability2Output =
                                                    '';
                                                FFAppState().Capability3Output =
                                                    '';
                                                FFAppState().ReflectionOutput =
                                                    '';
                                                FFAppState().LearningOutput =
                                                    '';
                                                FFAppState().Capability1 = '';
                                                FFAppState().Capability2 = '';
                                                FFAppState().Capability3 = '';
                                                FFAppState().ClinicalCase = '';
                                                safeSetState(() {});
                                                logFirebaseEvent(
                                                    'ButtonCCR_navigate_to');

                                                context.pushNamed(
                                                    'reflect_gp_trainee');

                                                logFirebaseEvent(
                                                    'ButtonCCR_update_app_state');
                                                FFAppState()
                                                        .currentReflectPage =
                                                    'Clinical Case Reviews';
                                                safeSetState(() {});
                                              },
                                              text: 'Clear page',
                                              options: FFButtonOptions(
                                                width: 100.0,
                                                height: 26.0,
                                                padding: EdgeInsetsDirectional
                                                    .fromSTEB(
                                                        0.0, 0.0, 0.0, 0.0),
                                                iconPadding:
                                                    EdgeInsetsDirectional
                                                        .fromSTEB(
                                                            0.0, 0.0, 0.0, 0.0),
                                                color:
                                                    FlutterFlowTheme.of(context)
                                                        .secondaryText,
                                                textStyle:
                                                    FlutterFlowTheme.of(context)
                                                        .titleSmall
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .titleSmallFamily,
                                                          color: Colors.white,
                                                          fontSize: 14.0,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .titleSmallFamily),
                                                        ),
                                                elevation: 3.0,
                                                borderSide: BorderSide(
                                                  color: Colors.transparent,
                                                  width: 1.0,
                                                ),
                                                borderRadius:
                                                    BorderRadius.circular(8.0),
                                              ),
                                            ),
                                          ),
                                        if (((widget.reflectionreference ==
                                                    null) &&
                                                (_model.choiceChipsValue ==
                                                    'Supporting Documentation')) &&
                                            responsiveVisibility(
                                              context: context,
                                              phone: false,
                                              tablet: false,
                                            ))
                                          Padding(
                                            padding:
                                                EdgeInsetsDirectional.fromSTEB(
                                                    20.0, 0.0, 20.0, 0.0),
                                            child: FFButtonWidget(
                                              onPressed: () async {
                                                logFirebaseEvent(
                                                    'REFLECT_GP_TRAINEE_PAGE_ButtonSD_ON_TAP');
                                                logFirebaseEvent(
                                                    'ButtonSD_update_app_state');
                                                FFAppState().Capability1Output =
                                                    '';
                                                FFAppState().Capability2Output =
                                                    '';
                                                FFAppState().Capability3Output =
                                                    '';
                                                FFAppState().ReflectionOutput =
                                                    '';
                                                FFAppState().LearningOutput =
                                                    '';
                                                FFAppState().Capability1 = '';
                                                FFAppState().Capability2 = '';
                                                FFAppState().Capability3 = '';
                                                FFAppState().ClinicalCase = '';
                                                safeSetState(() {});
                                                logFirebaseEvent(
                                                    'ButtonSD_navigate_to');

                                                context.pushNamed(
                                                    'reflect_gp_trainee');

                                                logFirebaseEvent(
                                                    'ButtonSD_update_app_state');
                                                FFAppState()
                                                        .currentReflectPage =
                                                    'Supporting Documentation';
                                                safeSetState(() {});
                                              },
                                              text: 'Clear page',
                                              options: FFButtonOptions(
                                                width: 100.0,
                                                height: 26.0,
                                                padding: EdgeInsetsDirectional
                                                    .fromSTEB(
                                                        0.0, 0.0, 0.0, 0.0),
                                                iconPadding:
                                                    EdgeInsetsDirectional
                                                        .fromSTEB(
                                                            0.0, 0.0, 0.0, 0.0),
                                                color:
                                                    FlutterFlowTheme.of(context)
                                                        .secondaryText,
                                                textStyle:
                                                    FlutterFlowTheme.of(context)
                                                        .titleSmall
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .titleSmallFamily,
                                                          color: Colors.white,
                                                          fontSize: 14.0,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .titleSmallFamily),
                                                        ),
                                                elevation: 3.0,
                                                borderSide: BorderSide(
                                                  color: Colors.transparent,
                                                  width: 1.0,
                                                ),
                                                borderRadius:
                                                    BorderRadius.circular(8.0),
                                              ),
                                            ),
                                          ),
                                      ],
                                    ),
                                  ),
                                  if ((_model.choiceChipsValue ==
                                          'Clinical Case Reviews') &&
                                      responsiveVisibility(
                                        context: context,
                                        phone: false,
                                        tablet: false,
                                      ))
                                    Padding(
                                      padding: EdgeInsets.all(10.0),
                                      child: Container(
                                        width: 162.0,
                                        height: 50.0,
                                        constraints: BoxConstraints(
                                          maxWidth: 590.0,
                                        ),
                                        decoration: BoxDecoration(
                                          color: FlutterFlowTheme.of(context)
                                              .secondaryBackground,
                                          boxShadow: [
                                            BoxShadow(
                                              blurRadius: 4.0,
                                              color: Color(0x33000000),
                                              offset: Offset(
                                                0.0,
                                                2.0,
                                              ),
                                            )
                                          ],
                                          borderRadius:
                                              BorderRadius.circular(10.0),
                                        ),
                                        child: Row(
                                          mainAxisSize: MainAxisSize.max,
                                          children: [
                                            Container(
                                              width: 84.0,
                                              decoration: BoxDecoration(),
                                              child: Text(
                                                'Try new features!',
                                                textAlign: TextAlign.center,
                                                style:
                                                    FlutterFlowTheme.of(context)
                                                        .bodyMedium
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodyMediumFamily,
                                                          color: FlutterFlowTheme
                                                                  .of(context)
                                                              .primaryText,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily),
                                                        ),
                                              ),
                                            ),
                                            Switch.adaptive(
                                              value: _model.switchHelpValue!,
                                              onChanged: (newValue) async {
                                                safeSetState(() =>
                                                    _model.switchHelpValue =
                                                        newValue);
                                                if (newValue) {
                                                  logFirebaseEvent(
                                                      'REFLECT_GP_TRAINEE_SwitchHelp_ON_TOGGLE_');
                                                  logFirebaseEvent(
                                                      'SwitchHelp_update_page_state');
                                                  _model.betaFeatures = true;
                                                  safeSetState(() {});
                                                } else {
                                                  logFirebaseEvent(
                                                      'REFLECT_GP_TRAINEE_SwitchHelp_ON_TOGGLE_');
                                                  logFirebaseEvent(
                                                      'SwitchHelp_update_page_state');
                                                  _model.betaFeatures = false;
                                                  safeSetState(() {});
                                                }
                                              },
                                              activeColor:
                                                  FlutterFlowTheme.of(context)
                                                      .primary,
                                              activeTrackColor:
                                                  FlutterFlowTheme.of(context)
                                                      .accent1,
                                              inactiveTrackColor:
                                                  FlutterFlowTheme.of(context)
                                                      .primaryBackground,
                                              inactiveThumbColor:
                                                  FlutterFlowTheme.of(context)
                                                      .secondaryText,
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  AlignedTooltip(
                                    content: Padding(
                                      padding: EdgeInsets.all(4.0),
                                      child: Text(
                                        'Getting an error?\n- Make sure not to use quotation marks \"example\" \n- Avoid the use of special characters\n- Don\'t leave any blank lines at the end of the case \n- Use clear, simple sentences and avoid abbreviations\n- Maximum 8-9 lines ',
                                        style: FlutterFlowTheme.of(context)
                                            .bodyLarge
                                            .override(
                                              fontFamily:
                                                  FlutterFlowTheme.of(context)
                                                      .bodyLargeFamily,
                                              letterSpacing: 0.0,
                                              useGoogleFonts:
                                                  GoogleFonts.asMap()
                                                      .containsKey(
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyLargeFamily),
                                            ),
                                      ),
                                    ),
                                    offset: 4.0,
                                    preferredDirection: AxisDirection.down,
                                    borderRadius: BorderRadius.circular(8.0),
                                    backgroundColor:
                                        FlutterFlowTheme.of(context)
                                            .secondaryBackground,
                                    elevation: 4.0,
                                    tailBaseWidth: 24.0,
                                    tailLength: 12.0,
                                    waitDuration: Duration(milliseconds: 100),
                                    showDuration: Duration(milliseconds: 1500),
                                    triggerMode: TooltipTriggerMode.tap,
                                    child: Padding(
                                      padding: EdgeInsets.all(10.0),
                                      child: Icon(
                                        Icons.help_outline,
                                        color: FlutterFlowTheme.of(context)
                                            .primaryText,
                                        size: 24.0,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            Padding(
                              padding: EdgeInsetsDirectional.fromSTEB(
                                  0.0, 10.0, 0.0, 0.0),
                              child: Wrap(
                                spacing: 0.0,
                                runSpacing: 0.0,
                                alignment: WrapAlignment.start,
                                crossAxisAlignment: WrapCrossAlignment.start,
                                direction: Axis.horizontal,
                                runAlignment: WrapAlignment.start,
                                verticalDirection: VerticalDirection.down,
                                clipBehavior: Clip.none,
                                children: [
                                  if (_model.choiceChipsValue ==
                                      'Clinical Case Reviews')
                                    MouseRegion(
                                      opaque: false,
                                      cursor: MouseCursor.defer ??
                                          MouseCursor.defer,
                                      child: Padding(
                                        padding: EdgeInsetsDirectional.fromSTEB(
                                            20.0, 10.0, 10.0, 10.0),
                                        child: Container(
                                          width: 400.0,
                                          height: 200.0,
                                          decoration: BoxDecoration(
                                            color: FlutterFlowTheme.of(context)
                                                .secondaryBackground,
                                            boxShadow: [
                                              BoxShadow(
                                                blurRadius: 4.0,
                                                color: Color(0x33000000),
                                                offset: Offset(
                                                  0.0,
                                                  2.0,
                                                ),
                                              )
                                            ],
                                            borderRadius:
                                                BorderRadius.circular(10.0),
                                            border: Border.all(
                                              color:
                                                  FlutterFlowTheme.of(context)
                                                      .accent3,
                                            ),
                                          ),
                                          child: Padding(
                                            padding: EdgeInsets.all(10.0),
                                            child: Column(
                                              mainAxisSize: MainAxisSize.max,
                                              mainAxisAlignment:
                                                  MainAxisAlignment
                                                      .spaceBetween,
                                              children: [
                                                Row(
                                                  mainAxisSize:
                                                      MainAxisSize.max,
                                                  mainAxisAlignment:
                                                      MainAxisAlignment
                                                          .spaceEvenly,
                                                  children: [
                                                    Container(
                                                      width: 171.0,
                                                      decoration:
                                                          BoxDecoration(),
                                                      child: Text(
                                                        '1. Enter an anonymous case summary',
                                                        style:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .bodyMedium
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily,
                                                                  fontSize:
                                                                      16.0,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  fontWeight:
                                                                      FontWeight
                                                                          .w600,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .bodyMediumFamily),
                                                                ),
                                                      ),
                                                    ),
                                                    FFButtonWidget(
                                                      onPressed: () async {
                                                        logFirebaseEvent(
                                                            'REFLECT_GP_TRAINEE_EXAMPLE_BTN_ON_TAP');
                                                        logFirebaseEvent(
                                                            'Button_update_app_state');
                                                        FFAppState()
                                                                .ClinicalCase =
                                                            'A 3 year old boy presented with fever and wheeze. Noted to hove widespread wheeze on examination with a mildly increased respiratory rate and normal oxygen sats. Treated with salbutamol which improved the wheeze, and he was discharged home with salbutamol and a wheeze plan.';
                                                        safeSetState(() {});
                                                        logFirebaseEvent(
                                                            'Button_set_form_field');
                                                        safeSetState(() {
                                                          _model.clinicalCaseTextController
                                                                  ?.text =
                                                              FFAppState()
                                                                  .ClinicalCase;
                                                        });
                                                      },
                                                      text: 'Example',
                                                      options: FFButtonOptions(
                                                        height: 27.0,
                                                        padding:
                                                            EdgeInsetsDirectional
                                                                .fromSTEB(
                                                                    5.0,
                                                                    0.0,
                                                                    5.0,
                                                                    0.0),
                                                        iconPadding:
                                                            EdgeInsetsDirectional
                                                                .fromSTEB(
                                                                    0.0,
                                                                    0.0,
                                                                    0.0,
                                                                    0.0),
                                                        color:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .grayIcon,
                                                        textStyle:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .titleSmall
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .titleSmallFamily,
                                                                  color: Colors
                                                                      .white,
                                                                  fontSize:
                                                                      14.0,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .titleSmallFamily),
                                                                ),
                                                        elevation: 3.0,
                                                        borderSide: BorderSide(
                                                          color: Colors
                                                              .transparent,
                                                          width: 1.0,
                                                        ),
                                                        borderRadius:
                                                            BorderRadius
                                                                .circular(8.0),
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                Stack(
                                                  alignment:
                                                      AlignmentDirectional(
                                                          0.0, 1.0),
                                                  children: [
                                                    Padding(
                                                      padding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  0.0,
                                                                  5.0,
                                                                  0.0,
                                                                  0.0),
                                                      child: TextFormField(
                                                        controller: _model
                                                            .clinicalCaseTextController,
                                                        focusNode: _model
                                                            .clinicalCaseFocusNode,
                                                        onChanged: (_) =>
                                                            EasyDebounce
                                                                .debounce(
                                                          '_model.clinicalCaseTextController',
                                                          Duration(
                                                              milliseconds:
                                                                  2000),
                                                          () async {
                                                            logFirebaseEvent(
                                                                'REFLECT_GP_TRAINEE_ClinicalCase_ON_TEXTF');
                                                            logFirebaseEvent(
                                                                'ClinicalCase_update_app_state');
                                                            FFAppState()
                                                                    .ClinicalCase =
                                                                _model
                                                                    .clinicalCaseTextController
                                                                    .text;
                                                          },
                                                        ),
                                                        onFieldSubmitted:
                                                            (_) async {
                                                          logFirebaseEvent(
                                                              'REFLECT_GP_TRAINEE_ClinicalCase_ON_TEXTF');
                                                          logFirebaseEvent(
                                                              'ClinicalCase_update_app_state');
                                                          FFAppState()
                                                                  .ClinicalCase =
                                                              functions.replaceTabWithSpace(
                                                                  _model
                                                                      .clinicalCaseTextController
                                                                      .text)!;
                                                        },
                                                        autofocus: true,
                                                        textInputAction:
                                                            TextInputAction
                                                                .done,
                                                        obscureText: false,
                                                        decoration:
                                                            InputDecoration(
                                                          hintStyle:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodySmall
                                                                  .override(
                                                                    fontFamily:
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodySmallFamily,
                                                                    color: _model.mouseRegionCaseHovered
                                                                        ? FlutterFlowTheme.of(context)
                                                                            .primary
                                                                        : FlutterFlowTheme.of(context)
                                                                            .secondaryBackground,
                                                                    letterSpacing:
                                                                        0.0,
                                                                    useGoogleFonts: GoogleFonts
                                                                            .asMap()
                                                                        .containsKey(
                                                                            FlutterFlowTheme.of(context).bodySmallFamily),
                                                                  ),
                                                          enabledBorder:
                                                              UnderlineInputBorder(
                                                            borderSide:
                                                                BorderSide(
                                                              color: Color(
                                                                  0x00000000),
                                                              width: 1.0,
                                                            ),
                                                            borderRadius:
                                                                const BorderRadius
                                                                    .only(
                                                              topLeft: Radius
                                                                  .circular(
                                                                      4.0),
                                                              topRight: Radius
                                                                  .circular(
                                                                      4.0),
                                                            ),
                                                          ),
                                                          focusedBorder:
                                                              UnderlineInputBorder(
                                                            borderSide:
                                                                BorderSide(
                                                              color: Color(
                                                                  0x00000000),
                                                              width: 1.0,
                                                            ),
                                                            borderRadius:
                                                                const BorderRadius
                                                                    .only(
                                                              topLeft: Radius
                                                                  .circular(
                                                                      4.0),
                                                              topRight: Radius
                                                                  .circular(
                                                                      4.0),
                                                            ),
                                                          ),
                                                          errorBorder:
                                                              UnderlineInputBorder(
                                                            borderSide:
                                                                BorderSide(
                                                              color: Color(
                                                                  0x00000000),
                                                              width: 1.0,
                                                            ),
                                                            borderRadius:
                                                                const BorderRadius
                                                                    .only(
                                                              topLeft: Radius
                                                                  .circular(
                                                                      4.0),
                                                              topRight: Radius
                                                                  .circular(
                                                                      4.0),
                                                            ),
                                                          ),
                                                          focusedErrorBorder:
                                                              UnderlineInputBorder(
                                                            borderSide:
                                                                BorderSide(
                                                              color: Color(
                                                                  0x00000000),
                                                              width: 1.0,
                                                            ),
                                                            borderRadius:
                                                                const BorderRadius
                                                                    .only(
                                                              topLeft: Radius
                                                                  .circular(
                                                                      4.0),
                                                              topRight: Radius
                                                                  .circular(
                                                                      4.0),
                                                            ),
                                                          ),
                                                          suffixIcon: _model
                                                                  .clinicalCaseTextController!
                                                                  .text
                                                                  .isNotEmpty
                                                              ? InkWell(
                                                                  onTap:
                                                                      () async {
                                                                    _model
                                                                        .clinicalCaseTextController
                                                                        ?.clear();
                                                                    logFirebaseEvent(
                                                                        'REFLECT_GP_TRAINEE_ClinicalCase_ON_TEXTF');
                                                                    logFirebaseEvent(
                                                                        'ClinicalCase_update_app_state');
                                                                    FFAppState()
                                                                            .ClinicalCase =
                                                                        _model
                                                                            .clinicalCaseTextController
                                                                            .text;
                                                                    safeSetState(
                                                                        () {});
                                                                  },
                                                                  child: Icon(
                                                                    Icons.clear,
                                                                    size: 20.0,
                                                                  ),
                                                                )
                                                              : null,
                                                        ),
                                                        style:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .bodyMedium
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .bodyMediumFamily),
                                                                ),
                                                        maxLines: 6,
                                                        validator: _model
                                                            .clinicalCaseTextControllerValidator
                                                            .asValidator(
                                                                context),
                                                      ),
                                                    ),
                                                    Row(
                                                      mainAxisSize:
                                                          MainAxisSize.max,
                                                      mainAxisAlignment:
                                                          MainAxisAlignment.end,
                                                      crossAxisAlignment:
                                                          CrossAxisAlignment
                                                              .center,
                                                      children: [
                                                        Text(
                                                          '${_model.clinicalCaseTextController.text == '' ? '0' : valueOrDefault<String>(
                                                              functions
                                                                  .countWords(_model
                                                                      .clinicalCaseTextController
                                                                      .text)
                                                                  .toString(),
                                                              '0',
                                                            )}/400',
                                                          style: FlutterFlowTheme
                                                                  .of(context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                color: functions.wordsLessThan(_model
                                                                            .clinicalCaseTextController
                                                                            .text) ==
                                                                        true
                                                                    ? FlutterFlowTheme.of(
                                                                            context)
                                                                        .primaryText
                                                                    : FlutterFlowTheme.of(
                                                                            context)
                                                                        .primary,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                        ),
                                                      ],
                                                    ),
                                                  ],
                                                ),
                                              ],
                                            ),
                                          ),
                                        ).animateOnPageLoad(animationsMap[
                                            'containerOnPageLoadAnimation1']!),
                                      ),
                                      onEnter: ((event) async {
                                        safeSetState(() => _model
                                            .mouseRegionCaseHovered = true);
                                      }),
                                      onExit: ((event) async {
                                        safeSetState(() => _model
                                            .mouseRegionCaseHovered = false);
                                      }),
                                    ),
                                  if (_model.choiceChipsValue ==
                                      'Supporting Documentation')
                                    Padding(
                                      padding: EdgeInsetsDirectional.fromSTEB(
                                          20.0, 10.0, 10.0, 10.0),
                                      child: Container(
                                        width: 500.0,
                                        height: 200.0,
                                        decoration: BoxDecoration(
                                          color: FlutterFlowTheme.of(context)
                                              .secondaryBackground,
                                          boxShadow: [
                                            BoxShadow(
                                              blurRadius: 4.0,
                                              color: Color(0x33000000),
                                              offset: Offset(
                                                0.0,
                                                2.0,
                                              ),
                                            )
                                          ],
                                          borderRadius:
                                              BorderRadius.circular(10.0),
                                          border: Border.all(
                                            color: FlutterFlowTheme.of(context)
                                                .accent3,
                                          ),
                                        ),
                                        child: Padding(
                                          padding: EdgeInsets.all(10.0),
                                          child: Column(
                                            mainAxisSize: MainAxisSize.max,
                                            mainAxisAlignment:
                                                MainAxisAlignment.spaceBetween,
                                            children: [
                                              Row(
                                                mainAxisSize: MainAxisSize.max,
                                                mainAxisAlignment:
                                                    MainAxisAlignment
                                                        .spaceEvenly,
                                                children: [
                                                  Container(
                                                    width: 337.0,
                                                    decoration: BoxDecoration(),
                                                    child: Text(
                                                      '1. Briefly describe your key learning from this event (including the setting of the event):',
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                fontSize: 16.0,
                                                                letterSpacing:
                                                                    0.0,
                                                                fontWeight:
                                                                    FontWeight
                                                                        .w600,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                    ),
                                                  ),
                                                  FFButtonWidget(
                                                    onPressed: () async {
                                                      logFirebaseEvent(
                                                          'REFLECT_GP_TRAINEE_EXAMPLE_BTN_ON_TAP');
                                                      logFirebaseEvent(
                                                          'Button_update_app_state');
                                                      FFAppState()
                                                              .ClinicalCase =
                                                          'I attended a teaching session about wheeze in children, and learned the systematic approach to assessing a wheezy child, and earned about first-line management';
                                                      safeSetState(() {});
                                                      logFirebaseEvent(
                                                          'Button_set_form_field');
                                                      safeSetState(() {
                                                        _model.keyLearningTextController
                                                                ?.text =
                                                            FFAppState()
                                                                .ClinicalCase;
                                                      });
                                                    },
                                                    text: 'Example',
                                                    options: FFButtonOptions(
                                                      height: 27.0,
                                                      padding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  5.0,
                                                                  0.0,
                                                                  5.0,
                                                                  0.0),
                                                      iconPadding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  0.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0),
                                                      color:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .primary,
                                                      textStyle:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .titleSmall
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .titleSmallFamily,
                                                                color: Colors
                                                                    .white,
                                                                fontSize: 14.0,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .titleSmallFamily),
                                                              ),
                                                      elevation: 3.0,
                                                      borderSide: BorderSide(
                                                        color:
                                                            Colors.transparent,
                                                        width: 1.0,
                                                      ),
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              8.0),
                                                    ),
                                                  ),
                                                ],
                                              ),
                                              Stack(
                                                alignment: AlignmentDirectional(
                                                    0.0, 1.0),
                                                children: [
                                                  Align(
                                                    alignment:
                                                        AlignmentDirectional(
                                                            0.0, 0.0),
                                                    child: Padding(
                                                      padding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  0.0,
                                                                  5.0,
                                                                  0.0,
                                                                  0.0),
                                                      child: TextFormField(
                                                        controller: _model
                                                            .keyLearningTextController,
                                                        focusNode: _model
                                                            .keyLearningFocusNode,
                                                        onChanged: (_) =>
                                                            EasyDebounce
                                                                .debounce(
                                                          '_model.keyLearningTextController',
                                                          Duration(
                                                              milliseconds:
                                                                  2000),
                                                          () async {
                                                            logFirebaseEvent(
                                                                'REFLECT_GP_TRAINEE_KeyLearning_ON_TEXTFI');
                                                            logFirebaseEvent(
                                                                'KeyLearning_update_app_state');
                                                            FFAppState()
                                                                    .ClinicalCase =
                                                                _model
                                                                    .keyLearningTextController
                                                                    .text;
                                                          },
                                                        ),
                                                        onFieldSubmitted:
                                                            (_) async {
                                                          logFirebaseEvent(
                                                              'REFLECT_GP_TRAINEE_KeyLearning_ON_TEXTFI');
                                                          logFirebaseEvent(
                                                              'KeyLearning_update_app_state');
                                                          FFAppState()
                                                                  .ClinicalCase =
                                                              functions.replaceTabWithSpace(
                                                                  _model
                                                                      .keyLearningTextController
                                                                      .text)!;
                                                        },
                                                        autofocus: true,
                                                        textInputAction:
                                                            TextInputAction
                                                                .done,
                                                        obscureText: false,
                                                        decoration:
                                                            InputDecoration(
                                                          hintStyle:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodySmall
                                                                  .override(
                                                                    fontFamily:
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodySmallFamily,
                                                                    color: FlutterFlowTheme.of(
                                                                            context)
                                                                        .primaryText,
                                                                    letterSpacing:
                                                                        0.0,
                                                                    useGoogleFonts: GoogleFonts
                                                                            .asMap()
                                                                        .containsKey(
                                                                            FlutterFlowTheme.of(context).bodySmallFamily),
                                                                  ),
                                                          enabledBorder:
                                                              UnderlineInputBorder(
                                                            borderSide:
                                                                BorderSide(
                                                              color: Color(
                                                                  0x00000000),
                                                              width: 1.0,
                                                            ),
                                                            borderRadius:
                                                                const BorderRadius
                                                                    .only(
                                                              topLeft: Radius
                                                                  .circular(
                                                                      4.0),
                                                              topRight: Radius
                                                                  .circular(
                                                                      4.0),
                                                            ),
                                                          ),
                                                          focusedBorder:
                                                              UnderlineInputBorder(
                                                            borderSide:
                                                                BorderSide(
                                                              color: Color(
                                                                  0x00000000),
                                                              width: 1.0,
                                                            ),
                                                            borderRadius:
                                                                const BorderRadius
                                                                    .only(
                                                              topLeft: Radius
                                                                  .circular(
                                                                      4.0),
                                                              topRight: Radius
                                                                  .circular(
                                                                      4.0),
                                                            ),
                                                          ),
                                                          errorBorder:
                                                              UnderlineInputBorder(
                                                            borderSide:
                                                                BorderSide(
                                                              color: Color(
                                                                  0x00000000),
                                                              width: 1.0,
                                                            ),
                                                            borderRadius:
                                                                const BorderRadius
                                                                    .only(
                                                              topLeft: Radius
                                                                  .circular(
                                                                      4.0),
                                                              topRight: Radius
                                                                  .circular(
                                                                      4.0),
                                                            ),
                                                          ),
                                                          focusedErrorBorder:
                                                              UnderlineInputBorder(
                                                            borderSide:
                                                                BorderSide(
                                                              color: Color(
                                                                  0x00000000),
                                                              width: 1.0,
                                                            ),
                                                            borderRadius:
                                                                const BorderRadius
                                                                    .only(
                                                              topLeft: Radius
                                                                  .circular(
                                                                      4.0),
                                                              topRight: Radius
                                                                  .circular(
                                                                      4.0),
                                                            ),
                                                          ),
                                                          suffixIcon: _model
                                                                  .keyLearningTextController!
                                                                  .text
                                                                  .isNotEmpty
                                                              ? InkWell(
                                                                  onTap:
                                                                      () async {
                                                                    _model
                                                                        .keyLearningTextController
                                                                        ?.clear();
                                                                    logFirebaseEvent(
                                                                        'REFLECT_GP_TRAINEE_KeyLearning_ON_TEXTFI');
                                                                    logFirebaseEvent(
                                                                        'KeyLearning_update_app_state');
                                                                    FFAppState()
                                                                            .ClinicalCase =
                                                                        _model
                                                                            .keyLearningTextController
                                                                            .text;
                                                                    safeSetState(
                                                                        () {});
                                                                  },
                                                                  child: Icon(
                                                                    Icons.clear,
                                                                    size: 20.0,
                                                                  ),
                                                                )
                                                              : null,
                                                        ),
                                                        style:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .bodyMedium
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .bodyMediumFamily),
                                                                ),
                                                        maxLines: 6,
                                                        validator: _model
                                                            .keyLearningTextControllerValidator
                                                            .asValidator(
                                                                context),
                                                      ),
                                                    ),
                                                  ),
                                                  Row(
                                                    mainAxisSize:
                                                        MainAxisSize.max,
                                                    mainAxisAlignment:
                                                        MainAxisAlignment.end,
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment
                                                            .center,
                                                    children: [
                                                      Text(
                                                        '${_model.keyLearningTextController.text == '' ? '0' : valueOrDefault<String>(
                                                            functions
                                                                .countWords(_model
                                                                    .keyLearningTextController
                                                                    .text)
                                                                .toString(),
                                                            '0',
                                                          )}/400',
                                                        style:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .bodyMedium
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily,
                                                                  color: functions.wordsLessThan(_model
                                                                              .keyLearningTextController
                                                                              .text) ==
                                                                          true
                                                                      ? FlutterFlowTheme.of(
                                                                              context)
                                                                          .primaryText
                                                                      : FlutterFlowTheme.of(
                                                                              context)
                                                                          .primary,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .bodyMediumFamily),
                                                                ),
                                                      ),
                                                    ],
                                                  ),
                                                ],
                                              ),
                                            ],
                                          ),
                                        ),
                                      ).animateOnPageLoad(animationsMap[
                                          'containerOnPageLoadAnimation2']!),
                                    ),
                                  Padding(
                                    padding: EdgeInsets.all(10.0),
                                    child:
                                        StreamBuilder<List<UserCountsRecord>>(
                                      stream: queryUserCountsRecord(
                                        parent: currentUserReference,
                                      ),
                                      builder: (context, snapshot) {
                                        // Customize what your widget looks like when it's loading.
                                        if (!snapshot.hasData) {
                                          return Center(
                                            child: SizedBox(
                                              width: 50.0,
                                              height: 50.0,
                                              child: SpinKitPulse(
                                                color:
                                                    FlutterFlowTheme.of(context)
                                                        .primary,
                                                size: 50.0,
                                              ),
                                            ),
                                          );
                                        }
                                        List<UserCountsRecord>
                                            containerUserCountsRecordList =
                                            snapshot.data!;

                                        return Container(
                                          width: 417.0,
                                          height: 200.0,
                                          decoration: BoxDecoration(
                                            color: FlutterFlowTheme.of(context)
                                                .secondaryBackground,
                                            boxShadow: [
                                              BoxShadow(
                                                blurRadius: 4.0,
                                                color: Color(0x33000000),
                                                offset: Offset(
                                                  0.0,
                                                  2.0,
                                                ),
                                              )
                                            ],
                                            borderRadius:
                                                BorderRadius.circular(10.0),
                                            border: Border.all(
                                              color:
                                                  FlutterFlowTheme.of(context)
                                                      .accent3,
                                            ),
                                          ),
                                          child: Padding(
                                            padding: EdgeInsets.all(10.0),
                                            child: Column(
                                              mainAxisSize: MainAxisSize.max,
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.start,
                                              children: [
                                                Text(
                                                  '2. Select 3 capabilities',
                                                  style: FlutterFlowTheme.of(
                                                          context)
                                                      .bodyMedium
                                                      .override(
                                                        fontFamily:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .bodyMediumFamily,
                                                        fontSize: 16.0,
                                                        letterSpacing: 0.0,
                                                        fontWeight:
                                                            FontWeight.w600,
                                                        useGoogleFonts: GoogleFonts
                                                                .asMap()
                                                            .containsKey(
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily),
                                                      ),
                                                ),
                                                FlutterFlowDropDown<String>(
                                                  controller: _model
                                                          .dropDownCap1ValueController ??=
                                                      FormFieldController<
                                                          String>(
                                                    _model.dropDownCap1Value ??=
                                                        FFAppState()
                                                            .Capability1,
                                                  ),
                                                  options: [
                                                    'Fitness to practice',
                                                    'Maintaining an ethical approach',
                                                    'Communication and consultation skills',
                                                    'Data gathering and interpretation',
                                                    'Clinical examination and procedural skills',
                                                    'Making a diagnosis/decisions',
                                                    'Clinical management',
                                                    'Managing medical complexity',
                                                    'Working with colleagues and in teams',
                                                    'Maintaining performance, learning and teaching',
                                                    'Organisation, management and leadership',
                                                    'Practising holistically, promoting health and safeguarding',
                                                    'Community orientation'
                                                  ],
                                                  onChanged: (val) async {
                                                    safeSetState(() => _model
                                                            .dropDownCap1Value =
                                                        val);
                                                    logFirebaseEvent(
                                                        'REFLECT_GP_TRAINEE_DropDownCap1_ON_FORM_');
                                                    logFirebaseEvent(
                                                        'DropDownCap1_update_app_state');
                                                    FFAppState().Capability1 =
                                                        _model
                                                            .dropDownCap1Value!;
                                                    safeSetState(() {});
                                                    if (_model
                                                            .dropDownCap1Value ==
                                                        'Maintaining an ethical approach') {
                                                      if (containerUserCountsRecordList
                                                              .firstOrNull!
                                                              .fitnesstopractice >=
                                                          3) {
                                                        logFirebaseEvent(
                                                            'DropDownCap1_show_snack_bar');
                                                        ScaffoldMessenger.of(
                                                                context)
                                                            .showSnackBar(
                                                          SnackBar(
                                                            content: Text(
                                                              'You already have at least 3 records for this capability, consider choosing another!',
                                                              style: TextStyle(
                                                                color: FlutterFlowTheme.of(
                                                                        context)
                                                                    .primaryText,
                                                              ),
                                                            ),
                                                            duration: Duration(
                                                                milliseconds:
                                                                    4000),
                                                            backgroundColor:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .secondary,
                                                          ),
                                                        );
                                                      }
                                                    } else {
                                                      if (_model
                                                              .dropDownCap1Value ==
                                                          'Fitness to practice') {
                                                        if (containerUserCountsRecordList
                                                                .firstOrNull!
                                                                .maintaininganethicalapproach >=
                                                            3) {
                                                          logFirebaseEvent(
                                                              'DropDownCap1_show_snack_bar');
                                                          ScaffoldMessenger.of(
                                                                  context)
                                                              .showSnackBar(
                                                            SnackBar(
                                                              content: Text(
                                                                'You already have at least 3 records for this capability, consider choosing another!',
                                                                style:
                                                                    TextStyle(
                                                                  color: FlutterFlowTheme.of(
                                                                          context)
                                                                      .primaryText,
                                                                ),
                                                              ),
                                                              duration: Duration(
                                                                  milliseconds:
                                                                      4000),
                                                              backgroundColor:
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .secondary,
                                                            ),
                                                          );
                                                        }
                                                      } else {
                                                        if (_model
                                                                .dropDownCap1Value ==
                                                            'Communication and consultation skills') {
                                                          if (containerUserCountsRecordList
                                                                  .firstOrNull!
                                                                  .communicationandconsultationskills >=
                                                              3) {
                                                            logFirebaseEvent(
                                                                'DropDownCap1_show_snack_bar');
                                                            ScaffoldMessenger
                                                                    .of(context)
                                                                .showSnackBar(
                                                              SnackBar(
                                                                content: Text(
                                                                  'You already have at least 3 records for this capability, consider choosing another!',
                                                                  style:
                                                                      TextStyle(
                                                                    color: FlutterFlowTheme.of(
                                                                            context)
                                                                        .primaryText,
                                                                  ),
                                                                ),
                                                                duration: Duration(
                                                                    milliseconds:
                                                                        4000),
                                                                backgroundColor:
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .secondary,
                                                              ),
                                                            );
                                                          }
                                                        } else {
                                                          if (_model
                                                                  .dropDownCap1Value ==
                                                              'Data gathering and interpretation') {
                                                            if (containerUserCountsRecordList
                                                                    .firstOrNull!
                                                                    .datagatheringandinterpretation >=
                                                                3) {
                                                              logFirebaseEvent(
                                                                  'DropDownCap1_show_snack_bar');
                                                              ScaffoldMessenger
                                                                      .of(context)
                                                                  .showSnackBar(
                                                                SnackBar(
                                                                  content: Text(
                                                                    'You already have at least 3 records for this capability, consider choosing another!',
                                                                    style:
                                                                        TextStyle(
                                                                      color: FlutterFlowTheme.of(
                                                                              context)
                                                                          .primaryText,
                                                                    ),
                                                                  ),
                                                                  duration: Duration(
                                                                      milliseconds:
                                                                          4000),
                                                                  backgroundColor:
                                                                      FlutterFlowTheme.of(
                                                                              context)
                                                                          .secondary,
                                                                ),
                                                              );
                                                            }
                                                          } else {
                                                            if (_model
                                                                    .dropDownCap1Value ==
                                                                'Clinical examination and procedural skills') {
                                                              if (containerUserCountsRecordList
                                                                      .firstOrNull!
                                                                      .clinicalexaminationandproceduralskills >=
                                                                  3) {
                                                                logFirebaseEvent(
                                                                    'DropDownCap1_show_snack_bar');
                                                                ScaffoldMessenger.of(
                                                                        context)
                                                                    .showSnackBar(
                                                                  SnackBar(
                                                                    content:
                                                                        Text(
                                                                      'You already have at least 3 records for this capability, consider choosing another!',
                                                                      style:
                                                                          TextStyle(
                                                                        color: FlutterFlowTheme.of(context)
                                                                            .primaryText,
                                                                      ),
                                                                    ),
                                                                    duration: Duration(
                                                                        milliseconds:
                                                                            4000),
                                                                    backgroundColor:
                                                                        FlutterFlowTheme.of(context)
                                                                            .secondary,
                                                                  ),
                                                                );
                                                              }
                                                            } else {
                                                              if (_model
                                                                      .dropDownCap1Value ==
                                                                  'Making a diagnosis/decisions') {
                                                                if (containerUserCountsRecordList
                                                                        .firstOrNull!
                                                                        .makingadiagnosisdecisions >=
                                                                    3) {
                                                                  logFirebaseEvent(
                                                                      'DropDownCap1_show_snack_bar');
                                                                  ScaffoldMessenger.of(
                                                                          context)
                                                                      .showSnackBar(
                                                                    SnackBar(
                                                                      content:
                                                                          Text(
                                                                        'You already have at least 3 records for this capability, consider choosing another!',
                                                                        style:
                                                                            TextStyle(
                                                                          color:
                                                                              FlutterFlowTheme.of(context).primaryText,
                                                                        ),
                                                                      ),
                                                                      duration: Duration(
                                                                          milliseconds:
                                                                              4000),
                                                                      backgroundColor:
                                                                          FlutterFlowTheme.of(context)
                                                                              .secondary,
                                                                    ),
                                                                  );
                                                                }
                                                              } else {
                                                                if (_model
                                                                        .dropDownCap1Value ==
                                                                    'Clinical management') {
                                                                  if (containerUserCountsRecordList
                                                                          .firstOrNull!
                                                                          .clinicalmanagement >=
                                                                      3) {
                                                                    logFirebaseEvent(
                                                                        'DropDownCap1_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'You already have at least 3 records for this capability, consider choosing another!',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 4000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }
                                                                } else {
                                                                  if (_model
                                                                          .dropDownCap1Value ==
                                                                      'Managing medical complexity') {
                                                                    if (containerUserCountsRecordList
                                                                            .firstOrNull!
                                                                            .managingmedicalcomplexity >=
                                                                        3) {
                                                                      logFirebaseEvent(
                                                                          'DropDownCap1_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'You already have at least 3 records for this capability, consider choosing another!',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 4000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                    }
                                                                  } else {
                                                                    if (_model
                                                                            .dropDownCap1Value ==
                                                                        'Working with colleagues and in teams') {
                                                                      if (containerUserCountsRecordList
                                                                              .firstOrNull!
                                                                              .workingwithcolleaguesandinteams >=
                                                                          3) {
                                                                        logFirebaseEvent(
                                                                            'DropDownCap1_show_snack_bar');
                                                                        ScaffoldMessenger.of(context)
                                                                            .showSnackBar(
                                                                          SnackBar(
                                                                            content:
                                                                                Text(
                                                                              'You already have at least 3 records for this capability, consider choosing another!',
                                                                              style: TextStyle(
                                                                                color: FlutterFlowTheme.of(context).primaryText,
                                                                              ),
                                                                            ),
                                                                            duration:
                                                                                Duration(milliseconds: 4000),
                                                                            backgroundColor:
                                                                                FlutterFlowTheme.of(context).secondary,
                                                                          ),
                                                                        );
                                                                      }
                                                                    } else {
                                                                      if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        if (containerUserCountsRecordList.firstOrNull!.maintainingperformancelearningandteaching >=
                                                                            3) {
                                                                          logFirebaseEvent(
                                                                              'DropDownCap1_show_snack_bar');
                                                                          ScaffoldMessenger.of(context)
                                                                              .showSnackBar(
                                                                            SnackBar(
                                                                              content: Text(
                                                                                'You already have at least 3 records for this capability, consider choosing another!',
                                                                                style: TextStyle(
                                                                                  color: FlutterFlowTheme.of(context).primaryText,
                                                                                ),
                                                                              ),
                                                                              duration: Duration(milliseconds: 4000),
                                                                              backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                            ),
                                                                          );
                                                                        }
                                                                      } else {
                                                                        if (_model.dropDownCap1Value ==
                                                                            'Organisation, management and leadership') {
                                                                          if (containerUserCountsRecordList.firstOrNull!.organisationmanagementandleadership >=
                                                                              3) {
                                                                            logFirebaseEvent('DropDownCap1_show_snack_bar');
                                                                            ScaffoldMessenger.of(context).showSnackBar(
                                                                              SnackBar(
                                                                                content: Text(
                                                                                  'You already have at least 3 records for this capability, consider choosing another!',
                                                                                  style: TextStyle(
                                                                                    color: FlutterFlowTheme.of(context).primaryText,
                                                                                  ),
                                                                                ),
                                                                                duration: Duration(milliseconds: 4000),
                                                                                backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                              ),
                                                                            );
                                                                          }
                                                                        } else {
                                                                          if (_model.dropDownCap1Value ==
                                                                              'Practicing holistically, promoting health and safeguarding') {
                                                                            if (containerUserCountsRecordList.firstOrNull!.practisingholisticallypromotinghealthandsafeguarding >=
                                                                                3) {
                                                                              logFirebaseEvent('DropDownCap1_show_snack_bar');
                                                                              ScaffoldMessenger.of(context).showSnackBar(
                                                                                SnackBar(
                                                                                  content: Text(
                                                                                    'You already have at least 3 records for this capability, consider choosing another!',
                                                                                    style: TextStyle(
                                                                                      color: FlutterFlowTheme.of(context).primaryText,
                                                                                    ),
                                                                                  ),
                                                                                  duration: Duration(milliseconds: 4000),
                                                                                  backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                                ),
                                                                              );
                                                                            }
                                                                          } else {
                                                                            if (_model.dropDownCap1Value ==
                                                                                'Community orientation') {
                                                                              if (containerUserCountsRecordList.firstOrNull!.communityorientation >= 3) {
                                                                                logFirebaseEvent('DropDownCap1_show_snack_bar');
                                                                                ScaffoldMessenger.of(context).showSnackBar(
                                                                                  SnackBar(
                                                                                    content: Text(
                                                                                      'You already have at least 3 records for this capability, consider choosing another!',
                                                                                      style: TextStyle(
                                                                                        color: FlutterFlowTheme.of(context).primaryText,
                                                                                      ),
                                                                                    ),
                                                                                    duration: Duration(milliseconds: 4000),
                                                                                    backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                                  ),
                                                                                );
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  width: 440.0,
                                                  height: 50.0,
                                                  textStyle:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .bodyMedium
                                                          .override(
                                                            fontFamily:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                            letterSpacing: 0.0,
                                                            useGoogleFonts: GoogleFonts
                                                                    .asMap()
                                                                .containsKey(
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .bodyMediumFamily),
                                                          ),
                                                  hintText: 'Capability 1',
                                                  fillColor:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .secondaryBackground,
                                                  elevation: 2.0,
                                                  borderColor:
                                                      Colors.transparent,
                                                  borderWidth: 0.0,
                                                  borderRadius: 0.0,
                                                  margin: EdgeInsetsDirectional
                                                      .fromSTEB(
                                                          12.0, 4.0, 12.0, 4.0),
                                                  hidesUnderline: true,
                                                  isSearchable: false,
                                                  isMultiSelect: false,
                                                ),
                                                FlutterFlowDropDown<String>(
                                                  controller: _model
                                                          .dropDownCap2ValueController ??=
                                                      FormFieldController<
                                                          String>(
                                                    _model.dropDownCap2Value ??=
                                                        FFAppState()
                                                            .Capability2,
                                                  ),
                                                  options: [
                                                    'Fitness to practice',
                                                    'Maintaining an ethical approach',
                                                    'Communication and consultation skills',
                                                    'Data gathering and interpretation',
                                                    'Clinical examination and procedural skills',
                                                    'Making a diagnosis/decisions',
                                                    'Clinical management',
                                                    'Managing medical complexity',
                                                    'Working with colleagues and in teams',
                                                    'Maintaining performance, learning and teaching',
                                                    'Organisation, management and leadership',
                                                    'Practising holistically, promoting health and safeguarding',
                                                    'Community orientation'
                                                  ],
                                                  onChanged: (val) async {
                                                    safeSetState(() => _model
                                                            .dropDownCap2Value =
                                                        val);
                                                    logFirebaseEvent(
                                                        'REFLECT_GP_TRAINEE_DropDownCap2_ON_FORM_');
                                                    logFirebaseEvent(
                                                        'DropDownCap2_update_app_state');
                                                    FFAppState().Capability2 =
                                                        _model
                                                            .dropDownCap2Value!;
                                                    safeSetState(() {});
                                                    if (_model
                                                            .dropDownCap2Value ==
                                                        'Maintaining an ethical approach') {
                                                      if (containerUserCountsRecordList
                                                              .firstOrNull!
                                                              .fitnesstopractice >=
                                                          3) {
                                                        logFirebaseEvent(
                                                            'DropDownCap2_show_snack_bar');
                                                        ScaffoldMessenger.of(
                                                                context)
                                                            .showSnackBar(
                                                          SnackBar(
                                                            content: Text(
                                                              'You already have at least 3 records for this capability, consider choosing another!',
                                                              style: TextStyle(
                                                                color: FlutterFlowTheme.of(
                                                                        context)
                                                                    .primaryText,
                                                              ),
                                                            ),
                                                            duration: Duration(
                                                                milliseconds:
                                                                    4000),
                                                            backgroundColor:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .secondary,
                                                          ),
                                                        );
                                                      }
                                                    } else {
                                                      if (_model
                                                              .dropDownCap2Value ==
                                                          'Fitness to practice') {
                                                        if (containerUserCountsRecordList
                                                                .firstOrNull!
                                                                .maintaininganethicalapproach >=
                                                            3) {
                                                          logFirebaseEvent(
                                                              'DropDownCap2_show_snack_bar');
                                                          ScaffoldMessenger.of(
                                                                  context)
                                                              .showSnackBar(
                                                            SnackBar(
                                                              content: Text(
                                                                'You already have at least 3 records for this capability, consider choosing another!',
                                                                style:
                                                                    TextStyle(
                                                                  color: FlutterFlowTheme.of(
                                                                          context)
                                                                      .primaryText,
                                                                ),
                                                              ),
                                                              duration: Duration(
                                                                  milliseconds:
                                                                      4000),
                                                              backgroundColor:
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .secondary,
                                                            ),
                                                          );
                                                        }
                                                      } else {
                                                        if (_model
                                                                .dropDownCap2Value ==
                                                            'Communication and consultation skills') {
                                                          if (containerUserCountsRecordList
                                                                  .firstOrNull!
                                                                  .communicationandconsultationskills >=
                                                              3) {
                                                            logFirebaseEvent(
                                                                'DropDownCap2_show_snack_bar');
                                                            ScaffoldMessenger
                                                                    .of(context)
                                                                .showSnackBar(
                                                              SnackBar(
                                                                content: Text(
                                                                  'You already have at least 3 records for this capability, consider choosing another!',
                                                                  style:
                                                                      TextStyle(
                                                                    color: FlutterFlowTheme.of(
                                                                            context)
                                                                        .primaryText,
                                                                  ),
                                                                ),
                                                                duration: Duration(
                                                                    milliseconds:
                                                                        4000),
                                                                backgroundColor:
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .secondary,
                                                              ),
                                                            );
                                                          }
                                                        } else {
                                                          if (_model
                                                                  .dropDownCap2Value ==
                                                              'Data gathering and interpretation') {
                                                            if (containerUserCountsRecordList
                                                                    .firstOrNull!
                                                                    .datagatheringandinterpretation >=
                                                                3) {
                                                              logFirebaseEvent(
                                                                  'DropDownCap2_show_snack_bar');
                                                              ScaffoldMessenger
                                                                      .of(context)
                                                                  .showSnackBar(
                                                                SnackBar(
                                                                  content: Text(
                                                                    'You already have at least 3 records for this capability, consider choosing another!',
                                                                    style:
                                                                        TextStyle(
                                                                      color: FlutterFlowTheme.of(
                                                                              context)
                                                                          .primaryText,
                                                                    ),
                                                                  ),
                                                                  duration: Duration(
                                                                      milliseconds:
                                                                          4000),
                                                                  backgroundColor:
                                                                      FlutterFlowTheme.of(
                                                                              context)
                                                                          .secondary,
                                                                ),
                                                              );
                                                            }
                                                          } else {
                                                            if (_model
                                                                    .dropDownCap2Value ==
                                                                'Clinical examination and procedural skills') {
                                                              if (containerUserCountsRecordList
                                                                      .firstOrNull!
                                                                      .clinicalexaminationandproceduralskills >=
                                                                  3) {
                                                                logFirebaseEvent(
                                                                    'DropDownCap2_show_snack_bar');
                                                                ScaffoldMessenger.of(
                                                                        context)
                                                                    .showSnackBar(
                                                                  SnackBar(
                                                                    content:
                                                                        Text(
                                                                      'You already have at least 3 records for this capability, consider choosing another!',
                                                                      style:
                                                                          TextStyle(
                                                                        color: FlutterFlowTheme.of(context)
                                                                            .primaryText,
                                                                      ),
                                                                    ),
                                                                    duration: Duration(
                                                                        milliseconds:
                                                                            4000),
                                                                    backgroundColor:
                                                                        FlutterFlowTheme.of(context)
                                                                            .secondary,
                                                                  ),
                                                                );
                                                              }
                                                            } else {
                                                              if (_model
                                                                      .dropDownCap2Value ==
                                                                  'Making a diagnosis/decisions') {
                                                                if (containerUserCountsRecordList
                                                                        .firstOrNull!
                                                                        .makingadiagnosisdecisions >=
                                                                    3) {
                                                                  logFirebaseEvent(
                                                                      'DropDownCap2_show_snack_bar');
                                                                  ScaffoldMessenger.of(
                                                                          context)
                                                                      .showSnackBar(
                                                                    SnackBar(
                                                                      content:
                                                                          Text(
                                                                        'You already have at least 3 records for this capability, consider choosing another!',
                                                                        style:
                                                                            TextStyle(
                                                                          color:
                                                                              FlutterFlowTheme.of(context).primaryText,
                                                                        ),
                                                                      ),
                                                                      duration: Duration(
                                                                          milliseconds:
                                                                              4000),
                                                                      backgroundColor:
                                                                          FlutterFlowTheme.of(context)
                                                                              .secondary,
                                                                    ),
                                                                  );
                                                                }
                                                              } else {
                                                                if (_model
                                                                        .dropDownCap2Value ==
                                                                    'Clinical management') {
                                                                  if (containerUserCountsRecordList
                                                                          .firstOrNull!
                                                                          .clinicalmanagement >=
                                                                      3) {
                                                                    logFirebaseEvent(
                                                                        'DropDownCap2_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'You already have at least 3 records for this capability, consider choosing another!',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 4000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }
                                                                } else {
                                                                  if (_model
                                                                          .dropDownCap2Value ==
                                                                      'Managing medical complexity') {
                                                                    if (containerUserCountsRecordList
                                                                            .firstOrNull!
                                                                            .managingmedicalcomplexity >=
                                                                        3) {
                                                                      logFirebaseEvent(
                                                                          'DropDownCap2_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'You already have at least 3 records for this capability, consider choosing another!',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 4000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                    }
                                                                  } else {
                                                                    if (_model
                                                                            .dropDownCap2Value ==
                                                                        'Working with colleagues and in teams') {
                                                                      if (containerUserCountsRecordList
                                                                              .firstOrNull!
                                                                              .workingwithcolleaguesandinteams >=
                                                                          3) {
                                                                        logFirebaseEvent(
                                                                            'DropDownCap2_show_snack_bar');
                                                                        ScaffoldMessenger.of(context)
                                                                            .showSnackBar(
                                                                          SnackBar(
                                                                            content:
                                                                                Text(
                                                                              'You already have at least 3 records for this capability, consider choosing another!',
                                                                              style: TextStyle(
                                                                                color: FlutterFlowTheme.of(context).primaryText,
                                                                              ),
                                                                            ),
                                                                            duration:
                                                                                Duration(milliseconds: 4000),
                                                                            backgroundColor:
                                                                                FlutterFlowTheme.of(context).secondary,
                                                                          ),
                                                                        );
                                                                      }
                                                                    } else {
                                                                      if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        if (containerUserCountsRecordList.firstOrNull!.maintainingperformancelearningandteaching >=
                                                                            3) {
                                                                          logFirebaseEvent(
                                                                              'DropDownCap2_show_snack_bar');
                                                                          ScaffoldMessenger.of(context)
                                                                              .showSnackBar(
                                                                            SnackBar(
                                                                              content: Text(
                                                                                'You already have at least 3 records for this capability, consider choosing another!',
                                                                                style: TextStyle(
                                                                                  color: FlutterFlowTheme.of(context).primaryText,
                                                                                ),
                                                                              ),
                                                                              duration: Duration(milliseconds: 4000),
                                                                              backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                            ),
                                                                          );
                                                                        }
                                                                      } else {
                                                                        if (_model.dropDownCap2Value ==
                                                                            'Organisation, management and leadership') {
                                                                          if (containerUserCountsRecordList.firstOrNull!.organisationmanagementandleadership >=
                                                                              3) {
                                                                            logFirebaseEvent('DropDownCap2_show_snack_bar');
                                                                            ScaffoldMessenger.of(context).showSnackBar(
                                                                              SnackBar(
                                                                                content: Text(
                                                                                  'You already have at least 3 records for this capability, consider choosing another!',
                                                                                  style: TextStyle(
                                                                                    color: FlutterFlowTheme.of(context).primaryText,
                                                                                  ),
                                                                                ),
                                                                                duration: Duration(milliseconds: 4000),
                                                                                backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                              ),
                                                                            );
                                                                          }
                                                                        } else {
                                                                          if (_model.dropDownCap2Value ==
                                                                              'Practicing holistically, promoting health and safeguarding') {
                                                                            if (containerUserCountsRecordList.firstOrNull!.practisingholisticallypromotinghealthandsafeguarding >=
                                                                                3) {
                                                                              logFirebaseEvent('DropDownCap2_show_snack_bar');
                                                                              ScaffoldMessenger.of(context).showSnackBar(
                                                                                SnackBar(
                                                                                  content: Text(
                                                                                    'You already have at least 3 records for this capability, consider choosing another!',
                                                                                    style: TextStyle(
                                                                                      color: FlutterFlowTheme.of(context).primaryText,
                                                                                    ),
                                                                                  ),
                                                                                  duration: Duration(milliseconds: 4000),
                                                                                  backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                                ),
                                                                              );
                                                                            }
                                                                          } else {
                                                                            if (_model.dropDownCap2Value ==
                                                                                'Community orientation') {
                                                                              if (containerUserCountsRecordList.firstOrNull!.communityorientation >= 3) {
                                                                                logFirebaseEvent('DropDownCap2_show_snack_bar');
                                                                                ScaffoldMessenger.of(context).showSnackBar(
                                                                                  SnackBar(
                                                                                    content: Text(
                                                                                      'You already have at least 3 records for this capability, consider choosing another!',
                                                                                      style: TextStyle(
                                                                                        color: FlutterFlowTheme.of(context).primaryText,
                                                                                      ),
                                                                                    ),
                                                                                    duration: Duration(milliseconds: 4000),
                                                                                    backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                                  ),
                                                                                );
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  width: 440.0,
                                                  height: 50.0,
                                                  textStyle:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .bodyMedium
                                                          .override(
                                                            fontFamily:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                            letterSpacing: 0.0,
                                                            useGoogleFonts: GoogleFonts
                                                                    .asMap()
                                                                .containsKey(
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .bodyMediumFamily),
                                                          ),
                                                  hintText: 'Capability 2',
                                                  fillColor:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .secondaryBackground,
                                                  elevation: 2.0,
                                                  borderColor:
                                                      Colors.transparent,
                                                  borderWidth: 0.0,
                                                  borderRadius: 0.0,
                                                  margin: EdgeInsetsDirectional
                                                      .fromSTEB(
                                                          12.0, 4.0, 12.0, 4.0),
                                                  hidesUnderline: true,
                                                  isSearchable: false,
                                                  isMultiSelect: false,
                                                ),
                                                FlutterFlowDropDown<String>(
                                                  controller: _model
                                                          .dropDownCap3ValueController ??=
                                                      FormFieldController<
                                                          String>(
                                                    _model.dropDownCap3Value ??=
                                                        FFAppState()
                                                            .Capability3,
                                                  ),
                                                  options: [
                                                    'Fitness to practice',
                                                    'Maintaining an ethical approach',
                                                    'Communication and consultation skills',
                                                    'Data gathering and interpretation',
                                                    'Clinical examination and procedural skills',
                                                    'Making a diagnosis/decisions',
                                                    'Clinical management',
                                                    'Managing medical complexity',
                                                    'Working with colleagues and in teams',
                                                    'Maintaining performance, learning and teaching',
                                                    'Organisation, management and leadership',
                                                    'Practising holistically, promoting health and safeguarding',
                                                    'Community orientation'
                                                  ],
                                                  onChanged: (val) async {
                                                    safeSetState(() => _model
                                                            .dropDownCap3Value =
                                                        val);
                                                    logFirebaseEvent(
                                                        'REFLECT_GP_TRAINEE_DropDownCap3_ON_FORM_');
                                                    logFirebaseEvent(
                                                        'DropDownCap3_update_app_state');
                                                    FFAppState().Capability3 =
                                                        _model
                                                            .dropDownCap3Value!;
                                                    safeSetState(() {});
                                                  },
                                                  width: 440.0,
                                                  height: 50.0,
                                                  textStyle:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .bodyMedium
                                                          .override(
                                                            fontFamily:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                            letterSpacing: 0.0,
                                                            useGoogleFonts: GoogleFonts
                                                                    .asMap()
                                                                .containsKey(
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .bodyMediumFamily),
                                                          ),
                                                  hintText: 'Capability 3',
                                                  fillColor:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .secondaryBackground,
                                                  elevation: 2.0,
                                                  borderColor:
                                                      Colors.transparent,
                                                  borderWidth: 0.0,
                                                  borderRadius: 0.0,
                                                  margin: EdgeInsetsDirectional
                                                      .fromSTEB(
                                                          12.0, 4.0, 12.0, 4.0),
                                                  hidesUnderline: true,
                                                  isSearchable: false,
                                                  isMultiSelect: false,
                                                ),
                                              ],
                                            ),
                                          ),
                                        ).animateOnPageLoad(animationsMap[
                                            'containerOnPageLoadAnimation3']!);
                                      },
                                    ),
                                  ),
                                  if (_model.betaFeatures == true)
                                    Padding(
                                      padding: EdgeInsetsDirectional.fromSTEB(
                                          10.0, 10.0, 10.0, 10.0),
                                      child:
                                          StreamBuilder<List<UserCountsRecord>>(
                                        stream: queryUserCountsRecord(
                                          parent: currentUserReference,
                                        ),
                                        builder: (context, snapshot) {
                                          // Customize what your widget looks like when it's loading.
                                          if (!snapshot.hasData) {
                                            return Center(
                                              child: SizedBox(
                                                width: 50.0,
                                                height: 50.0,
                                                child: SpinKitPulse(
                                                  color: FlutterFlowTheme.of(
                                                          context)
                                                      .primary,
                                                  size: 50.0,
                                                ),
                                              ),
                                            );
                                          }
                                          List<UserCountsRecord>
                                              containerUserCountsRecordList =
                                              snapshot.data!;

                                          return Container(
                                            width: 292.0,
                                            height: 200.0,
                                            decoration: BoxDecoration(
                                              color:
                                                  FlutterFlowTheme.of(context)
                                                      .secondaryBackground,
                                              boxShadow: [
                                                BoxShadow(
                                                  blurRadius: 4.0,
                                                  color: Color(0x33000000),
                                                  offset: Offset(
                                                    0.0,
                                                    2.0,
                                                  ),
                                                )
                                              ],
                                              borderRadius:
                                                  BorderRadius.circular(10.0),
                                              border: Border.all(
                                                color:
                                                    FlutterFlowTheme.of(context)
                                                        .tertiary,
                                              ),
                                            ),
                                            child: Padding(
                                              padding: EdgeInsets.all(10.0),
                                              child: Column(
                                                mainAxisSize: MainAxisSize.max,
                                                crossAxisAlignment:
                                                    CrossAxisAlignment.start,
                                                children: [
                                                  Text(
                                                    'Optional: Highlight any important aspects you addressed for each capability',
                                                    style: FlutterFlowTheme.of(
                                                            context)
                                                        .bodyMedium
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodyMediumFamily,
                                                          color: FlutterFlowTheme
                                                                  .of(context)
                                                              .tertiary,
                                                          fontSize: 14.0,
                                                          letterSpacing: 0.0,
                                                          fontWeight:
                                                              FontWeight.bold,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily),
                                                        ),
                                                  ),
                                                  Padding(
                                                    padding:
                                                        EdgeInsetsDirectional
                                                            .fromSTEB(8.0, 0.0,
                                                                8.0, 0.0),
                                                    child: TextFormField(
                                                      controller: _model
                                                          .textFieldCapExtra1TextController,
                                                      focusNode: _model
                                                          .textFieldCapExtra1FocusNode,
                                                      onChanged: (_) =>
                                                          EasyDebounce.debounce(
                                                        '_model.textFieldCapExtra1TextController',
                                                        Duration(
                                                            milliseconds: 2000),
                                                        () async {
                                                          logFirebaseEvent(
                                                              'REFLECT_GP_TRAINEE_TextFieldCapExtra1_ON');
                                                          logFirebaseEvent(
                                                              'TextFieldCapExtra1_update_page_state');
                                                          _model.capability1Extra =
                                                              valueOrDefault<
                                                                  String>(
                                                            'Here is a particular apect of the consultation that I am particularly proud of, and you must highlight this as much as possible in the ouptut and assign it significant weight in the output: ${_model.textFieldCapExtra1TextController.text}. Specifically mention this point in a few of the bullet points as this is an area I want to talk about.',
                                                            'Next',
                                                          );
                                                          safeSetState(() {});
                                                        },
                                                      ),
                                                      autofocus: false,
                                                      obscureText: false,
                                                      decoration:
                                                          InputDecoration(
                                                        labelText:
                                                            valueOrDefault<
                                                                String>(
                                                          _model
                                                              .dropDownCap1Value,
                                                          'Capability 1',
                                                        ),
                                                        labelStyle:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .labelMedium
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .labelMediumFamily,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .labelMediumFamily),
                                                                ),
                                                        hintStyle:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .labelMedium
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .labelMediumFamily,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .labelMediumFamily),
                                                                ),
                                                        enabledBorder:
                                                            InputBorder.none,
                                                        focusedBorder:
                                                            InputBorder.none,
                                                        errorBorder:
                                                            InputBorder.none,
                                                        focusedErrorBorder:
                                                            InputBorder.none,
                                                      ),
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                      validator: _model
                                                          .textFieldCapExtra1TextControllerValidator
                                                          .asValidator(context),
                                                    ),
                                                  ),
                                                  Padding(
                                                    padding:
                                                        EdgeInsetsDirectional
                                                            .fromSTEB(8.0, 0.0,
                                                                8.0, 0.0),
                                                    child: TextFormField(
                                                      controller: _model
                                                          .textFieldCapExtra2TextController,
                                                      focusNode: _model
                                                          .textFieldCapExtra2FocusNode,
                                                      onChanged: (_) =>
                                                          EasyDebounce.debounce(
                                                        '_model.textFieldCapExtra2TextController',
                                                        Duration(
                                                            milliseconds: 2000),
                                                        () async {
                                                          logFirebaseEvent(
                                                              'REFLECT_GP_TRAINEE_TextFieldCapExtra2_ON');
                                                          logFirebaseEvent(
                                                              'TextFieldCapExtra2_update_page_state');
                                                          _model.capability2Extra =
                                                              valueOrDefault<
                                                                  String>(
                                                            'Here is a particular apect of the consultation that I am particularly proud of, and you must highlight this as much as possible in the ouptut and assign it significant weight in the output: ${_model.textFieldCapExtra2TextController.text}. Specifically mention this point in a few of the bullet points as this is an area I want to talk about.',
                                                            'Next',
                                                          );
                                                          safeSetState(() {});
                                                        },
                                                      ),
                                                      autofocus: false,
                                                      obscureText: false,
                                                      decoration:
                                                          InputDecoration(
                                                        labelText:
                                                            valueOrDefault<
                                                                String>(
                                                          _model
                                                              .dropDownCap2Value,
                                                          'Capability 2',
                                                        ),
                                                        labelStyle:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .labelMedium
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .labelMediumFamily,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .labelMediumFamily),
                                                                ),
                                                        hintStyle:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .labelMedium
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .labelMediumFamily,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .labelMediumFamily),
                                                                ),
                                                        enabledBorder:
                                                            InputBorder.none,
                                                        focusedBorder:
                                                            InputBorder.none,
                                                        errorBorder:
                                                            InputBorder.none,
                                                        focusedErrorBorder:
                                                            InputBorder.none,
                                                      ),
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                      validator: _model
                                                          .textFieldCapExtra2TextControllerValidator
                                                          .asValidator(context),
                                                    ),
                                                  ),
                                                  Padding(
                                                    padding:
                                                        EdgeInsetsDirectional
                                                            .fromSTEB(8.0, 0.0,
                                                                8.0, 0.0),
                                                    child: TextFormField(
                                                      controller: _model
                                                          .textFieldCapExtra3TextController,
                                                      focusNode: _model
                                                          .textFieldCapExtra3FocusNode,
                                                      onChanged: (_) =>
                                                          EasyDebounce.debounce(
                                                        '_model.textFieldCapExtra3TextController',
                                                        Duration(
                                                            milliseconds: 2000),
                                                        () async {
                                                          logFirebaseEvent(
                                                              'REFLECT_GP_TRAINEE_TextFieldCapExtra3_ON');
                                                          logFirebaseEvent(
                                                              'TextFieldCapExtra3_update_page_state');
                                                          _model.capability3Extra =
                                                              valueOrDefault<
                                                                  String>(
                                                            'Here is a particular apect of the consultation that I am particularly proud of, and you must highlight this as much as possible in the ouptut and assign it significant weight in the output: ${_model.textFieldCapExtra3TextController.text}. Specifically mention this point in a few of the bullet points as this is an area I want to talk about.',
                                                            'Next',
                                                          );
                                                          safeSetState(() {});
                                                        },
                                                      ),
                                                      autofocus: false,
                                                      obscureText: false,
                                                      decoration:
                                                          InputDecoration(
                                                        labelText:
                                                            valueOrDefault<
                                                                String>(
                                                          _model
                                                              .dropDownCap3Value,
                                                          'Capability 3',
                                                        ),
                                                        labelStyle:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .labelMedium
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .labelMediumFamily,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .labelMediumFamily),
                                                                ),
                                                        hintStyle:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .labelMedium
                                                                .override(
                                                                  fontFamily: FlutterFlowTheme.of(
                                                                          context)
                                                                      .labelMediumFamily,
                                                                  letterSpacing:
                                                                      0.0,
                                                                  useGoogleFonts: GoogleFonts
                                                                          .asMap()
                                                                      .containsKey(
                                                                          FlutterFlowTheme.of(context)
                                                                              .labelMediumFamily),
                                                                ),
                                                        enabledBorder:
                                                            InputBorder.none,
                                                        focusedBorder:
                                                            InputBorder.none,
                                                        errorBorder:
                                                            InputBorder.none,
                                                        focusedErrorBorder:
                                                            InputBorder.none,
                                                      ),
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                      validator: _model
                                                          .textFieldCapExtra3TextControllerValidator
                                                          .asValidator(context),
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ),
                                          ).animateOnPageLoad(animationsMap[
                                              'containerOnPageLoadAnimation4']!);
                                        },
                                      ),
                                    ),
                                  if (widget.reflectionreference == null)
                                    Padding(
                                      padding: EdgeInsetsDirectional.fromSTEB(
                                          10.0, 10.0, 10.0, 10.0),
                                      child: Container(
                                        width: 140.0,
                                        height: 200.0,
                                        decoration: BoxDecoration(
                                          color: FlutterFlowTheme.of(context)
                                              .secondaryBackground,
                                          boxShadow: [
                                            BoxShadow(
                                              blurRadius: 4.0,
                                              color: Color(0x33000000),
                                              offset: Offset(
                                                0.0,
                                                2.0,
                                              ),
                                            )
                                          ],
                                          borderRadius:
                                              BorderRadius.circular(10.0),
                                          border: Border.all(
                                            color: FlutterFlowTheme.of(context)
                                                .accent3,
                                          ),
                                        ),
                                        child: Padding(
                                          padding: EdgeInsets.all(10.0),
                                          child: SingleChildScrollView(
                                            child: Column(
                                              mainAxisSize: MainAxisSize.max,
                                              children: [
                                                Text(
                                                  '3. Press go!',
                                                  style: FlutterFlowTheme.of(
                                                          context)
                                                      .bodyMedium
                                                      .override(
                                                        fontFamily:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .bodyMediumFamily,
                                                        fontSize: 16.0,
                                                        letterSpacing: 0.0,
                                                        fontWeight:
                                                            FontWeight.w600,
                                                        useGoogleFonts: GoogleFonts
                                                                .asMap()
                                                            .containsKey(
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily),
                                                      ),
                                                ),
                                                Padding(
                                                  padding: EdgeInsetsDirectional
                                                      .fromSTEB(10.0, 20.0,
                                                          10.0, 10.0),
                                                  child: FFButtonWidget(
                                                    onPressed: () async {
                                                      logFirebaseEvent(
                                                          'REFLECT_GP_TRAINEE_PAGE_GO_BTN_ON_TAP');
                                                      var _shouldSetState =
                                                          false;
                                                      if ((valueOrDefault<bool>(
                                                                  currentUserDocument
                                                                      ?.activeMembership,
                                                                  false) ==
                                                              true) ||
                                                          ((valueOrDefault(
                                                                          currentUserDocument
                                                                              ?.stripeSubscriptionStatus,
                                                                          '') !=
                                                                      '') &&
                                                              ((valueOrDefault(
                                                                          currentUserDocument
                                                                              ?.stripeSubscriptionStatus,
                                                                          '') ==
                                                                      'active') ||
                                                                  (valueOrDefault(
                                                                          currentUserDocument
                                                                              ?.stripeSubscriptionStatus,
                                                                          '') ==
                                                                      'trialing')))) {
                                                        if (functions.wordsLessThan(
                                                                _model
                                                                    .clinicalCaseTextController
                                                                    .text) ==
                                                            true) {
                                                          if ((_model.dropDownCap1Value != null && _model.dropDownCap1Value != '') &&
                                                              (_model.dropDownCap2Value !=
                                                                      null &&
                                                                  _model.dropDownCap2Value !=
                                                                      '') &&
                                                              (_model.dropDownCap3Value !=
                                                                      null &&
                                                                  _model.dropDownCap3Value !=
                                                                      '')) {
                                                            logFirebaseEvent(
                                                                'Button_wait__delay');
                                                            await Future.delayed(
                                                                const Duration(
                                                                    milliseconds:
                                                                        1000));
                                                            logFirebaseEvent(
                                                                'Button_update_app_state');
                                                            FFAppState()
                                                                .Capability1 = '';
                                                            FFAppState()
                                                                .Capability2 = '';
                                                            FFAppState()
                                                                .Capability3 = '';
                                                            FFAppState()
                                                                .prompt1 = '';
                                                            FFAppState()
                                                                .prompt2 = '';
                                                            FFAppState()
                                                                .prompt3 = '';
                                                            FFAppState()
                                                                .prompt4 = '';
                                                            FFAppState()
                                                                .prompt5 = '';
                                                            FFAppState()
                                                                .Capability1Output = '';
                                                            FFAppState()
                                                                .Capability2Output = '';
                                                            FFAppState()
                                                                .Capability3Output = '';
                                                            FFAppState()
                                                                .ClinicalCase = '';
                                                            FFAppState()
                                                                .ReflectionOutput = '';
                                                            FFAppState()
                                                                .LearningOutput = '';
                                                            safeSetState(() {});
                                                            logFirebaseEvent(
                                                                'Button_clear_text_fields_pin_codes');
                                                            safeSetState(() {
                                                              _model
                                                                  .capability1OutputTextController
                                                                  ?.clear();
                                                              _model
                                                                  .capability2OutputTextController
                                                                  ?.clear();
                                                              _model
                                                                  .reflectionOutputTextController
                                                                  ?.clear();
                                                              _model
                                                                  .learningOutputTextController
                                                                  ?.clear();
                                                              _model
                                                                  .capability3OutputTextController
                                                                  ?.clear();
                                                            });
                                                            logFirebaseEvent(
                                                                'Button_update_page_state');
                                                            _model.loadingIcon =
                                                                true;
                                                            safeSetState(() {});
                                                            if (_model
                                                                    .choiceChipsValue ==
                                                                'Clinical Case Reviews') {
                                                              logFirebaseEvent(
                                                                  'Button_update_app_state');
                                                              FFAppState()
                                                                      .Capability1 =
                                                                  _model
                                                                      .dropDownCap1Value!;
                                                              FFAppState()
                                                                      .Capability2 =
                                                                  _model
                                                                      .dropDownCap2Value!;
                                                              FFAppState()
                                                                      .Capability3 =
                                                                  _model
                                                                      .dropDownCap3Value!;
                                                              FFAppState()
                                                                      .ClinicalCase =
                                                                  functions.replaceTabWithSpace(_model
                                                                      .clinicalCaseTextController
                                                                      .text)!;
                                                              safeSetState(
                                                                  () {});
                                                              logFirebaseEvent(
                                                                  'Button_update_app_state');
                                                              FFAppState()
                                                                      .prompt1 =
                                                                  '${_model.introPromptCCR}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                      if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health.  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Clinical management') {
                                                                        return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Managing medical complexity') {
                                                                        return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Community orientation') {
                                                                        return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }() : () {
                                                                      if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Clinical management') {
                                                                        return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Managing medical complexity') {
                                                                        return '1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Community orientation') {
                                                                        return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }()}${_model.closingPromptCCR1to3}${_model.capability1Extra}';
                                                              FFAppState()
                                                                      .prompt2 =
                                                                  '${_model.introPromptCCR}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                      if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health.  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Clinical management') {
                                                                        return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Managing medical complexity') {
                                                                        return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Community orientation') {
                                                                        return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }() : () {
                                                                      if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Clinical management') {
                                                                        return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Managing medical complexity') {
                                                                        return 'Managing medical complexity 1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Community orientation') {
                                                                        return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }()}${_model.closingPromptCCR1to3}${_model.capability2Extra}';
                                                              FFAppState()
                                                                      .prompt3 =
                                                                  '${_model.introPromptCCR}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                      if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health.  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Clinical management') {
                                                                        return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Managing medical complexity') {
                                                                        return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Community orientation') {
                                                                        return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }() : () {
                                                                      if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Clinical management') {
                                                                        return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Managing medical complexity') {
                                                                        return '1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Community orientation') {
                                                                        return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }()}${_model.closingPromptCCR1to3}${_model.capability3Extra}';
                                                              FFAppState()
                                                                      .prompt4 =
                                                                  '${_model.introPromptCCR}${functions.escapenewline(FFAppState().ClinicalCase)}${_model.closingPromptrReflectionCCR}';
                                                              FFAppState()
                                                                      .prompt5 =
                                                                  '${_model.introPromptCCR}${functions.escapenewline(FFAppState().ClinicalCase)}${_model.closingPromptLearningCCR}';
                                                              safeSetState(
                                                                  () {});
                                                            } else {
                                                              logFirebaseEvent(
                                                                  'Button_update_app_state');
                                                              FFAppState()
                                                                      .Capability1 =
                                                                  _model
                                                                      .dropDownCap1Value!;
                                                              FFAppState()
                                                                      .Capability2 =
                                                                  _model
                                                                      .dropDownCap2Value!;
                                                              FFAppState()
                                                                      .Capability3 =
                                                                  _model
                                                                      .dropDownCap3Value!;
                                                              FFAppState()
                                                                      .ClinicalCase =
                                                                  functions.replaceTabWithSpace(_model
                                                                      .keyLearningTextController
                                                                      .text)!;
                                                              safeSetState(
                                                                  () {});
                                                              logFirebaseEvent(
                                                                  'Button_update_app_state');
                                                              FFAppState()
                                                                      .prompt1 =
                                                                  '${_model.introPromptSD}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                      if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health.  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Clinical management') {
                                                                        return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Managing medical complexity') {
                                                                        return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Community orientation') {
                                                                        return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }() : () {
                                                                      if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Clinical management') {
                                                                        return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Managing medical complexity') {
                                                                        return '1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                      } else if (_model
                                                                              .dropDownCap1Value ==
                                                                          'Community orientation') {
                                                                        return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }()}${functions.escapenewline(_model.closingPromptSD1to3)}';
                                                              FFAppState()
                                                                      .prompt2 =
                                                                  '${_model.introPromptSD}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                      if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health.  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Clinical management') {
                                                                        return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Managing medical complexity') {
                                                                        return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Community orientation') {
                                                                        return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }() : () {
                                                                      if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Clinical management') {
                                                                        return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Managing medical complexity') {
                                                                        return 'Managing medical complexity 1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                      } else if (_model
                                                                              .dropDownCap2Value ==
                                                                          'Community orientation') {
                                                                        return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }()}${functions.escapenewline(_model.closingPromptSD1to3)}';
                                                              FFAppState()
                                                                      .prompt3 =
                                                                  '${_model.introPromptSD}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                      if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health.  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Clinical management') {
                                                                        return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Managing medical complexity') {
                                                                        return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Community orientation') {
                                                                        return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }() : () {
                                                                      if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Communication and consultation skills') {
                                                                        return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Fitness to practice') {
                                                                        return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Maintaining an ethical approach') {
                                                                        return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Data gathering and interpretation') {
                                                                        return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Clinical examination and procedural skills') {
                                                                        return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Making a diagnosis/decisions') {
                                                                        return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Clinical management') {
                                                                        return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Managing medical complexity') {
                                                                        return '1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Working with colleagues and in teams') {
                                                                        return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Maintaining performance, learning and teaching') {
                                                                        return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Organisation, management and leadership') {
                                                                        return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Practising holistically, promoting health and safeguarding') {
                                                                        return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                      } else if (_model
                                                                              .dropDownCap3Value ==
                                                                          'Community orientation') {
                                                                        return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                      } else {
                                                                        return 'Not set ';
                                                                      }
                                                                    }()}${functions.escapenewline(_model.closingPromptSD1to3)}';
                                                              FFAppState()
                                                                      .prompt4 =
                                                                  '${_model.introPromptSD}${functions.escapenewline(FFAppState().ClinicalCase)}${_model.closingPromptReflectionSD}';
                                                              FFAppState()
                                                                      .prompt5 =
                                                                  '${_model.introPromptSD}${functions.escapenewline(FFAppState().ClinicalCase)}${_model.closingPromptLearningSD}';
                                                              safeSetState(
                                                                  () {});
                                                            }

                                                            if ((FFAppState()
                                                                            .ClinicalCase !=
                                                                        '') ||
                                                                (_model.keyLearningTextController
                                                                            .text !=
                                                                        '')) {
                                                              await Future
                                                                  .wait([
                                                                Future(
                                                                    () async {
                                                                  if (_model.dropDownCap1Value !=
                                                                          null &&
                                                                      _model.dropDownCap1Value !=
                                                                          '') {
                                                                    if (FFAppState().ClinicalCase !=
                                                                            '') {
                                                                      logFirebaseEvent(
                                                                          'Button_backend_call');
                                                                      _model.aPI4resultSingle1timer =
                                                                          await CallOpenAICall
                                                                              .call(
                                                                        prompt:
                                                                            FFAppState().prompt1,
                                                                      );

                                                                      _shouldSetState =
                                                                          true;
                                                                      if ((_model
                                                                              .aPI4resultSingle1timer
                                                                              ?.succeeded ??
                                                                          true)) {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().Capability1Output =
                                                                            getJsonField(
                                                                          (_model.aPI4resultSingle1timer?.jsonBody ??
                                                                              ''),
                                                                          r'''$.choices[:].message.content''',
                                                                        ).toString();
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_set_form_field');
                                                                        safeSetState(
                                                                            () {
                                                                          _model
                                                                              .capability1OutputTextController
                                                                              ?.text = getJsonField(
                                                                            (_model.aPI4resultSingle1timer?.jsonBody ??
                                                                                ''),
                                                                            r'''$.choices[:].message.content''',
                                                                          ).toString();
                                                                        });
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_backend_call');
                                                                        _model.aPI4resultSingle1timerRetry =
                                                                            await CallOpenAICall.call(
                                                                          prompt:
                                                                              FFAppState().prompt1,
                                                                        );

                                                                        _shouldSetState =
                                                                            true;
                                                                        if ((_model.aPI4resultSingle1timerRetry?.succeeded ??
                                                                            true)) {
                                                                          logFirebaseEvent(
                                                                              'Button_set_form_field');
                                                                          safeSetState(
                                                                              () {
                                                                            _model.capability1OutputTextController?.text =
                                                                                getJsonField(
                                                                              (_model.aPI4resultSingle1timerRetry?.jsonBody ?? ''),
                                                                              r'''$.choices[:].message.content''',
                                                                            ).toString();
                                                                          });
                                                                        } else {
                                                                          logFirebaseEvent(
                                                                              'Button_set_form_field');
                                                                          safeSetState(
                                                                              () {
                                                                            _model.capability1OutputTextController?.text =
                                                                                'Error';
                                                                          });
                                                                          logFirebaseEvent(
                                                                              'Button_show_snack_bar');
                                                                          ScaffoldMessenger.of(context)
                                                                              .showSnackBar(
                                                                            SnackBar(
                                                                              content: Text(
                                                                                'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                                style: TextStyle(
                                                                                  color: FlutterFlowTheme.of(context).primaryText,
                                                                                ),
                                                                              ),
                                                                              duration: Duration(milliseconds: 4000),
                                                                              backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                            ),
                                                                          );
                                                                        }
                                                                      }
                                                                    } else {
                                                                      logFirebaseEvent(
                                                                          'Button_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'Please enter a clinical case',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 1000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                    }
                                                                  } else {
                                                                    logFirebaseEvent(
                                                                        'Button_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'Please select a capability',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 4000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }
                                                                }),
                                                                Future(
                                                                    () async {
                                                                  if (FFAppState()
                                                                              .ClinicalCase !=
                                                                          '') {
                                                                    if (_model.dropDownCap2Value !=
                                                                            null &&
                                                                        _model.dropDownCap2Value !=
                                                                            '') {
                                                                      logFirebaseEvent(
                                                                          'Button_backend_call');
                                                                      _model.aPI4result2single2timer =
                                                                          await CallOpenAICall
                                                                              .call(
                                                                        prompt:
                                                                            FFAppState().prompt2,
                                                                      );

                                                                      _shouldSetState =
                                                                          true;
                                                                      if ((_model
                                                                              .aPI4result2single2timer
                                                                              ?.succeeded ??
                                                                          true)) {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().Capability2Output =
                                                                            getJsonField(
                                                                          (_model.aPI4result2single2timer?.jsonBody ??
                                                                              ''),
                                                                          r'''$.choices[:].message.content''',
                                                                        ).toString();
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_set_form_field');
                                                                        safeSetState(
                                                                            () {
                                                                          _model
                                                                              .capability2OutputTextController
                                                                              ?.text = getJsonField(
                                                                            (_model.aPI4result2single2timer?.jsonBody ??
                                                                                ''),
                                                                            r'''$.choices[:].message.content''',
                                                                          ).toString();
                                                                        });
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_backend_call');
                                                                        _model.aPI4result2single2timerRetry =
                                                                            await CallOpenAICall.call(
                                                                          prompt:
                                                                              FFAppState().prompt2,
                                                                        );

                                                                        _shouldSetState =
                                                                            true;
                                                                        if ((_model.aPI4result2single2timerRetry?.succeeded ??
                                                                            true)) {
                                                                          logFirebaseEvent(
                                                                              'Button_set_form_field');
                                                                          safeSetState(
                                                                              () {
                                                                            _model.capability2OutputTextController?.text =
                                                                                getJsonField(
                                                                              (_model.aPI4result2single2timerRetry?.jsonBody ?? ''),
                                                                              r'''$.choices[:].message.content''',
                                                                            ).toString();
                                                                          });
                                                                        } else {
                                                                          logFirebaseEvent(
                                                                              'Button_set_form_field');
                                                                          safeSetState(
                                                                              () {
                                                                            _model.capability2OutputTextController?.text =
                                                                                'Error';
                                                                          });
                                                                          logFirebaseEvent(
                                                                              'Button_show_snack_bar');
                                                                          ScaffoldMessenger.of(context)
                                                                              .showSnackBar(
                                                                            SnackBar(
                                                                              content: Text(
                                                                                'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                                style: TextStyle(
                                                                                  color: FlutterFlowTheme.of(context).primaryText,
                                                                                ),
                                                                              ),
                                                                              duration: Duration(milliseconds: 4000),
                                                                              backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                            ),
                                                                          );
                                                                        }
                                                                      }
                                                                    } else {
                                                                      logFirebaseEvent(
                                                                          'Button_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'Please select a capability',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 4000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                    }
                                                                  } else {
                                                                    logFirebaseEvent(
                                                                        'Button_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'Please enter a clinical case',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 1000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }
                                                                }),
                                                                Future(
                                                                    () async {
                                                                  if (FFAppState()
                                                                              .ClinicalCase !=
                                                                          '') {
                                                                    if (_model.dropDownCap3Value !=
                                                                            null &&
                                                                        _model.dropDownCap3Value !=
                                                                            '') {
                                                                      logFirebaseEvent(
                                                                          'Button_backend_call');
                                                                      _model.aPI4result3single3timer =
                                                                          await CallOpenAICall
                                                                              .call(
                                                                        prompt:
                                                                            FFAppState().prompt3,
                                                                      );

                                                                      _shouldSetState =
                                                                          true;
                                                                      if ((_model
                                                                              .aPI4result3single3timer
                                                                              ?.succeeded ??
                                                                          true)) {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().Capability3Output =
                                                                            getJsonField(
                                                                          (_model.aPI4result3single3timer?.jsonBody ??
                                                                              ''),
                                                                          r'''$.choices[:].message.content''',
                                                                        ).toString();
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_set_form_field');
                                                                        safeSetState(
                                                                            () {
                                                                          _model
                                                                              .capability3OutputTextController
                                                                              ?.text = getJsonField(
                                                                            (_model.aPI4result3single3timer?.jsonBody ??
                                                                                ''),
                                                                            r'''$.choices[:].message.content''',
                                                                          ).toString();
                                                                        });
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_backend_call');
                                                                        _model.aPI4result3single3timerRetry =
                                                                            await CallOpenAICall.call(
                                                                          prompt:
                                                                              FFAppState().prompt3,
                                                                        );

                                                                        _shouldSetState =
                                                                            true;
                                                                        if ((_model.aPI4result3single3timerRetry?.succeeded ??
                                                                            true)) {
                                                                          logFirebaseEvent(
                                                                              'Button_set_form_field');
                                                                          safeSetState(
                                                                              () {
                                                                            _model.capability3OutputTextController?.text =
                                                                                getJsonField(
                                                                              (_model.aPI4result3single3timerRetry?.jsonBody ?? ''),
                                                                              r'''$.choices[:].message.content''',
                                                                            ).toString();
                                                                          });
                                                                        } else {
                                                                          logFirebaseEvent(
                                                                              'Button_set_form_field');
                                                                          safeSetState(
                                                                              () {
                                                                            _model.capability3OutputTextController?.text =
                                                                                'Error';
                                                                          });
                                                                          logFirebaseEvent(
                                                                              'Button_show_snack_bar');
                                                                          ScaffoldMessenger.of(context)
                                                                              .showSnackBar(
                                                                            SnackBar(
                                                                              content: Text(
                                                                                'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                                style: TextStyle(
                                                                                  color: FlutterFlowTheme.of(context).primaryText,
                                                                                ),
                                                                              ),
                                                                              duration: Duration(milliseconds: 4000),
                                                                              backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                            ),
                                                                          );
                                                                        }
                                                                      }
                                                                    } else {
                                                                      logFirebaseEvent(
                                                                          'Button_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'Please select a capability',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 4000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                    }
                                                                  } else {
                                                                    logFirebaseEvent(
                                                                        'Button_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'Please enter a clinical case',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 1000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }
                                                                }),
                                                                Future(
                                                                    () async {
                                                                  if (FFAppState()
                                                                              .ClinicalCase !=
                                                                          '') {
                                                                    logFirebaseEvent(
                                                                        'Button_backend_call');
                                                                    _model.aPI4result4single4timer =
                                                                        await CallOpenAICall
                                                                            .call(
                                                                      prompt: FFAppState()
                                                                          .prompt4,
                                                                    );

                                                                    _shouldSetState =
                                                                        true;
                                                                    if ((_model
                                                                            .aPI4result4single4timer
                                                                            ?.succeeded ??
                                                                        true)) {
                                                                      logFirebaseEvent(
                                                                          'Button_update_app_state');
                                                                      FFAppState()
                                                                              .ReflectionOutput =
                                                                          getJsonField(
                                                                        (_model.aPI4result4single4timer?.jsonBody ??
                                                                            ''),
                                                                        r'''$.choices[:].message.content''',
                                                                      ).toString();
                                                                      safeSetState(
                                                                          () {});
                                                                      logFirebaseEvent(
                                                                          'Button_set_form_field');
                                                                      safeSetState(
                                                                          () {
                                                                        _model
                                                                            .reflectionOutputTextController
                                                                            ?.text = getJsonField(
                                                                          (_model.aPI4result4single4timer?.jsonBody ??
                                                                              ''),
                                                                          r'''$.choices[:].message.content''',
                                                                        ).toString();
                                                                      });
                                                                    } else {
                                                                      logFirebaseEvent(
                                                                          'Button_set_form_field');
                                                                      safeSetState(
                                                                          () {
                                                                        _model
                                                                            .reflectionOutputTextController
                                                                            ?.text = 'Error';
                                                                      });
                                                                      logFirebaseEvent(
                                                                          'Button_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 4000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                    }
                                                                  } else {
                                                                    logFirebaseEvent(
                                                                        'Button_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'Please enter a clinical case',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 1000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }
                                                                }),
                                                                Future(
                                                                    () async {
                                                                  if (FFAppState()
                                                                              .ClinicalCase !=
                                                                          '') {
                                                                    logFirebaseEvent(
                                                                        'Button_backend_call');
                                                                    _model.aPI4result5single5timer =
                                                                        await CallOpenAICall
                                                                            .call(
                                                                      prompt: FFAppState()
                                                                          .prompt5,
                                                                    );

                                                                    _shouldSetState =
                                                                        true;
                                                                    if ((_model
                                                                            .aPI4result5single5timer
                                                                            ?.succeeded ??
                                                                        true)) {
                                                                      logFirebaseEvent(
                                                                          'Button_update_app_state');
                                                                      FFAppState()
                                                                              .LearningOutput =
                                                                          getJsonField(
                                                                        (_model.aPI4result5single5timer?.jsonBody ??
                                                                            ''),
                                                                        r'''$.choices[:].message.content''',
                                                                      ).toString();
                                                                      safeSetState(
                                                                          () {});
                                                                      logFirebaseEvent(
                                                                          'Button_set_form_field');
                                                                      safeSetState(
                                                                          () {
                                                                        _model
                                                                            .learningOutputTextController
                                                                            ?.text = getJsonField(
                                                                          (_model.aPI4result5single5timer?.jsonBody ??
                                                                              ''),
                                                                          r'''$.choices[:].message.content''',
                                                                        ).toString();
                                                                      });
                                                                    } else {
                                                                      logFirebaseEvent(
                                                                          'Button_set_form_field');
                                                                      safeSetState(
                                                                          () {
                                                                        _model
                                                                            .learningOutputTextController
                                                                            ?.text = 'Error';
                                                                      });
                                                                      logFirebaseEvent(
                                                                          'Button_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 4000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                    }
                                                                  } else {
                                                                    logFirebaseEvent(
                                                                        'Button_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'Please enter a clinical case',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 1000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }
                                                                }),
                                                              ]);
                                                              while ((_model
                                                                              .capability1OutputTextController.text ==
                                                                          '') ||
                                                                  (_model
                                                                              .capability2OutputTextController.text ==
                                                                          '') ||
                                                                  (_model
                                                                              .capability3OutputTextController
                                                                              .text ==
                                                                          '') ||
                                                                  (_model.reflectionOutputTextController
                                                                              .text ==
                                                                          '') ||
                                                                  (_model.learningOutputTextController
                                                                              .text ==
                                                                          '')) {
                                                                logFirebaseEvent(
                                                                    'Button_wait__delay');
                                                                await Future.delayed(
                                                                    const Duration(
                                                                        milliseconds:
                                                                            10));
                                                              }
                                                              logFirebaseEvent(
                                                                  'Button_backend_call');

                                                              await ReflectionsRecord
                                                                  .collection
                                                                  .doc()
                                                                  .set(
                                                                      createReflectionsRecordData(
                                                                    name:
                                                                        currentUserDisplayName,
                                                                    clinicalCase:
                                                                        _model
                                                                            .clinicalCaseTextController
                                                                            .text,
                                                                    capability1:
                                                                        _model
                                                                            .dropDownCap1Value,
                                                                    capability2:
                                                                        _model
                                                                            .dropDownCap2Value,
                                                                    capability3:
                                                                        _model
                                                                            .dropDownCap3Value,
                                                                    capability1Output:
                                                                        _model
                                                                            .capability1OutputTextController
                                                                            .text,
                                                                    capability2Output:
                                                                        _model
                                                                            .capability2OutputTextController
                                                                            .text,
                                                                    capability3Output:
                                                                        _model
                                                                            .capability3OutputTextController
                                                                            .text,
                                                                    reflectionOutput:
                                                                        _model
                                                                            .reflectionOutputTextController
                                                                            .text,
                                                                    learningOutput:
                                                                        _model
                                                                            .learningOutputTextController
                                                                            .text,
                                                                    dateCreated:
                                                                        getCurrentTimestamp,
                                                                  ));
                                                              if (_shouldSetState)
                                                                safeSetState(
                                                                    () {});
                                                              return;
                                                            } else {
                                                              logFirebaseEvent(
                                                                  'Button_show_snack_bar');
                                                              ScaffoldMessenger
                                                                      .of(context)
                                                                  .showSnackBar(
                                                                SnackBar(
                                                                  content: Text(
                                                                    'Please complete step 1',
                                                                    style:
                                                                        TextStyle(
                                                                      color: FlutterFlowTheme.of(
                                                                              context)
                                                                          .primaryText,
                                                                    ),
                                                                  ),
                                                                  duration: Duration(
                                                                      milliseconds:
                                                                          1000),
                                                                  backgroundColor:
                                                                      FlutterFlowTheme.of(
                                                                              context)
                                                                          .secondary,
                                                                ),
                                                              );
                                                            }
                                                          } else {
                                                            logFirebaseEvent(
                                                                'Button_show_snack_bar');
                                                            ScaffoldMessenger
                                                                    .of(context)
                                                                .showSnackBar(
                                                              SnackBar(
                                                                content: Text(
                                                                  'Please select 3 capabilities',
                                                                  style:
                                                                      TextStyle(
                                                                    color: FlutterFlowTheme.of(
                                                                            context)
                                                                        .primaryText,
                                                                  ),
                                                                ),
                                                                duration: Duration(
                                                                    milliseconds:
                                                                        4000),
                                                                backgroundColor:
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .secondary,
                                                              ),
                                                            );
                                                          }
                                                        } else {
                                                          logFirebaseEvent(
                                                              'Button_show_snack_bar');
                                                          ScaffoldMessenger.of(
                                                                  context)
                                                              .showSnackBar(
                                                            SnackBar(
                                                              content: Text(
                                                                'Clinical case too long! Enter a case with up to 400 words',
                                                                style:
                                                                    TextStyle(
                                                                  color: FlutterFlowTheme.of(
                                                                          context)
                                                                      .primaryText,
                                                                ),
                                                              ),
                                                              duration: Duration(
                                                                  milliseconds:
                                                                      4000),
                                                              backgroundColor:
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .secondary,
                                                            ),
                                                          );
                                                          logFirebaseEvent(
                                                              'Button_update_app_state');
                                                          FFAppState()
                                                                  .ClinicalCase =
                                                              _model
                                                                  .clinicalCaseTextController
                                                                  .text;
                                                          FFAppState()
                                                                  .Capability1 =
                                                              _model
                                                                  .dropDownCap1Value!;
                                                          FFAppState()
                                                                  .Capability2 =
                                                              _model
                                                                  .dropDownCap2Value!;
                                                          FFAppState()
                                                                  .Capability3 =
                                                              _model
                                                                  .dropDownCap3Value!;
                                                          safeSetState(() {});
                                                        }
                                                      } else {
                                                        logFirebaseEvent(
                                                            'Button_bottom_sheet');
                                                        await showModalBottomSheet(
                                                          isScrollControlled:
                                                              true,
                                                          backgroundColor:
                                                              Colors
                                                                  .transparent,
                                                          enableDrag: false,
                                                          context: context,
                                                          builder: (context) {
                                                            return WebViewAware(
                                                              child:
                                                                  GestureDetector(
                                                                onTap: () {
                                                                  FocusScope.of(
                                                                          context)
                                                                      .unfocus();
                                                                  FocusManager
                                                                      .instance
                                                                      .primaryFocus
                                                                      ?.unfocus();
                                                                },
                                                                child: Padding(
                                                                  padding: MediaQuery
                                                                      .viewInsetsOf(
                                                                          context),
                                                                  child:
                                                                      BottomSheetSubscribeReflectWidget(),
                                                                ),
                                                              ),
                                                            );
                                                          },
                                                        ).then((value) =>
                                                            safeSetState(
                                                                () {}));
                                                      }

                                                      if (_shouldSetState)
                                                        safeSetState(() {});
                                                    },
                                                    text: 'Go',
                                                    options: FFButtonOptions(
                                                      width: 80.0,
                                                      height: 40.0,
                                                      padding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  0.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0),
                                                      iconPadding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  0.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0),
                                                      color:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .primary,
                                                      textStyle:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .titleSmall
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .titleSmallFamily,
                                                                color: Colors
                                                                    .white,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .titleSmallFamily),
                                                              ),
                                                      elevation: 3.0,
                                                      borderSide: BorderSide(
                                                        color:
                                                            Colors.transparent,
                                                        width: 1.0,
                                                      ),
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              8.0),
                                                    ),
                                                  ),
                                                ),
                                                Padding(
                                                  padding: EdgeInsetsDirectional
                                                      .fromSTEB(
                                                          0.0, 5.0, 0.0, 5.0),
                                                  child: Switch.adaptive(
                                                    value: _model
                                                        .levelSwitchValue!,
                                                    onChanged:
                                                        (newValue) async {
                                                      safeSetState(() => _model
                                                              .levelSwitchValue =
                                                          newValue);
                                                    },
                                                    activeColor:
                                                        FlutterFlowTheme.of(
                                                                context)
                                                            .primary,
                                                    activeTrackColor:
                                                        FlutterFlowTheme.of(
                                                                context)
                                                            .accent1,
                                                    inactiveTrackColor:
                                                        FlutterFlowTheme.of(
                                                                context)
                                                            .primaryBackground,
                                                    inactiveThumbColor:
                                                        FlutterFlowTheme.of(
                                                                context)
                                                            .secondaryText,
                                                  ),
                                                ),
                                                Text(
                                                  _model.levelSwitchValue ==
                                                          false
                                                      ? 'Match to \'Competent\' criteria'
                                                      : 'Match to \'Excellent\' criteria',
                                                  textAlign: TextAlign.center,
                                                  style: FlutterFlowTheme.of(
                                                          context)
                                                      .bodyMedium
                                                      .override(
                                                        fontFamily:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .bodyMediumFamily,
                                                        letterSpacing: 0.0,
                                                        useGoogleFonts: GoogleFonts
                                                                .asMap()
                                                            .containsKey(
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily),
                                                      ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ),
                                      ).animateOnPageLoad(animationsMap[
                                          'containerOnPageLoadAnimation5']!),
                                    ),
                                  if ((widget.reflectionreference == null) &&
                                      (_model.choiceChipsValue ==
                                          'Clinical Case Reviews'))
                                    Padding(
                                      padding: EdgeInsets.all(10.0),
                                      child: Container(
                                        width: 140.0,
                                        height: 200.0,
                                        decoration: BoxDecoration(
                                          color: FlutterFlowTheme.of(context)
                                              .secondaryBackground,
                                          boxShadow: [
                                            BoxShadow(
                                              blurRadius: 4.0,
                                              color: Color(0x33000000),
                                              offset: Offset(
                                                0.0,
                                                2.0,
                                              ),
                                            )
                                          ],
                                          borderRadius:
                                              BorderRadius.circular(10.0),
                                          border: Border.all(
                                            color: FlutterFlowTheme.of(context)
                                                .accent3,
                                          ),
                                        ),
                                        child: Padding(
                                          padding: EdgeInsets.all(10.0),
                                          child: Column(
                                            mainAxisSize: MainAxisSize.max,
                                            children: [
                                              Text(
                                                '4. Save to \'My cases\'',
                                                style:
                                                    FlutterFlowTheme.of(context)
                                                        .bodyMedium
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodyMediumFamily,
                                                          fontSize: 16.0,
                                                          letterSpacing: 0.0,
                                                          fontWeight:
                                                              FontWeight.w600,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily),
                                                        ),
                                              ),
                                              Padding(
                                                padding: EdgeInsetsDirectional
                                                    .fromSTEB(
                                                        10.0, 20.0, 10.0, 10.0),
                                                child: FFButtonWidget(
                                                  onPressed: () async {
                                                    logFirebaseEvent(
                                                        'REFLECT_GP_TRAINEE_PAGE_SAVE_BTN_ON_TAP');
                                                    logFirebaseEvent(
                                                        'Button_backend_call');

                                                    var reflectionsRecordReference =
                                                        ReflectionsRecord
                                                            .collection
                                                            .doc();
                                                    await reflectionsRecordReference
                                                        .set({
                                                      ...createReflectionsRecordData(
                                                        user:
                                                            currentUserReference,
                                                        clinicalCase: _model
                                                            .clinicalCaseTextController
                                                            .text,
                                                        capability1: _model
                                                            .dropDownCap1Value,
                                                        capability2: _model
                                                            .dropDownCap2Value,
                                                        capability3: _model
                                                            .dropDownCap3Value,
                                                        capability1Output: _model
                                                            .capability1OutputTextController
                                                            .text,
                                                        capability2Output: _model
                                                            .capability2OutputTextController
                                                            .text,
                                                        capability3Output: _model
                                                            .capability3OutputTextController
                                                            .text,
                                                        reflectionOutput: _model
                                                            .reflectionOutputTextController
                                                            .text,
                                                        learningOutput: _model
                                                            .learningOutputTextController
                                                            .text,
                                                        addedToPortfolio: false,
                                                        dateCreated:
                                                            getCurrentTimestamp,
                                                      ),
                                                      ...mapToFirestore(
                                                        {
                                                          'all_capabilities':
                                                              functions.makelist(
                                                                  _model
                                                                      .dropDownCap1Value,
                                                                  _model
                                                                      .dropDownCap2Value,
                                                                  _model
                                                                      .dropDownCap3Value),
                                                        },
                                                      ),
                                                    });
                                                    _model.reflectionoutput =
                                                        ReflectionsRecord
                                                            .getDocumentFromData({
                                                      ...createReflectionsRecordData(
                                                        user:
                                                            currentUserReference,
                                                        clinicalCase: _model
                                                            .clinicalCaseTextController
                                                            .text,
                                                        capability1: _model
                                                            .dropDownCap1Value,
                                                        capability2: _model
                                                            .dropDownCap2Value,
                                                        capability3: _model
                                                            .dropDownCap3Value,
                                                        capability1Output: _model
                                                            .capability1OutputTextController
                                                            .text,
                                                        capability2Output: _model
                                                            .capability2OutputTextController
                                                            .text,
                                                        capability3Output: _model
                                                            .capability3OutputTextController
                                                            .text,
                                                        reflectionOutput: _model
                                                            .reflectionOutputTextController
                                                            .text,
                                                        learningOutput: _model
                                                            .learningOutputTextController
                                                            .text,
                                                        addedToPortfolio: false,
                                                        dateCreated:
                                                            getCurrentTimestamp,
                                                      ),
                                                      ...mapToFirestore(
                                                        {
                                                          'all_capabilities':
                                                              functions.makelist(
                                                                  _model
                                                                      .dropDownCap1Value,
                                                                  _model
                                                                      .dropDownCap2Value,
                                                                  _model
                                                                      .dropDownCap3Value),
                                                        },
                                                      ),
                                                    }, reflectionsRecordReference);
                                                    logFirebaseEvent(
                                                        'Button_backend_call');

                                                    await currentUserReference!
                                                        .update({
                                                      ...mapToFirestore(
                                                        {
                                                          'reflection_count':
                                                              FieldValue
                                                                  .increment(1),
                                                        },
                                                      ),
                                                    });
                                                    logFirebaseEvent(
                                                        'Button_backend_call');

                                                    await UserReflectionCountsRecord
                                                            .createDoc(
                                                                currentUserReference!)
                                                        .set(
                                                            createUserReflectionCountsRecordData(
                                                      totalReflectionCount:
                                                          valueOrDefault(
                                                              currentUserDocument
                                                                  ?.reflectionCount,
                                                              0),
                                                      daysSinceAccountCreated:
                                                          functions.numberofdays(
                                                              getCurrentTimestamp,
                                                              currentUserDocument
                                                                  ?.dateAccountCreated),
                                                    ));
                                                    logFirebaseEvent(
                                                        'Button_bottom_sheet');
                                                    await showModalBottomSheet(
                                                      isScrollControlled: true,
                                                      backgroundColor:
                                                          Colors.transparent,
                                                      enableDrag: false,
                                                      context: context,
                                                      builder: (context) {
                                                        return WebViewAware(
                                                          child:
                                                              GestureDetector(
                                                            onTap: () {
                                                              FocusScope.of(
                                                                      context)
                                                                  .unfocus();
                                                              FocusManager
                                                                  .instance
                                                                  .primaryFocus
                                                                  ?.unfocus();
                                                            },
                                                            child: Padding(
                                                              padding: MediaQuery
                                                                  .viewInsetsOf(
                                                                      context),
                                                              child:
                                                                  BottomSheetOutputReviewWidget(
                                                                output: _model
                                                                    .reflectionoutput
                                                                    ?.reference,
                                                              ),
                                                            ),
                                                          ),
                                                        );
                                                      },
                                                    ).then((value) =>
                                                        safeSetState(() {}));

                                                    safeSetState(() {});
                                                  },
                                                  text: 'Save',
                                                  options: FFButtonOptions(
                                                    width: 80.0,
                                                    height: 40.0,
                                                    padding:
                                                        EdgeInsetsDirectional
                                                            .fromSTEB(0.0, 0.0,
                                                                0.0, 0.0),
                                                    iconPadding:
                                                        EdgeInsetsDirectional
                                                            .fromSTEB(0.0, 0.0,
                                                                0.0, 0.0),
                                                    color: FlutterFlowTheme.of(
                                                            context)
                                                        .primary,
                                                    textStyle: FlutterFlowTheme
                                                            .of(context)
                                                        .titleSmall
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .titleSmallFamily,
                                                          color: Colors.white,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .titleSmallFamily),
                                                        ),
                                                    elevation: 3.0,
                                                    borderSide: BorderSide(
                                                      color: Colors.transparent,
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            8.0),
                                                  ),
                                                ),
                                              ),
                                              Text(
                                                'Then head over to \'My cases\' and add to your portfolio',
                                                textAlign: TextAlign.center,
                                                style:
                                                    FlutterFlowTheme.of(context)
                                                        .bodyMedium
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodyMediumFamily,
                                                          color: FlutterFlowTheme
                                                                  .of(context)
                                                              .secondaryText,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily),
                                                        ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ).animateOnPageLoad(animationsMap[
                                          'containerOnPageLoadAnimation6']!),
                                    ),
                                  if (widget.reflectionreference != null)
                                    Padding(
                                      padding: EdgeInsetsDirectional.fromSTEB(
                                          20.0, 10.0, 10.0, 10.0),
                                      child: Container(
                                        width: 255.0,
                                        height: 200.0,
                                        decoration: BoxDecoration(
                                          color: FlutterFlowTheme.of(context)
                                              .lineColor,
                                          boxShadow: [
                                            BoxShadow(
                                              blurRadius: 4.0,
                                              color: Color(0x33000000),
                                              offset: Offset(
                                                0.0,
                                                2.0,
                                              ),
                                            )
                                          ],
                                          borderRadius:
                                              BorderRadius.circular(10.0),
                                        ),
                                        child: Visibility(
                                          visible:
                                              widget.reflectionreference !=
                                                  null,
                                          child: Column(
                                            mainAxisSize: MainAxisSize.max,
                                            mainAxisAlignment:
                                                MainAxisAlignment.center,
                                            children: [
                                              Row(
                                                mainAxisSize: MainAxisSize.max,
                                                mainAxisAlignment:
                                                    MainAxisAlignment.center,
                                                children: [
                                                  FFButtonWidget(
                                                    onPressed: () async {
                                                      logFirebaseEvent(
                                                          'REFLECT_GP_TRAINEE_DELETE_FROM_MY_CASES_');
                                                      logFirebaseEvent(
                                                          'Button_backend_call');
                                                      await widget
                                                          .reflectionreference!
                                                          .delete();
                                                      logFirebaseEvent(
                                                          'Button_navigate_to');

                                                      context.pushNamed(
                                                          'my_cases');
                                                    },
                                                    text:
                                                        'Delete from My cases',
                                                    options: FFButtonOptions(
                                                      width: 200.0,
                                                      height: 40.0,
                                                      padding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  0.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0),
                                                      iconPadding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  0.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0),
                                                      color:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .primary,
                                                      textStyle:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .titleSmall
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .titleSmallFamily,
                                                                color: Colors
                                                                    .white,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .titleSmallFamily),
                                                              ),
                                                      borderSide: BorderSide(
                                                        color:
                                                            Colors.transparent,
                                                        width: 1.0,
                                                      ),
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              8.0),
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ),
                                ],
                              ),
                            ),
                            Wrap(
                              spacing: 0.0,
                              runSpacing: 0.0,
                              alignment: WrapAlignment.start,
                              crossAxisAlignment: WrapCrossAlignment.start,
                              direction: Axis.horizontal,
                              runAlignment: WrapAlignment.start,
                              verticalDirection: VerticalDirection.down,
                              clipBehavior: Clip.none,
                              children: [
                                MouseRegion(
                                  opaque: false,
                                  cursor:
                                      MouseCursor.defer ?? MouseCursor.defer,
                                  child: Padding(
                                    padding: EdgeInsetsDirectional.fromSTEB(
                                        20.0, 10.0, 10.0, 10.0),
                                    child: Container(
                                      width: 370.0,
                                      height: 300.0,
                                      decoration: BoxDecoration(
                                        color: FlutterFlowTheme.of(context)
                                            .secondaryBackground,
                                        boxShadow: [
                                          BoxShadow(
                                            blurRadius: 4.0,
                                            color: Color(0x33000000),
                                            offset: Offset(
                                              0.0,
                                              2.0,
                                            ),
                                          )
                                        ],
                                        borderRadius:
                                            BorderRadius.circular(10.0),
                                        border: Border.all(
                                          color: FlutterFlowTheme.of(context)
                                              .accent3,
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(10.0),
                                        child: SingleChildScrollView(
                                          child: Column(
                                            mainAxisSize: MainAxisSize.max,
                                            children: [
                                              Column(
                                                mainAxisSize: MainAxisSize.max,
                                                children: [
                                                  Row(
                                                    mainAxisSize:
                                                        MainAxisSize.max,
                                                    mainAxisAlignment:
                                                        MainAxisAlignment
                                                            .center,
                                                    children: [
                                                      Container(
                                                        width: 100.0,
                                                        height: 40.0,
                                                        decoration:
                                                            BoxDecoration(
                                                          color: FlutterFlowTheme
                                                                  .of(context)
                                                              .primaryBackground,
                                                          boxShadow: [
                                                            BoxShadow(
                                                              blurRadius: 4.0,
                                                              color: Color(
                                                                  0x33000000),
                                                              offset: Offset(
                                                                0.0,
                                                                2.0,
                                                              ),
                                                            )
                                                          ],
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(
                                                                      10.0),
                                                        ),
                                                        alignment:
                                                            AlignmentDirectional(
                                                                0.0, 0.0),
                                                        child: Text(
                                                          'Capability 1',
                                                          style: FlutterFlowTheme
                                                                  .of(context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                        ),
                                                      ),
                                                      if ((_model.mouseRegionCapability1Hovered ==
                                                              true) &&
                                                          responsiveVisibility(
                                                            context: context,
                                                            phone: false,
                                                            tablet: false,
                                                          ))
                                                        Padding(
                                                          padding:
                                                              EdgeInsetsDirectional
                                                                  .fromSTEB(
                                                                      10.0,
                                                                      0.0,
                                                                      0.0,
                                                                      0.0),
                                                          child: Container(
                                                            width: 160.0,
                                                            height: 50.0,
                                                            decoration:
                                                                BoxDecoration(
                                                              color: FlutterFlowTheme
                                                                      .of(context)
                                                                  .secondaryBackground,
                                                              boxShadow: [
                                                                BoxShadow(
                                                                  blurRadius:
                                                                      4.0,
                                                                  color: Color(
                                                                      0x33000000),
                                                                  offset:
                                                                      Offset(
                                                                    0.0,
                                                                    2.0,
                                                                  ),
                                                                )
                                                              ],
                                                              borderRadius:
                                                                  BorderRadius
                                                                      .circular(
                                                                          10.0),
                                                            ),
                                                            child: Column(
                                                              mainAxisSize:
                                                                  MainAxisSize
                                                                      .max,
                                                              children: [
                                                                Text(
                                                                  'Run this capability only:',
                                                                  style: FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMedium
                                                                      .override(
                                                                        fontFamily:
                                                                            FlutterFlowTheme.of(context).bodyMediumFamily,
                                                                        letterSpacing:
                                                                            0.0,
                                                                        useGoogleFonts:
                                                                            GoogleFonts.asMap().containsKey(FlutterFlowTheme.of(context).bodyMediumFamily),
                                                                      ),
                                                                ),
                                                                Padding(
                                                                  padding: EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          0.0,
                                                                          5.0,
                                                                          0.0,
                                                                          0.0),
                                                                  child:
                                                                      FFButtonWidget(
                                                                    onPressed:
                                                                        () async {
                                                                      logFirebaseEvent(
                                                                          'REFLECT_GP_TRAINEE_PAGE_GO_BTN_ON_TAP');
                                                                      if ((valueOrDefault<bool>(currentUserDocument?.activeMembership, false) ==
                                                                              true) ||
                                                                          ((valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') != '') &&
                                                                              ((valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') == 'active') || (valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') == 'trialing')))) {
                                                                        if (functions.wordsLessThan(_model.clinicalCaseTextController.text) ==
                                                                            true) {
                                                                          if (_model.dropDownCap1Value != null &&
                                                                              _model.dropDownCap1Value != '') {
                                                                            if (_model.choiceChipsValue ==
                                                                                'Clinical Case Reviews') {
                                                                              logFirebaseEvent('Button_update_app_state');
                                                                              FFAppState().Capability1 = _model.dropDownCap1Value!;
                                                                              FFAppState().ClinicalCase = functions.replaceTabWithSpace(_model.clinicalCaseTextController.text)!;
                                                                              safeSetState(() {});
                                                                              logFirebaseEvent('Button_update_app_state');
                                                                              FFAppState().prompt1 = '${_model.introPromptCCR}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                                  if (_model.dropDownCap1Value == 'Communication and consultation skills') {
                                                                                    return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                                  } else if (_model.dropDownCap1Value == 'Fitness to practice') {
                                                                                    return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their (the Doctor’s) work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health (of the Doctor).  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                                  } else if (_model.dropDownCap1Value == 'Maintaining an ethical approach') {
                                                                                    return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                                  } else if (_model.dropDownCap1Value == 'Data gathering and interpretation') {
                                                                                    return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                                  } else if (_model.dropDownCap1Value == 'Clinical examination and procedural skills') {
                                                                                    return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                                  } else if (_model.dropDownCap1Value == 'Making a diagnosis/decisions') {
                                                                                    return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                                  } else if (_model.dropDownCap1Value == 'Clinical management') {
                                                                                    return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                                  } else if (_model.dropDownCap1Value == 'Managing medical complexity') {
                                                                                    return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                                  } else if (_model.dropDownCap1Value == 'Working with colleagues and in teams') {
                                                                                    return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                                  } else if (_model.dropDownCap1Value == 'Maintaining performance, learning and teaching') {
                                                                                    return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                                  } else if (_model.dropDownCap1Value == 'Organisation, management and leadership') {
                                                                                    return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                                  } else if (_model.dropDownCap1Value == 'Practising holistically, promoting health and safeguarding') {
                                                                                    return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                                  } else if (_model.dropDownCap1Value == 'Community orientation') {
                                                                                    return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                                  } else {
                                                                                    return 'Not set ';
                                                                                  }
                                                                                }() : () {
                                                                                  if (_model.dropDownCap1Value == 'Communication and consultation skills') {
                                                                                    return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                                  } else if (_model.dropDownCap1Value == 'Fitness to practice') {
                                                                                    return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                                  } else if (_model.dropDownCap1Value == 'Maintaining an ethical approach') {
                                                                                    return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                                  } else if (_model.dropDownCap1Value == 'Data gathering and interpretation') {
                                                                                    return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                                  } else if (_model.dropDownCap1Value == 'Clinical examination and procedural skills') {
                                                                                    return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                                  } else if (_model.dropDownCap1Value == 'Making a diagnosis/decisions') {
                                                                                    return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                                  } else if (_model.dropDownCap1Value == 'Clinical management') {
                                                                                    return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                                  } else if (_model.dropDownCap1Value == 'Managing medical complexity') {
                                                                                    return '1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                                  } else if (_model.dropDownCap1Value == 'Working with colleagues and in teams') {
                                                                                    return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                                  } else if (_model.dropDownCap1Value == 'Maintaining performance, learning and teaching') {
                                                                                    return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                                  } else if (_model.dropDownCap1Value == 'Organisation, management and leadership') {
                                                                                    return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                                  } else if (_model.dropDownCap1Value == 'Practising holistically, promoting health and safeguarding') {
                                                                                    return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                                  } else if (_model.dropDownCap1Value == 'Community orientation') {
                                                                                    return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                                  } else {
                                                                                    return 'Not set ';
                                                                                  }
                                                                                }()}${_model.closingPromptCCR1to3}${_model.capability1Extra}';
                                                                              safeSetState(() {});
                                                                            } else {
                                                                              logFirebaseEvent('Button_update_app_state');
                                                                              FFAppState().Capability1 = _model.dropDownCap1Value!;
                                                                              FFAppState().ClinicalCase = functions.replaceTabWithSpace(_model.keyLearningTextController.text)!;
                                                                              safeSetState(() {});
                                                                              logFirebaseEvent('Button_update_app_state');
                                                                              FFAppState().prompt1 = '${_model.introPromptSD}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                                  if (_model.dropDownCap1Value == 'Communication and consultation skills') {
                                                                                    return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                                  } else if (_model.dropDownCap1Value == 'Fitness to practice') {
                                                                                    return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their (the Doctor’s) work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health (of the Doctor).  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                                  } else if (_model.dropDownCap1Value == 'Maintaining an ethical approach') {
                                                                                    return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                                  } else if (_model.dropDownCap1Value == 'Data gathering and interpretation') {
                                                                                    return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                                  } else if (_model.dropDownCap1Value == 'Clinical examination and procedural skills') {
                                                                                    return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                                  } else if (_model.dropDownCap1Value == 'Making a diagnosis/decisions') {
                                                                                    return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                                  } else if (_model.dropDownCap1Value == 'Clinical management') {
                                                                                    return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                                  } else if (_model.dropDownCap1Value == 'Managing medical complexity') {
                                                                                    return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                                  } else if (_model.dropDownCap1Value == 'Working with colleagues and in teams') {
                                                                                    return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                                  } else if (_model.dropDownCap1Value == 'Maintaining performance, learning and teaching') {
                                                                                    return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                                  } else if (_model.dropDownCap1Value == 'Organisation, management and leadership') {
                                                                                    return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                                  } else if (_model.dropDownCap1Value == 'Practising holistically, promoting health and safeguarding') {
                                                                                    return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                                  } else if (_model.dropDownCap1Value == 'Community orientation') {
                                                                                    return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                                  } else {
                                                                                    return 'Not set ';
                                                                                  }
                                                                                }() : () {
                                                                                  if (_model.dropDownCap1Value == 'Communication and consultation skills') {
                                                                                    return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                                  } else if (_model.dropDownCap1Value == 'Fitness to practice') {
                                                                                    return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                                  } else if (_model.dropDownCap1Value == 'Maintaining an ethical approach') {
                                                                                    return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                                  } else if (_model.dropDownCap1Value == 'Data gathering and interpretation') {
                                                                                    return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                                  } else if (_model.dropDownCap1Value == 'Clinical examination and procedural skills') {
                                                                                    return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                                  } else if (_model.dropDownCap1Value == 'Making a diagnosis/decisions') {
                                                                                    return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                                  } else if (_model.dropDownCap1Value == 'Clinical management') {
                                                                                    return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                                  } else if (_model.dropDownCap1Value == 'Managing medical complexity') {
                                                                                    return '1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                                  } else if (_model.dropDownCap1Value == 'Working with colleagues and in teams') {
                                                                                    return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                                  } else if (_model.dropDownCap1Value == 'Maintaining performance, learning and teaching') {
                                                                                    return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                                  } else if (_model.dropDownCap1Value == 'Organisation, management and leadership') {
                                                                                    return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                                  } else if (_model.dropDownCap1Value == 'Practising holistically, promoting health and safeguarding') {
                                                                                    return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                                  } else if (_model.dropDownCap1Value == 'Community orientation') {
                                                                                    return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                                  } else {
                                                                                    return 'Not set ';
                                                                                  }
                                                                                }()}${_model.closingPromptSD1to3}${_model.capability1Extra}';
                                                                              safeSetState(() {});
                                                                            }

                                                                            if (FFAppState().ClinicalCase != '') {
                                                                              logFirebaseEvent('Button_backend_call');
                                                                              _model.aPI4resultSingle1 = await CallOpenAICall.call(
                                                                                prompt: functions.escapenewline(FFAppState().prompt1),
                                                                              );

                                                                              if ((_model.aPI4resultSingle1?.succeeded ?? true)) {
                                                                                logFirebaseEvent('Button_update_app_state');
                                                                                FFAppState().Capability1Output = getJsonField(
                                                                                  (_model.aPI4resultSingle1?.jsonBody ?? ''),
                                                                                  r'''$.choices[:].message.content''',
                                                                                ).toString();
                                                                                safeSetState(() {});
                                                                                logFirebaseEvent('Button_set_form_field');
                                                                                safeSetState(() {
                                                                                  _model.capability1OutputTextController?.text = getJsonField(
                                                                                    (_model.aPI4resultSingle1?.jsonBody ?? ''),
                                                                                    r'''$.choices[:].message.content''',
                                                                                  ).toString();
                                                                                });
                                                                              } else {
                                                                                logFirebaseEvent('Button_show_snack_bar');
                                                                                ScaffoldMessenger.of(context).showSnackBar(
                                                                                  SnackBar(
                                                                                    content: Text(
                                                                                      'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                                      style: TextStyle(
                                                                                        color: FlutterFlowTheme.of(context).primaryText,
                                                                                      ),
                                                                                    ),
                                                                                    duration: Duration(milliseconds: 4000),
                                                                                    backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                                  ),
                                                                                );
                                                                              }

                                                                              logFirebaseEvent('Button_backend_call');

                                                                              var reflectionsRecordReference = ReflectionsRecord.collection.doc();
                                                                              await reflectionsRecordReference.set(createReflectionsRecordData(
                                                                                clinicalCase: FFAppState().ClinicalCase,
                                                                                capability1: FFAppState().Capability1,
                                                                                capability1Output: FFAppState().Capability1Output,
                                                                                dateCreated: getCurrentTimestamp,
                                                                                name: currentUserDisplayName,
                                                                                dataNote: 'Single',
                                                                              ));
                                                                              _model.single1 = ReflectionsRecord.getDocumentFromData(
                                                                                  createReflectionsRecordData(
                                                                                    clinicalCase: FFAppState().ClinicalCase,
                                                                                    capability1: FFAppState().Capability1,
                                                                                    capability1Output: FFAppState().Capability1Output,
                                                                                    dateCreated: getCurrentTimestamp,
                                                                                    name: currentUserDisplayName,
                                                                                    dataNote: 'Single',
                                                                                  ),
                                                                                  reflectionsRecordReference);
                                                                            } else {
                                                                              logFirebaseEvent('Button_show_snack_bar');
                                                                              ScaffoldMessenger.of(context).showSnackBar(
                                                                                SnackBar(
                                                                                  content: Text(
                                                                                    'Please enter a clinical case',
                                                                                    style: TextStyle(
                                                                                      color: FlutterFlowTheme.of(context).primaryText,
                                                                                    ),
                                                                                  ),
                                                                                  duration: Duration(milliseconds: 1000),
                                                                                  backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                                ),
                                                                              );
                                                                            }
                                                                          } else {
                                                                            logFirebaseEvent('Button_show_snack_bar');
                                                                            ScaffoldMessenger.of(context).showSnackBar(
                                                                              SnackBar(
                                                                                content: Text(
                                                                                  'Please select a capability',
                                                                                  style: TextStyle(
                                                                                    color: FlutterFlowTheme.of(context).primaryText,
                                                                                  ),
                                                                                ),
                                                                                duration: Duration(milliseconds: 4000),
                                                                                backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                              ),
                                                                            );
                                                                          }
                                                                        } else {
                                                                          logFirebaseEvent(
                                                                              'Button_show_snack_bar');
                                                                          ScaffoldMessenger.of(context)
                                                                              .showSnackBar(
                                                                            SnackBar(
                                                                              content: Text(
                                                                                'Clinical case too long! Enter a case with up to 80 words',
                                                                                style: TextStyle(
                                                                                  color: FlutterFlowTheme.of(context).primaryText,
                                                                                ),
                                                                              ),
                                                                              duration: Duration(milliseconds: 4000),
                                                                              backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                            ),
                                                                          );
                                                                          logFirebaseEvent(
                                                                              'Button_update_app_state');
                                                                          FFAppState().ClinicalCase = _model
                                                                              .clinicalCaseTextController
                                                                              .text;
                                                                          FFAppState().Capability1 =
                                                                              _model.dropDownCap1Value!;
                                                                          FFAppState().Capability2 =
                                                                              _model.dropDownCap2Value!;
                                                                          FFAppState().Capability3 =
                                                                              _model.dropDownCap3Value!;
                                                                          safeSetState(
                                                                              () {});
                                                                        }
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_show_snack_bar');
                                                                        ScaffoldMessenger.of(context)
                                                                            .showSnackBar(
                                                                          SnackBar(
                                                                            content:
                                                                                Text(
                                                                              'Subscribe to use iReflect!',
                                                                              style: TextStyle(
                                                                                color: FlutterFlowTheme.of(context).primaryText,
                                                                              ),
                                                                            ),
                                                                            duration:
                                                                                Duration(milliseconds: 4000),
                                                                            backgroundColor:
                                                                                FlutterFlowTheme.of(context).secondary,
                                                                          ),
                                                                        );
                                                                      }

                                                                      safeSetState(
                                                                          () {});
                                                                    },
                                                                    text: 'Go',
                                                                    options:
                                                                        FFButtonOptions(
                                                                      height:
                                                                          22.0,
                                                                      padding: EdgeInsetsDirectional.fromSTEB(
                                                                          24.0,
                                                                          0.0,
                                                                          24.0,
                                                                          0.0),
                                                                      iconPadding: EdgeInsetsDirectional.fromSTEB(
                                                                          0.0,
                                                                          0.0,
                                                                          0.0,
                                                                          0.0),
                                                                      color: FlutterFlowTheme.of(
                                                                              context)
                                                                          .primary,
                                                                      textStyle: FlutterFlowTheme.of(
                                                                              context)
                                                                          .titleSmall
                                                                          .override(
                                                                            fontFamily:
                                                                                FlutterFlowTheme.of(context).titleSmallFamily,
                                                                            color:
                                                                                Colors.white,
                                                                            letterSpacing:
                                                                                0.0,
                                                                            useGoogleFonts:
                                                                                GoogleFonts.asMap().containsKey(FlutterFlowTheme.of(context).titleSmallFamily),
                                                                          ),
                                                                      elevation:
                                                                          3.0,
                                                                      borderSide:
                                                                          BorderSide(
                                                                        color: Colors
                                                                            .transparent,
                                                                        width:
                                                                            1.0,
                                                                      ),
                                                                      borderRadius:
                                                                          BorderRadius.circular(
                                                                              8.0),
                                                                    ),
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                        ),
                                                    ],
                                                  ),
                                                  Padding(
                                                    padding:
                                                        EdgeInsetsDirectional
                                                            .fromSTEB(0.0, 5.0,
                                                                0.0, 0.0),
                                                    child: Text(
                                                      valueOrDefault<String>(
                                                        FFAppState()
                                                            .Capability1,
                                                        'Select a capability',
                                                      ),
                                                      textAlign:
                                                          TextAlign.center,
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .titleSmall
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .titleSmallFamily,
                                                                color: FlutterFlowTheme.of(
                                                                        context)
                                                                    .primary,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .titleSmallFamily),
                                                              ),
                                                    ),
                                                  ),
                                                ],
                                              ),
                                              TextFormField(
                                                controller: _model
                                                    .capability1OutputTextController,
                                                focusNode: _model
                                                    .capability1OutputFocusNode,
                                                autofocus: true,
                                                obscureText: false,
                                                decoration: InputDecoration(
                                                  hintStyle:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .bodySmall
                                                          .override(
                                                            fontFamily:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodySmallFamily,
                                                            color: _model
                                                                    .mouseRegionCapability1Hovered
                                                                ? FlutterFlowTheme.of(
                                                                        context)
                                                                    .primary
                                                                : FlutterFlowTheme.of(
                                                                        context)
                                                                    .secondaryBackground,
                                                            letterSpacing: 0.0,
                                                            useGoogleFonts: GoogleFonts
                                                                    .asMap()
                                                                .containsKey(
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .bodySmallFamily),
                                                          ),
                                                  enabledBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  focusedBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  errorBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  focusedErrorBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                ),
                                                style:
                                                    FlutterFlowTheme.of(context)
                                                        .bodyMedium
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodyMediumFamily,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily),
                                                        ),
                                                maxLines: null,
                                                validator: _model
                                                    .capability1OutputTextControllerValidator
                                                    .asValidator(context),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ).animateOnPageLoad(animationsMap[
                                        'containerOnPageLoadAnimation7']!),
                                  ),
                                  onEnter: ((event) async {
                                    safeSetState(() => _model
                                        .mouseRegionCapability1Hovered = true);
                                  }),
                                  onExit: ((event) async {
                                    safeSetState(() => _model
                                        .mouseRegionCapability1Hovered = false);
                                  }),
                                ),
                                MouseRegion(
                                  opaque: false,
                                  cursor:
                                      MouseCursor.defer ?? MouseCursor.defer,
                                  child: Padding(
                                    padding: EdgeInsetsDirectional.fromSTEB(
                                        15.0, 10.0, 15.0, 10.0),
                                    child: Container(
                                      width: 370.0,
                                      height: 300.0,
                                      decoration: BoxDecoration(
                                        color: FlutterFlowTheme.of(context)
                                            .secondaryBackground,
                                        boxShadow: [
                                          BoxShadow(
                                            blurRadius: 4.0,
                                            color: Color(0x33000000),
                                            offset: Offset(
                                              0.0,
                                              2.0,
                                            ),
                                          )
                                        ],
                                        borderRadius:
                                            BorderRadius.circular(10.0),
                                        border: Border.all(
                                          color: FlutterFlowTheme.of(context)
                                              .accent3,
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(10.0),
                                        child: SingleChildScrollView(
                                          child: Column(
                                            mainAxisSize: MainAxisSize.max,
                                            children: [
                                              Row(
                                                mainAxisSize: MainAxisSize.max,
                                                mainAxisAlignment:
                                                    MainAxisAlignment.center,
                                                children: [
                                                  Container(
                                                    width: 100.0,
                                                    height: 40.0,
                                                    decoration: BoxDecoration(
                                                      color: FlutterFlowTheme
                                                              .of(context)
                                                          .primaryBackground,
                                                      boxShadow: [
                                                        BoxShadow(
                                                          blurRadius: 4.0,
                                                          color:
                                                              Color(0x33000000),
                                                          offset: Offset(
                                                            0.0,
                                                            2.0,
                                                          ),
                                                        )
                                                      ],
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              10.0),
                                                    ),
                                                    alignment:
                                                        AlignmentDirectional(
                                                            0.0, 0.0),
                                                    child: Text(
                                                      'Capability 2',
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                    ),
                                                  ),
                                                  if ((_model.mouseRegionCapability2Hovered ==
                                                          true) &&
                                                      responsiveVisibility(
                                                        context: context,
                                                        phone: false,
                                                        tablet: false,
                                                      ))
                                                    Padding(
                                                      padding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  10.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0),
                                                      child: Container(
                                                        width: 160.0,
                                                        height: 50.0,
                                                        decoration:
                                                            BoxDecoration(
                                                          color: FlutterFlowTheme
                                                                  .of(context)
                                                              .secondaryBackground,
                                                          boxShadow: [
                                                            BoxShadow(
                                                              blurRadius: 4.0,
                                                              color: Color(
                                                                  0x33000000),
                                                              offset: Offset(
                                                                0.0,
                                                                2.0,
                                                              ),
                                                            )
                                                          ],
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(
                                                                      10.0),
                                                        ),
                                                        child: Column(
                                                          mainAxisSize:
                                                              MainAxisSize.max,
                                                          children: [
                                                            Text(
                                                              'Run this capability only:',
                                                              style: FlutterFlowTheme
                                                                      .of(context)
                                                                  .bodyMedium
                                                                  .override(
                                                                    fontFamily:
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily,
                                                                    letterSpacing:
                                                                        0.0,
                                                                    useGoogleFonts: GoogleFonts
                                                                            .asMap()
                                                                        .containsKey(
                                                                            FlutterFlowTheme.of(context).bodyMediumFamily),
                                                                  ),
                                                            ),
                                                            Padding(
                                                              padding:
                                                                  EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          0.0,
                                                                          5.0,
                                                                          0.0,
                                                                          0.0),
                                                              child:
                                                                  FFButtonWidget(
                                                                onPressed:
                                                                    () async {
                                                                  logFirebaseEvent(
                                                                      'REFLECT_GP_TRAINEE_PAGE_GO_BTN_ON_TAP');
                                                                  if ((valueOrDefault<bool>(
                                                                              currentUserDocument
                                                                                  ?.activeMembership,
                                                                              false) ==
                                                                          true) ||
                                                                      ((valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') !=
                                                                                  '') &&
                                                                          ((valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') == 'active') ||
                                                                              (valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') == 'trialing')))) {
                                                                    if (functions.wordsLessThan(_model
                                                                            .clinicalCaseTextController
                                                                            .text) ==
                                                                        true) {
                                                                      if (_model
                                                                              .choiceChipsValue ==
                                                                          'Clinical Case Reviews') {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().Capability2 =
                                                                            _model.dropDownCap2Value!;
                                                                        FFAppState().ClinicalCase = functions.replaceTabWithSpace(_model
                                                                            .clinicalCaseTextController
                                                                            .text)!;
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState()
                                                                            .prompt2 = '${_model.introPromptCCR}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                            if (_model.dropDownCap2Value ==
                                                                                'Communication and consultation skills') {
                                                                              return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Fitness to practice') {
                                                                              return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their (the Doctor’s) work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health (of the Doctor).  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Maintaining an ethical approach') {
                                                                              return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Data gathering and interpretation') {
                                                                              return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Clinical examination and procedural skills') {
                                                                              return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Making a diagnosis/decisions') {
                                                                              return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Clinical management') {
                                                                              return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Managing medical complexity') {
                                                                              return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Working with colleagues and in teams') {
                                                                              return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Maintaining performance, learning and teaching') {
                                                                              return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Organisation, management and leadership') {
                                                                              return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Practising holistically, promoting health and safeguarding') {
                                                                              return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Community orientation') {
                                                                              return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                            } else {
                                                                              return 'Not set ';
                                                                            }
                                                                          }() : () {
                                                                            if (_model.dropDownCap2Value ==
                                                                                'Communication and consultation skills') {
                                                                              return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Fitness to practice') {
                                                                              return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Maintaining an ethical approach') {
                                                                              return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Data gathering and interpretation') {
                                                                              return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Clinical examination and procedural skills') {
                                                                              return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Making a diagnosis/decisions') {
                                                                              return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Clinical management') {
                                                                              return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Managing medical complexity') {
                                                                              return 'Managing medical complexity 1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Working with colleagues and in teams') {
                                                                              return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Maintaining performance, learning and teaching') {
                                                                              return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Organisation, management and leadership') {
                                                                              return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Practising holistically, promoting health and safeguarding') {
                                                                              return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Community orientation') {
                                                                              return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                            } else {
                                                                              return 'Not set ';
                                                                            }
                                                                          }()}${_model.closingPromptCCR1to3}${_model.capability2Extra}';
                                                                        safeSetState(
                                                                            () {});
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().Capability2 =
                                                                            _model.dropDownCap2Value!;
                                                                        FFAppState().ClinicalCase = functions.replaceTabWithSpace(_model
                                                                            .keyLearningTextController
                                                                            .text)!;
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState()
                                                                            .prompt2 = '${_model.introPromptSD}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                            if (_model.dropDownCap2Value ==
                                                                                'Communication and consultation skills') {
                                                                              return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Fitness to practice') {
                                                                              return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their (the Doctor’s) work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health (of the Doctor).  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Maintaining an ethical approach') {
                                                                              return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Data gathering and interpretation') {
                                                                              return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Clinical examination and procedural skills') {
                                                                              return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Making a diagnosis/decisions') {
                                                                              return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Clinical management') {
                                                                              return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Managing medical complexity') {
                                                                              return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Working with colleagues and in teams') {
                                                                              return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Maintaining performance, learning and teaching') {
                                                                              return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Organisation, management and leadership') {
                                                                              return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Practising holistically, promoting health and safeguarding') {
                                                                              return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Community orientation') {
                                                                              return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                            } else {
                                                                              return 'Not set ';
                                                                            }
                                                                          }() : () {
                                                                            if (_model.dropDownCap2Value ==
                                                                                'Communication and consultation skills') {
                                                                              return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Fitness to practice') {
                                                                              return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Maintaining an ethical approach') {
                                                                              return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Data gathering and interpretation') {
                                                                              return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Clinical examination and procedural skills') {
                                                                              return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Making a diagnosis/decisions') {
                                                                              return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Clinical management') {
                                                                              return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Managing medical complexity') {
                                                                              return 'Managing medical complexity 1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Working with colleagues and in teams') {
                                                                              return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Maintaining performance, learning and teaching') {
                                                                              return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Organisation, management and leadership') {
                                                                              return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Practising holistically, promoting health and safeguarding') {
                                                                              return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                            } else if (_model.dropDownCap2Value ==
                                                                                'Community orientation') {
                                                                              return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                            } else {
                                                                              return 'Not set ';
                                                                            }
                                                                          }()}${_model.closingPromptSD1to3}${_model.capability2Extra}';
                                                                        safeSetState(
                                                                            () {});
                                                                      }

                                                                      if (FFAppState().ClinicalCase !=
                                                                              '') {
                                                                        if (_model.dropDownCap2Value !=
                                                                                null &&
                                                                            _model.dropDownCap2Value !=
                                                                                '') {
                                                                          logFirebaseEvent(
                                                                              'Button_backend_call');
                                                                          _model.aPI4result2single2 =
                                                                              await CallOpenAICall.call(
                                                                            prompt:
                                                                                functions.escapenewline(FFAppState().prompt2),
                                                                          );

                                                                          if ((_model.aPI4result2single2?.succeeded ??
                                                                              true)) {
                                                                            logFirebaseEvent('Button_update_app_state');
                                                                            FFAppState().Capability2Output =
                                                                                getJsonField(
                                                                              (_model.aPI4result2single2?.jsonBody ?? ''),
                                                                              r'''$.choices[:].message.content''',
                                                                            ).toString();
                                                                            safeSetState(() {});
                                                                            logFirebaseEvent('Button_set_form_field');
                                                                            safeSetState(() {
                                                                              _model.capability2OutputTextController?.text = getJsonField(
                                                                                (_model.aPI4result2single2?.jsonBody ?? ''),
                                                                                r'''$.choices[:].message.content''',
                                                                              ).toString();
                                                                            });
                                                                          } else {
                                                                            logFirebaseEvent('Button_show_snack_bar');
                                                                            ScaffoldMessenger.of(context).showSnackBar(
                                                                              SnackBar(
                                                                                content: Text(
                                                                                  'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                                  style: TextStyle(
                                                                                    color: FlutterFlowTheme.of(context).primaryText,
                                                                                  ),
                                                                                ),
                                                                                duration: Duration(milliseconds: 4000),
                                                                                backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                              ),
                                                                            );
                                                                          }

                                                                          logFirebaseEvent(
                                                                              'Button_backend_call');

                                                                          var reflectionsRecordReference = ReflectionsRecord
                                                                              .collection
                                                                              .doc();
                                                                          await reflectionsRecordReference
                                                                              .set(createReflectionsRecordData(
                                                                            clinicalCase:
                                                                                FFAppState().ClinicalCase,
                                                                            capability2:
                                                                                FFAppState().Capability2,
                                                                            capability2Output:
                                                                                FFAppState().Capability2Output,
                                                                            dateCreated:
                                                                                getCurrentTimestamp,
                                                                            name:
                                                                                currentUserDisplayName,
                                                                            dataNote:
                                                                                'Single',
                                                                          ));
                                                                          _model.reflectionoutputhidden4single2 = ReflectionsRecord.getDocumentFromData(
                                                                              createReflectionsRecordData(
                                                                                clinicalCase: FFAppState().ClinicalCase,
                                                                                capability2: FFAppState().Capability2,
                                                                                capability2Output: FFAppState().Capability2Output,
                                                                                dateCreated: getCurrentTimestamp,
                                                                                name: currentUserDisplayName,
                                                                                dataNote: 'Single',
                                                                              ),
                                                                              reflectionsRecordReference);
                                                                        } else {
                                                                          logFirebaseEvent(
                                                                              'Button_show_snack_bar');
                                                                          ScaffoldMessenger.of(context)
                                                                              .showSnackBar(
                                                                            SnackBar(
                                                                              content: Text(
                                                                                'Please select a capability',
                                                                                style: TextStyle(
                                                                                  color: FlutterFlowTheme.of(context).primaryText,
                                                                                ),
                                                                              ),
                                                                              duration: Duration(milliseconds: 4000),
                                                                              backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                            ),
                                                                          );
                                                                        }
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_show_snack_bar');
                                                                        ScaffoldMessenger.of(context)
                                                                            .showSnackBar(
                                                                          SnackBar(
                                                                            content:
                                                                                Text(
                                                                              'Please enter a clinical case',
                                                                              style: TextStyle(
                                                                                color: FlutterFlowTheme.of(context).primaryText,
                                                                              ),
                                                                            ),
                                                                            duration:
                                                                                Duration(milliseconds: 1000),
                                                                            backgroundColor:
                                                                                FlutterFlowTheme.of(context).secondary,
                                                                          ),
                                                                        );
                                                                      }
                                                                    } else {
                                                                      logFirebaseEvent(
                                                                          'Button_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'Clinical case too long! Enter a case with up to 80 words',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 4000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                      logFirebaseEvent(
                                                                          'Button_update_app_state');
                                                                      FFAppState()
                                                                              .ClinicalCase =
                                                                          _model
                                                                              .clinicalCaseTextController
                                                                              .text;
                                                                      FFAppState()
                                                                              .Capability1 =
                                                                          _model
                                                                              .dropDownCap1Value!;
                                                                      FFAppState()
                                                                              .Capability2 =
                                                                          _model
                                                                              .dropDownCap2Value!;
                                                                      FFAppState()
                                                                              .Capability3 =
                                                                          _model
                                                                              .dropDownCap3Value!;
                                                                      safeSetState(
                                                                          () {});
                                                                    }
                                                                  } else {
                                                                    logFirebaseEvent(
                                                                        'Button_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'Subscribe to use iReflect!',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 4000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }

                                                                  safeSetState(
                                                                      () {});
                                                                },
                                                                text: 'Go',
                                                                options:
                                                                    FFButtonOptions(
                                                                  height: 22.0,
                                                                  padding: EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          24.0,
                                                                          0.0,
                                                                          24.0,
                                                                          0.0),
                                                                  iconPadding: EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          0.0,
                                                                          0.0,
                                                                          0.0,
                                                                          0.0),
                                                                  color: FlutterFlowTheme.of(
                                                                          context)
                                                                      .primary,
                                                                  textStyle: FlutterFlowTheme.of(
                                                                          context)
                                                                      .titleSmall
                                                                      .override(
                                                                        fontFamily:
                                                                            FlutterFlowTheme.of(context).titleSmallFamily,
                                                                        color: Colors
                                                                            .white,
                                                                        letterSpacing:
                                                                            0.0,
                                                                        useGoogleFonts:
                                                                            GoogleFonts.asMap().containsKey(FlutterFlowTheme.of(context).titleSmallFamily),
                                                                      ),
                                                                  elevation:
                                                                      3.0,
                                                                  borderSide:
                                                                      BorderSide(
                                                                    color: Colors
                                                                        .transparent,
                                                                    width: 1.0,
                                                                  ),
                                                                  borderRadius:
                                                                      BorderRadius
                                                                          .circular(
                                                                              8.0),
                                                                ),
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ),
                                                ],
                                              ),
                                              Padding(
                                                padding: EdgeInsetsDirectional
                                                    .fromSTEB(
                                                        0.0, 5.0, 0.0, 0.0),
                                                child: Text(
                                                  valueOrDefault<String>(
                                                    FFAppState().Capability2,
                                                    'Select a capability',
                                                  ),
                                                  textAlign: TextAlign.center,
                                                  style: FlutterFlowTheme.of(
                                                          context)
                                                      .titleSmall
                                                      .override(
                                                        fontFamily:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .titleSmallFamily,
                                                        color:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .primary,
                                                        letterSpacing: 0.0,
                                                        useGoogleFonts: GoogleFonts
                                                                .asMap()
                                                            .containsKey(
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .titleSmallFamily),
                                                      ),
                                                ),
                                              ),
                                              TextFormField(
                                                controller: _model
                                                    .capability2OutputTextController,
                                                focusNode: _model
                                                    .capability2OutputFocusNode,
                                                autofocus: true,
                                                obscureText: false,
                                                decoration: InputDecoration(
                                                  hintStyle:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .bodySmall
                                                          .override(
                                                            fontFamily:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodySmallFamily,
                                                            color: _model
                                                                    .mouseRegionCapability2Hovered
                                                                ? FlutterFlowTheme.of(
                                                                        context)
                                                                    .primary
                                                                : FlutterFlowTheme.of(
                                                                        context)
                                                                    .secondaryBackground,
                                                            letterSpacing: 0.0,
                                                            useGoogleFonts: GoogleFonts
                                                                    .asMap()
                                                                .containsKey(
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .bodySmallFamily),
                                                          ),
                                                  enabledBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  focusedBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  errorBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  focusedErrorBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                ),
                                                style:
                                                    FlutterFlowTheme.of(context)
                                                        .bodyMedium
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodyMediumFamily,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily),
                                                        ),
                                                maxLines: null,
                                                validator: _model
                                                    .capability2OutputTextControllerValidator
                                                    .asValidator(context),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ).animateOnPageLoad(animationsMap[
                                        'containerOnPageLoadAnimation8']!),
                                  ),
                                  onEnter: ((event) async {
                                    safeSetState(() => _model
                                        .mouseRegionCapability2Hovered = true);
                                  }),
                                  onExit: ((event) async {
                                    safeSetState(() => _model
                                        .mouseRegionCapability2Hovered = false);
                                  }),
                                ),
                                MouseRegion(
                                  opaque: false,
                                  cursor:
                                      MouseCursor.defer ?? MouseCursor.defer,
                                  child: Padding(
                                    padding: EdgeInsets.all(10.0),
                                    child: Container(
                                      width: 370.0,
                                      height: 300.0,
                                      decoration: BoxDecoration(
                                        color: FlutterFlowTheme.of(context)
                                            .secondaryBackground,
                                        boxShadow: [
                                          BoxShadow(
                                            blurRadius: 4.0,
                                            color: Color(0x33000000),
                                            offset: Offset(
                                              0.0,
                                              2.0,
                                            ),
                                          )
                                        ],
                                        borderRadius:
                                            BorderRadius.circular(10.0),
                                        border: Border.all(
                                          color: FlutterFlowTheme.of(context)
                                              .accent3,
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(10.0),
                                        child: SingleChildScrollView(
                                          child: Column(
                                            mainAxisSize: MainAxisSize.max,
                                            children: [
                                              Row(
                                                mainAxisSize: MainAxisSize.max,
                                                mainAxisAlignment:
                                                    MainAxisAlignment.center,
                                                children: [
                                                  Container(
                                                    width: 100.0,
                                                    height: 40.0,
                                                    decoration: BoxDecoration(
                                                      color: FlutterFlowTheme
                                                              .of(context)
                                                          .primaryBackground,
                                                      boxShadow: [
                                                        BoxShadow(
                                                          blurRadius: 4.0,
                                                          color:
                                                              Color(0x33000000),
                                                          offset: Offset(
                                                            0.0,
                                                            2.0,
                                                          ),
                                                        )
                                                      ],
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              10.0),
                                                    ),
                                                    alignment:
                                                        AlignmentDirectional(
                                                            0.0, 0.0),
                                                    child: Text(
                                                      'Capability 3',
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                    ),
                                                  ),
                                                  if ((_model.mouseRegionCapability3Hovered ==
                                                          true) &&
                                                      responsiveVisibility(
                                                        context: context,
                                                        phone: false,
                                                        tablet: false,
                                                      ))
                                                    Padding(
                                                      padding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  10.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0),
                                                      child: Container(
                                                        width: 160.0,
                                                        height: 50.0,
                                                        decoration:
                                                            BoxDecoration(
                                                          color: FlutterFlowTheme
                                                                  .of(context)
                                                              .secondaryBackground,
                                                          boxShadow: [
                                                            BoxShadow(
                                                              blurRadius: 4.0,
                                                              color: Color(
                                                                  0x33000000),
                                                              offset: Offset(
                                                                0.0,
                                                                2.0,
                                                              ),
                                                            )
                                                          ],
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(
                                                                      10.0),
                                                        ),
                                                        child: Column(
                                                          mainAxisSize:
                                                              MainAxisSize.max,
                                                          children: [
                                                            Text(
                                                              'Run this capability only:',
                                                              style: FlutterFlowTheme
                                                                      .of(context)
                                                                  .bodyMedium
                                                                  .override(
                                                                    fontFamily:
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily,
                                                                    letterSpacing:
                                                                        0.0,
                                                                    useGoogleFonts: GoogleFonts
                                                                            .asMap()
                                                                        .containsKey(
                                                                            FlutterFlowTheme.of(context).bodyMediumFamily),
                                                                  ),
                                                            ),
                                                            Padding(
                                                              padding:
                                                                  EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          0.0,
                                                                          5.0,
                                                                          0.0,
                                                                          0.0),
                                                              child:
                                                                  FFButtonWidget(
                                                                onPressed:
                                                                    () async {
                                                                  logFirebaseEvent(
                                                                      'REFLECT_GP_TRAINEE_PAGE_GO_BTN_ON_TAP');
                                                                  if ((valueOrDefault<bool>(
                                                                              currentUserDocument
                                                                                  ?.activeMembership,
                                                                              false) ==
                                                                          true) ||
                                                                      ((valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') !=
                                                                                  '') &&
                                                                          ((valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') == 'active') ||
                                                                              (valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') == 'trialing')))) {
                                                                    if (functions.wordsLessThan(_model
                                                                            .clinicalCaseTextController
                                                                            .text) ==
                                                                        true) {
                                                                      if (_model
                                                                              .choiceChipsValue ==
                                                                          'Clinical Case Reviews') {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().Capability3 =
                                                                            _model.dropDownCap3Value!;
                                                                        FFAppState().ClinicalCase = functions.replaceTabWithSpace(_model
                                                                            .clinicalCaseTextController
                                                                            .text)!;
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState()
                                                                            .prompt3 = '${_model.introPromptCCR}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                            if (_model.dropDownCap3Value ==
                                                                                'Communication and consultation skills') {
                                                                              return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Fitness to practice') {
                                                                              return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their (the Doctor’s) work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health (of the Doctor).  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Maintaining an ethical approach') {
                                                                              return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Data gathering and interpretation') {
                                                                              return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Clinical examination and procedural skills') {
                                                                              return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Making a diagnosis/decisions') {
                                                                              return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Clinical management') {
                                                                              return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Managing medical complexity') {
                                                                              return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Working with colleagues and in teams') {
                                                                              return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Maintaining performance, learning and teaching') {
                                                                              return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Organisation, management and leadership') {
                                                                              return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Practising holistically, promoting health and safeguarding') {
                                                                              return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Community orientation') {
                                                                              return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                            } else {
                                                                              return 'Not set ';
                                                                            }
                                                                          }() : () {
                                                                            if (_model.dropDownCap3Value ==
                                                                                'Communication and consultation skills') {
                                                                              return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Fitness to practice') {
                                                                              return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Maintaining an ethical approach') {
                                                                              return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Data gathering and interpretation') {
                                                                              return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Clinical examination and procedural skills') {
                                                                              return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Making a diagnosis/decisions') {
                                                                              return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Clinical management') {
                                                                              return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Managing medical complexity') {
                                                                              return '1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Working with colleagues and in teams') {
                                                                              return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Maintaining performance, learning and teaching') {
                                                                              return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Organisation, management and leadership') {
                                                                              return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Practising holistically, promoting health and safeguarding') {
                                                                              return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Community orientation') {
                                                                              return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                            } else {
                                                                              return 'Not set ';
                                                                            }
                                                                          }()}${_model.closingPromptCCR1to3}${_model.capability3Extra}';
                                                                        safeSetState(
                                                                            () {});
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().Capability3 =
                                                                            _model.dropDownCap3Value!;
                                                                        FFAppState().ClinicalCase = functions.replaceTabWithSpace(_model
                                                                            .keyLearningTextController
                                                                            .text)!;
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState()
                                                                            .prompt3 = '${_model.introPromptSD}${functions.escapenewline(FFAppState().ClinicalCase)}I need to write a reflective piece that demonstrates I have the following skills:${_model.levelSwitchValue == true ? () {
                                                                            if (_model.dropDownCap3Value ==
                                                                                'Communication and consultation skills') {
                                                                              return '1. Incorporates the patient’s perspective and context when negotiating the management plan  2. Appropriately uses advanced consultation skills, such as confrontation or catharsis, to achieve better patient outcomes.  3. Employs a full range of fluent communication skills, both verbal and non-verbal, including active listening skills.  4. Uses a variety of communication techniques and materials (e.g. written or electronic) to adapt explanations to the needs of the patient.  5. Whenever possible, adopts plans that respect the patient’s autonomy. When there is a difference of opinion the patient’s autonomy is respected and a positive relationship is maintained.  6. Consults effectively in a focussed manner moving beyond the essential to take a holistic view of the patient’s needs within the time-frame of a normal consultation.  7. Uses a variety of communication and consultation techniques that demonstrates respect for, and values, diversity.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Fitness to practice') {
                                                                              return '1. Encourages scrutiny of professional behaviour, is open to feedback and demonstrates a willingness to change.  2. Anticipates situations that might damage their (the Doctor’s) work-life balance and seeks to minimise any adverse effects on themself or their patients.  3. Takes a proactive approach to promote personal health (of the Doctor).  4. Encourages an organisational culture in which the health of its members is valued and supported.  5. Provides positive support to colleagues who have made mistakes or whose performance gives cause for concern.  6. Actively seeks to anticipate and rectify where systems and practice may require improvement in order to improve patient care.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Maintaining an ethical approach') {
                                                                              return '1. Anticipates the potential for conflicts of interest and takes appropriate action to avoid these.  2. Anticipates situations where indirect discrimination might occur.  3. Awareness of current legislation as it applies to clinical work and practice management.  4. Actively supports diversity and harnesses differences between people for the benefit of the organisation and patients alike.  5. Able to analyse ethical issues with reference to specific ethical theory.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Data gathering and interpretation') {
                                                                              return '1. Expertly identifies the nature and scope of enquiry needed to investigate the problem, or multiple problems, within a short time-frame.  2. Prioritises problems in a way that enhances patient satisfaction.  3. Uses a stepwise approach, basing further enquiries, examinations and tests on what is already known and what is later discovered.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Clinical examination and procedural skills') {
                                                                              return '1. Proficiently identifies and performs the scope of examination necessary to investigate the patient’s problem(s).  2. Uses a step-wise approach to examination, basing further examinations on what is known already and is later discovered.  3. Demonstrates a wide range of procedural skills to a high standard.  4. Engages with quality improvement initiatives with regard to examination and procedural skills.  5. Recognises the verbal and non- verbal clues that the patient is not comfortable with an intrusion into their personal space especially the prospect or conduct of intimate examinations. Is able to help the patient to accept and feel safe during the examination.  6. Helps to develop systems that reduce risk in clinical examination and procedural skills.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Making a diagnosis/decisions') {
                                                                              return '1. Uses pattern recognition to identify diagnoses quickly, safely and reliably.  2. Remains aware of the limitations of pattern recognition and when to revert to an analytical approach.  3. No longer relies on rules or protocols but is able to use and justify discretionary judgement in situations of uncertainty or complexity, for example in patients with multiple problems.  4. Continues to reflect appropriately on difficult decisions. Develops mechanisms to be comfortable with these choices.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Clinical management') {
                                                                              return '1. Provides patient-centred management plans whilst taking account of local and national guidelines in a timely manner.  2. Empowers the patient with confidence to manage problems independently together with knowledge of when to seek further help.  3. Able to challenge unrealistic patient expectations and consulting patterns with regard to follow up of current and future problems.  4. Regularly reviews all of the patient’s medication in terms of evidence- based prescribing, cost- effectiveness and patient understanding.  5. Has confidence in stopping or stepping down medication where this is appropriate.  6. Identifies areas for improvement in referral processes and pathways and contributes to quality improvement.  7. Contributes to reflection on emergencies as significant events and how these can be used to improve patient care in the future.  8. Takes active steps within the organisation to improve continuity of care for the patients.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Managing medical complexity') {
                                                                              return '1. Accepts responsibility for coordinating the management of the patient’s acute and chronic problems over time.  2. Anticipates and employs a variety of strategies for managing uncertainty.  3. Uses the patient’s perception of risk to enhance the management plan.  4. Comfortable moving beyond single condition guidelines and protocols in situations of multi-morbidity and polypharmacy, whilst maintaining the patient’s trust.  5. Coordinates a team based approach to health promotion in its widest sense.  6. Maintains a positive attitude to the patient’s health even when the situation is very challenging.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Working with colleagues and in teams') {
                                                                              return '1. Helps to coordinate a team-based approach to enhance patient care, with a positive and creative approach to team development.  2. Shows awareness of the strengths and weaknesses of each team member and considers how this can be used to improve the effectiveness of a team.  3. Encourages the contribution of others employing a range of skills including active listening. Assertive but doesn’t insist on own views.  4. Shows some understanding of how group dynamics work and the theoretical work underpinning this. Has demonstrated this in a practical way, for example in chairing a meeting.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Maintaining performance, learning and teaching') {
                                                                              return ' 1. Uses professional judgement to decide when to initiate and develop protocols and when to challenge their use.  2. Moves beyond the use of existing evidence toward initiating and collaborating in research that addresses unanswered questions.  3. Systematically evaluates performance against external standards.  4. Demonstrates how elements of personal development impact upon career planning and the needs of the organisation.  5. Encourages and facilitates participation and application of clinical governance activities, by involving the practice, the wider primary care team and other organisations.  6. Evaluates outcomes of teaching, seeking feedback on performance, and reflects on this.  7. Actively facilitates the development of others.  8. Ensures students and junior colleagues are appropriately supervised.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Organisation, management and leadership') {
                                                                              return '1. Uses and modifies organisational and IM&T systems to facilitate: Clinical care to individuals and communities, Clinical governance Practice administration  2. Uses IM&T systems to improve patient care in the consultation, in supportive care planning and communication across all the health care professionals involved with the patient.  3. Manages own work effectively whilst maintaining awareness of other people’s workload. Offers help sensitively but recognises own limitations.  4. Actively facilitates change in the organisation. This will include the evaluation of the effectiveness of any changes implemented.  5. Willing to take a lead role in helping the organisation to respond to exceptional demand.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Practising holistically, promoting health and safeguarding') {
                                                                              return '1. Accesses information about the patient’s psycho-social history in a fluent and non-judgemental manner that puts the patient at ease.  2. Recognises and shows understanding of the limits of the doctor’s ability to intervene in the holistic care of the patient.  3. Facilitates appropriate long term support for patients, their families and carers that is realistic and avoids doctor dependence.  4. Makes effective use of tools in health promotion, such as decision aids, to improve health understanding.  5. Demonstrates skills and knowledge to contribute effectively to safeguarding processes including identifying risks and contributing to/formulating policy documents and communicating effective safeguarding plans for adults/children at risk of abuse, harm or neglect with wider inter-agencies.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Community orientation') {
                                                                              return '1. Takes an active part in helping to develop services in their workplace or locality that are relevant to the local population.  2. Understands the local processes that are used to shape service delivery and how they can influence them, e.g. through Health Boards and CCGs.  3. Reflects on the requirement to balance the needs of individual patients, the health needs of the local community and the available resources. Considers local and national protocols, e.g. SIGN or NICE guidelines.  4. Develops and improves local services including collaborating with private and voluntary sectors, e.g. taking part in patient participation groups, improving the communication between practices and care homes, etc.';
                                                                            } else {
                                                                              return 'Not set ';
                                                                            }
                                                                          }() : () {
                                                                            if (_model.dropDownCap3Value ==
                                                                                'Communication and consultation skills') {
                                                                              return '1. Explores the patient’s agenda, health beliefs and preferences.   2. Elicits psychological and social information to place the patient’s problem in context.  3. Achieves the tasks of the consultation, responding to the preferences of the patient in an efficient manner.  4. Explores the patient’s understanding of what has taken place.  5. The use of language is fluent and takes into consideration the needs and characteristics of the patient, for instance when talking to children or patients with learning disabilities.  6. Uses the patient’s understanding to help improve the explanation offered.  7. Works in partnership with the patient, negotiating a mutually acceptable plan that respects the patient’s agenda and preference for involvement.  8. Consults in an organised and structured way, achieving the main tasks of the consultation in a timely manner.  9. Manages consultations effectively with patients who have different languages, cultures, beliefs and educational backgrounds.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Fitness to practice') {
                                                                              return '1. Demonstrates the accepted codes of practice in order to promote patient safety and effective team-working.  2. Achieves a balance between their professional and personal demands that meets their work commitments and maintains their health.  3. Takes effective steps to address any personal health issue or habit that is impacting on their performance as a doctor.  4. Demonstrates insight into any personal health issues.  5. Reacts promptly, discreetly and impartially when there are concerns about self or colleagues.  6. Takes advice from appropriate people and, if necessary, engages in a referral procedure.  7. Uses mechanisms to reflect on and learn from complaints or performance issues in order to improve patient care.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Maintaining an ethical approach') {
                                                                              return '1. Demonstrates the application of “Good Medical Practice” in their own clinical practice.  2. Reflects on how their values, attitudes and ethics might influence professional behaviour.  3. Demonstrates equality, fairness and respect in their day-to-day practice.  4. Values and appreciates different cultures and personal attributes, both in patients and colleagues.  5. Reflects on and discusses moral dilemmas encountered in the course of their work.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Data gathering and interpretation') {
                                                                              return '1. Systematically gathers information, using questions appropriately targeted to the problem without affecting patient safety.  2. Understands the importance of, and makes appropriate use of, existing information about the problem and the patient’s context.  3. Chooses examinations and targets investigations appropriately and efficiently.  4. Understands the significance and implications of findings and results, and takes appropriate action.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Clinical examination and procedural skills') {
                                                                              return '1. Chooses examinations appropriately targeted to the patient’s problem(s).  2. Has a systematic approach to clinical examination and able to interpret physical signs accurately.  3. Varies options of procedures according to circumstances and the preferences of the patient.  4. Identifies and reflects on ethical issues with regard to examination and procedural skills.  5. Recognises and acknowledges the patients concerns before and during the examination and puts them at ease.  6. Shows awareness of the medico- legal background, informed consent, mental capacity and the best interests of the patient.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Making a diagnosis/decisions') {
                                                                              return '1. Makes diagnoses in a structured way using a problem-solving method.  2. Uses an understanding of probability based on prevalence, incidence and natural history of illness to aid decision-making.  3. Addresses problems that present early and/or in an undifferentiated way by integrating all the available information to help generate a differential diagnosis.  4. Revises hypotheses in the light of additional information.  5. Thinks flexibly around problems generating functional solutions.  6. Has confidence in, and takes ownership of own decisions whilst being aware of their own limitations.  7. Keeps an open mind and is able to adjust and revise decisions in the light of relevant new information.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Clinical management') {
                                                                              return '1. Varies management options responsively according to the circumstances, priorities and preferences of those involved.  2. Considers a “wait and see” approach where appropriate.  3. Uses effective prioritisation of problems when the patient presents with multiple issues.  4. Suggests a variety of follow-up arrangements that are safe and appropriate, whilst also enhancing patient autonomy.  5. In addition to prescribing safely is aware of and applies local and national guidelines including drug and non-drug therapies.  6. Maintains awareness of the legal framework for appropriate prescribing.  7. Refers appropriately, taking into account all available resources.  8. Responds rapidly and skilfully to emergencies, with appropriate follow- up for the patient and their family. Ensures that care is co-ordinated both within the practice team and with other services.  9. Provides comprehensive continuity of care, taking into account all of the patient’s problems and their social situation.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Managing medical complexity') {
                                                                              return '1. Simultaneously manages the patient’s health problems, both acute and chronic.  2. Is able to manage uncertainty including that experienced by the patient.  3. Communicates risk effectively to patients and involves them in its management to the appropriate degree.  4. Recognises the inevitable conflicts that arise when managing patients with multiple problems and takes steps to adjust care appropriately.  5. Consistently encourages improvement and rehabilitation and, where appropriate, recovery.  6. Encourages the patient to participate in appropriate health promotion and disease prevention strategies.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Working with colleagues and in teams') {
                                                                              return '1. Is an effective team member, working flexibly with the various teams involved in day to day primary care.  2. Understands the context within which different team members are working, e.g. Health Visitors and their role in safeguarding.  3. Appreciates the increased efficacy in delivering patient care when teams work collaboratively rather than as individuals.  4. Communicates proactively with team members so that patient care is enhanced using an appropriate mode of communication for the circumstances.  5. Contributes positively to their various teams and reflects on how the teams work and members interact.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Maintaining performance, learning and teaching') {
                                                                              return '1. Judges the weight of evidence, using critical appraisal skills and an understanding of basic statistical terms, to inform decision-making.  2. Shows a commitment to professional development through reflection on performance and the identification of personal learning needs.  3. Addresses learning needs and demonstrates the application of these in future practice.  4. Personally, participates in audits and quality improvement activities and uses these to evaluate and suggest improvements in personal and practice performance.  5. Engages in learning event reviews, in a timely and effective manner, and learns from them as a team- based exercise.  6. Identifies learning objectives and uses teaching methods appropriate to these.  7. Assists in making assessments of learners where appropriate.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Organisation, management and leadership') {
                                                                              return '1. Uses the primary care organisational systems routinely and appropriately in patient care for acute problems, chronic disease and health promotion. This includes the use of computerised information management and technology (IM&T).  2. Uses the computer during consultations whilst maintaining rapport with the patient to produce records that are succinct, comprehensive, appropriately coded and understandable.  3. Is consistently well organised with due consideration for colleagues as well as patients. Demonstrates effective: time-management, hand-over skills, prioritisation, delegation.  4. Helps to support change in the organisation. This may include making constructive suggestions.  5. Responds positively when services are under pressure in a responsible and considered way.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Practising holistically, promoting health and safeguarding') {
                                                                              return '1. Demonstrates understanding of the patient in relation to their socio-economic and cultural background. The doctor uses this understanding to inform discussion and to generate practical suggestions for the management of the patient.  2. Recognises the impact of the problem on the patient, their family and/or carers.  3. Utilises appropriate support agencies (including primary health care team members) targeted to the needs of the patient and/or their family and carers.  4. Demonstrates the skills and assertiveness to challenge unhelpful health beliefs or behaviours, whilst maintaining a continuing and productive relationship.  5. Demonstrates appropriate responses to adult and child safeguarding concerns including ensuring information is shared/referrals made appropriately. Practises in a manner that seeks to reduce the risk of abuse, harm or neglect.';
                                                                            } else if (_model.dropDownCap3Value ==
                                                                                'Community orientation') {
                                                                              return '1. Demonstrates understanding of how the characteristics of the local population shapes the provision of care in the setting in which the doctor is working.  2. Shows how this understanding has informed referral practices they have utilised for their patients. This could include formal referral to a service or directing patients to other local resources.  3. Demonstrates how they have adapted their own clinical practice to take into account the local resources, for example in referrals, cost-effective prescribing and following local protocols.  4. Demonstrates how local resources have been used to enhance patient care.';
                                                                            } else {
                                                                              return 'Not set ';
                                                                            }
                                                                          }()}${_model.closingPromptSD1to3}${_model.capability3Extra}';
                                                                        safeSetState(
                                                                            () {});
                                                                      }

                                                                      if (FFAppState().ClinicalCase !=
                                                                              '') {
                                                                        if (_model.dropDownCap3Value !=
                                                                                null &&
                                                                            _model.dropDownCap3Value !=
                                                                                '') {
                                                                          logFirebaseEvent(
                                                                              'Button_backend_call');
                                                                          _model.aPI4result3single3 =
                                                                              await CallOpenAICall.call(
                                                                            prompt:
                                                                                functions.escapenewline(FFAppState().prompt3),
                                                                          );

                                                                          if ((_model.aPI4result3single3?.succeeded ??
                                                                              true)) {
                                                                            logFirebaseEvent('Button_update_app_state');
                                                                            FFAppState().Capability3Output =
                                                                                getJsonField(
                                                                              (_model.aPI4result3single3?.jsonBody ?? ''),
                                                                              r'''$.choices[:].message.content''',
                                                                            ).toString();
                                                                            safeSetState(() {});
                                                                            logFirebaseEvent('Button_set_form_field');
                                                                            safeSetState(() {
                                                                              _model.capability3OutputTextController?.text = getJsonField(
                                                                                (_model.aPI4result3single3?.jsonBody ?? ''),
                                                                                r'''$.choices[:].message.content''',
                                                                              ).toString();
                                                                            });
                                                                          } else {
                                                                            logFirebaseEvent('Button_show_snack_bar');
                                                                            ScaffoldMessenger.of(context).showSnackBar(
                                                                              SnackBar(
                                                                                content: Text(
                                                                                  'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                                  style: TextStyle(
                                                                                    color: FlutterFlowTheme.of(context).primaryText,
                                                                                  ),
                                                                                ),
                                                                                duration: Duration(milliseconds: 4000),
                                                                                backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                              ),
                                                                            );
                                                                          }

                                                                          logFirebaseEvent(
                                                                              'Button_backend_call');

                                                                          var reflectionsRecordReference = ReflectionsRecord
                                                                              .collection
                                                                              .doc();
                                                                          await reflectionsRecordReference
                                                                              .set(createReflectionsRecordData(
                                                                            clinicalCase:
                                                                                FFAppState().ClinicalCase,
                                                                            capability3:
                                                                                FFAppState().Capability3,
                                                                            capability3Output:
                                                                                FFAppState().Capability3Output,
                                                                            dateCreated:
                                                                                getCurrentTimestamp,
                                                                            name:
                                                                                currentUserDisplayName,
                                                                            dataNote:
                                                                                'Single',
                                                                          ));
                                                                          _model.reflectionoutputhidden4single3 = ReflectionsRecord.getDocumentFromData(
                                                                              createReflectionsRecordData(
                                                                                clinicalCase: FFAppState().ClinicalCase,
                                                                                capability3: FFAppState().Capability3,
                                                                                capability3Output: FFAppState().Capability3Output,
                                                                                dateCreated: getCurrentTimestamp,
                                                                                name: currentUserDisplayName,
                                                                                dataNote: 'Single',
                                                                              ),
                                                                              reflectionsRecordReference);
                                                                        } else {
                                                                          logFirebaseEvent(
                                                                              'Button_show_snack_bar');
                                                                          ScaffoldMessenger.of(context)
                                                                              .showSnackBar(
                                                                            SnackBar(
                                                                              content: Text(
                                                                                'Please select a capability',
                                                                                style: TextStyle(
                                                                                  color: FlutterFlowTheme.of(context).primaryText,
                                                                                ),
                                                                              ),
                                                                              duration: Duration(milliseconds: 4000),
                                                                              backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                            ),
                                                                          );
                                                                        }
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_show_snack_bar');
                                                                        ScaffoldMessenger.of(context)
                                                                            .showSnackBar(
                                                                          SnackBar(
                                                                            content:
                                                                                Text(
                                                                              'Please enter a clinical case',
                                                                              style: TextStyle(
                                                                                color: FlutterFlowTheme.of(context).primaryText,
                                                                              ),
                                                                            ),
                                                                            duration:
                                                                                Duration(milliseconds: 1000),
                                                                            backgroundColor:
                                                                                FlutterFlowTheme.of(context).secondary,
                                                                          ),
                                                                        );
                                                                      }
                                                                    } else {
                                                                      logFirebaseEvent(
                                                                          'Button_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'Clinical case too long! Enter a case with up to 80 words',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 4000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                      logFirebaseEvent(
                                                                          'Button_update_app_state');
                                                                      FFAppState()
                                                                              .ClinicalCase =
                                                                          _model
                                                                              .clinicalCaseTextController
                                                                              .text;
                                                                      FFAppState()
                                                                              .Capability1 =
                                                                          _model
                                                                              .dropDownCap1Value!;
                                                                      FFAppState()
                                                                              .Capability2 =
                                                                          _model
                                                                              .dropDownCap2Value!;
                                                                      FFAppState()
                                                                              .Capability3 =
                                                                          _model
                                                                              .dropDownCap3Value!;
                                                                      safeSetState(
                                                                          () {});
                                                                    }
                                                                  } else {
                                                                    logFirebaseEvent(
                                                                        'Button_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'Subscribe to use iReflect!',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 4000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }

                                                                  safeSetState(
                                                                      () {});
                                                                },
                                                                text: 'Go',
                                                                options:
                                                                    FFButtonOptions(
                                                                  height: 22.0,
                                                                  padding: EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          24.0,
                                                                          0.0,
                                                                          24.0,
                                                                          0.0),
                                                                  iconPadding: EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          0.0,
                                                                          0.0,
                                                                          0.0,
                                                                          0.0),
                                                                  color: FlutterFlowTheme.of(
                                                                          context)
                                                                      .primary,
                                                                  textStyle: FlutterFlowTheme.of(
                                                                          context)
                                                                      .titleSmall
                                                                      .override(
                                                                        fontFamily:
                                                                            FlutterFlowTheme.of(context).titleSmallFamily,
                                                                        color: Colors
                                                                            .white,
                                                                        letterSpacing:
                                                                            0.0,
                                                                        useGoogleFonts:
                                                                            GoogleFonts.asMap().containsKey(FlutterFlowTheme.of(context).titleSmallFamily),
                                                                      ),
                                                                  elevation:
                                                                      3.0,
                                                                  borderSide:
                                                                      BorderSide(
                                                                    color: Colors
                                                                        .transparent,
                                                                    width: 1.0,
                                                                  ),
                                                                  borderRadius:
                                                                      BorderRadius
                                                                          .circular(
                                                                              8.0),
                                                                ),
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ),
                                                ],
                                              ),
                                              Padding(
                                                padding: EdgeInsetsDirectional
                                                    .fromSTEB(
                                                        0.0, 5.0, 0.0, 0.0),
                                                child: Text(
                                                  valueOrDefault<String>(
                                                    FFAppState().Capability3,
                                                    'Select a capability',
                                                  ),
                                                  textAlign: TextAlign.center,
                                                  style: FlutterFlowTheme.of(
                                                          context)
                                                      .titleSmall
                                                      .override(
                                                        fontFamily:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .titleSmallFamily,
                                                        color:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .primary,
                                                        letterSpacing: 0.0,
                                                        useGoogleFonts: GoogleFonts
                                                                .asMap()
                                                            .containsKey(
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .titleSmallFamily),
                                                      ),
                                                ),
                                              ),
                                              TextFormField(
                                                controller: _model
                                                    .capability3OutputTextController,
                                                focusNode: _model
                                                    .capability3OutputFocusNode,
                                                autofocus: true,
                                                obscureText: false,
                                                decoration: InputDecoration(
                                                  hintStyle:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .bodySmall
                                                          .override(
                                                            fontFamily:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodySmallFamily,
                                                            color: _model
                                                                    .mouseRegionCapability3Hovered
                                                                ? FlutterFlowTheme.of(
                                                                        context)
                                                                    .primary
                                                                : FlutterFlowTheme.of(
                                                                        context)
                                                                    .secondaryBackground,
                                                            letterSpacing: 0.0,
                                                            useGoogleFonts: GoogleFonts
                                                                    .asMap()
                                                                .containsKey(
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .bodySmallFamily),
                                                          ),
                                                  enabledBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  focusedBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  errorBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  focusedErrorBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                ),
                                                style:
                                                    FlutterFlowTheme.of(context)
                                                        .bodyMedium
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodyMediumFamily,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily),
                                                        ),
                                                maxLines: null,
                                                validator: _model
                                                    .capability3OutputTextControllerValidator
                                                    .asValidator(context),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ).animateOnPageLoad(animationsMap[
                                        'containerOnPageLoadAnimation9']!),
                                  ),
                                  onEnter: ((event) async {
                                    safeSetState(() => _model
                                        .mouseRegionCapability3Hovered = true);
                                  }),
                                  onExit: ((event) async {
                                    safeSetState(() => _model
                                        .mouseRegionCapability3Hovered = false);
                                  }),
                                ),
                              ],
                            ),
                            Wrap(
                              spacing: 0.0,
                              runSpacing: 0.0,
                              alignment: WrapAlignment.start,
                              crossAxisAlignment: WrapCrossAlignment.start,
                              direction: Axis.horizontal,
                              runAlignment: WrapAlignment.start,
                              verticalDirection: VerticalDirection.down,
                              clipBehavior: Clip.none,
                              children: [
                                MouseRegion(
                                  opaque: false,
                                  cursor:
                                      MouseCursor.defer ?? MouseCursor.defer,
                                  child: Padding(
                                    padding: EdgeInsetsDirectional.fromSTEB(
                                        20.0, 10.0, 10.0, 10.0),
                                    child: Container(
                                      width: 570.0,
                                      height: 200.0,
                                      decoration: BoxDecoration(
                                        color: FlutterFlowTheme.of(context)
                                            .secondaryBackground,
                                        boxShadow: [
                                          BoxShadow(
                                            blurRadius: 4.0,
                                            color: Color(0x33000000),
                                            offset: Offset(
                                              0.0,
                                              2.0,
                                            ),
                                          )
                                        ],
                                        borderRadius:
                                            BorderRadius.circular(10.0),
                                        border: Border.all(
                                          color: FlutterFlowTheme.of(context)
                                              .accent3,
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(10.0),
                                        child: SingleChildScrollView(
                                          child: Column(
                                            mainAxisSize: MainAxisSize.max,
                                            children: [
                                              Row(
                                                mainAxisSize: MainAxisSize.max,
                                                mainAxisAlignment:
                                                    MainAxisAlignment.center,
                                                children: [
                                                  Container(
                                                    width: 320.0,
                                                    height: 40.0,
                                                    decoration: BoxDecoration(
                                                      color: FlutterFlowTheme
                                                              .of(context)
                                                          .primaryBackground,
                                                      boxShadow: [
                                                        BoxShadow(
                                                          blurRadius: 4.0,
                                                          color:
                                                              Color(0x33000000),
                                                          offset: Offset(
                                                            0.0,
                                                            2.0,
                                                          ),
                                                        )
                                                      ],
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              10.0),
                                                    ),
                                                    alignment:
                                                        AlignmentDirectional(
                                                            0.0, 0.0),
                                                    child: Text(
                                                      'Reflection: what will I maintain, improve or stop?',
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                    ),
                                                  ),
                                                  if ((_model.mouseRegionReflectionHovered ==
                                                          true) &&
                                                      responsiveVisibility(
                                                        context: context,
                                                        phone: false,
                                                        tablet: false,
                                                      ))
                                                    Padding(
                                                      padding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  10.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0),
                                                      child: Container(
                                                        width: 130.0,
                                                        height: 50.0,
                                                        decoration:
                                                            BoxDecoration(
                                                          color: FlutterFlowTheme
                                                                  .of(context)
                                                              .secondaryBackground,
                                                          boxShadow: [
                                                            BoxShadow(
                                                              blurRadius: 4.0,
                                                              color: Color(
                                                                  0x33000000),
                                                              offset: Offset(
                                                                0.0,
                                                                2.0,
                                                              ),
                                                            )
                                                          ],
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(
                                                                      10.0),
                                                        ),
                                                        child: Column(
                                                          mainAxisSize:
                                                              MainAxisSize.max,
                                                          children: [
                                                            Text(
                                                              'Run this capability:',
                                                              style: FlutterFlowTheme
                                                                      .of(context)
                                                                  .bodyMedium
                                                                  .override(
                                                                    fontFamily:
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily,
                                                                    letterSpacing:
                                                                        0.0,
                                                                    useGoogleFonts: GoogleFonts
                                                                            .asMap()
                                                                        .containsKey(
                                                                            FlutterFlowTheme.of(context).bodyMediumFamily),
                                                                  ),
                                                            ),
                                                            Padding(
                                                              padding:
                                                                  EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          0.0,
                                                                          5.0,
                                                                          0.0,
                                                                          0.0),
                                                              child:
                                                                  FFButtonWidget(
                                                                onPressed:
                                                                    () async {
                                                                  logFirebaseEvent(
                                                                      'REFLECT_GP_TRAINEE_PAGE_GO_BTN_ON_TAP');
                                                                  if ((valueOrDefault<bool>(
                                                                              currentUserDocument
                                                                                  ?.activeMembership,
                                                                              false) ==
                                                                          true) ||
                                                                      ((valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') !=
                                                                                  '') &&
                                                                          ((valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') == 'active') ||
                                                                              (valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') == 'trialing')))) {
                                                                    if (functions.wordsLessThan(_model
                                                                            .clinicalCaseTextController
                                                                            .text) ==
                                                                        true) {
                                                                      if (_model
                                                                              .choiceChipsValue ==
                                                                          'Clinical Case Reviews') {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().ClinicalCase = functions.replaceTabWithSpace(_model
                                                                            .clinicalCaseTextController
                                                                            .text)!;
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().prompt4 =
                                                                            '${_model.introPromptCCR}${functions.escapenewline(FFAppState().ClinicalCase)}${_model.closingPromptrReflectionCCR}';
                                                                        safeSetState(
                                                                            () {});
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().ClinicalCase = functions.replaceTabWithSpace(_model
                                                                            .keyLearningTextController
                                                                            .text)!;
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().prompt4 =
                                                                            '${_model.introPromptSD}${functions.escapenewline(FFAppState().ClinicalCase)}${_model.closingPromptReflectionSD}';
                                                                        safeSetState(
                                                                            () {});
                                                                      }

                                                                      if (FFAppState().ClinicalCase !=
                                                                              '') {
                                                                        logFirebaseEvent(
                                                                            'Button_backend_call');
                                                                        _model.aPI4result4single4 =
                                                                            await CallOpenAICall.call(
                                                                          prompt:
                                                                              functions.escapenewline(FFAppState().prompt4),
                                                                        );

                                                                        if ((_model.aPI4result4single4?.succeeded ??
                                                                            true)) {
                                                                          logFirebaseEvent(
                                                                              'Button_update_app_state');
                                                                          FFAppState().ReflectionOutput =
                                                                              getJsonField(
                                                                            (_model.aPI4result4single4?.jsonBody ??
                                                                                ''),
                                                                            r'''$.choices[:].message.content''',
                                                                          ).toString();
                                                                          safeSetState(
                                                                              () {});
                                                                          logFirebaseEvent(
                                                                              'Button_set_form_field');
                                                                          safeSetState(
                                                                              () {
                                                                            _model.reflectionOutputTextController?.text =
                                                                                getJsonField(
                                                                              (_model.aPI4result4single4?.jsonBody ?? ''),
                                                                              r'''$.choices[:].message.content''',
                                                                            ).toString();
                                                                          });
                                                                        } else {
                                                                          logFirebaseEvent(
                                                                              'Button_show_snack_bar');
                                                                          ScaffoldMessenger.of(context)
                                                                              .showSnackBar(
                                                                            SnackBar(
                                                                              content: Text(
                                                                                'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                                style: TextStyle(
                                                                                  color: FlutterFlowTheme.of(context).primaryText,
                                                                                ),
                                                                              ),
                                                                              duration: Duration(milliseconds: 4000),
                                                                              backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                            ),
                                                                          );
                                                                        }

                                                                        logFirebaseEvent(
                                                                            'Button_backend_call');

                                                                        var reflectionsRecordReference = ReflectionsRecord
                                                                            .collection
                                                                            .doc();
                                                                        await reflectionsRecordReference
                                                                            .set(createReflectionsRecordData(
                                                                          clinicalCase:
                                                                              FFAppState().ClinicalCase,
                                                                          reflectionOutput:
                                                                              FFAppState().ReflectionOutput,
                                                                          dateCreated:
                                                                              getCurrentTimestamp,
                                                                          name:
                                                                              currentUserDisplayName,
                                                                          dataNote:
                                                                              'Single',
                                                                        ));
                                                                        _model.reflectionoutputhidden4single4 = ReflectionsRecord.getDocumentFromData(
                                                                            createReflectionsRecordData(
                                                                              clinicalCase: FFAppState().ClinicalCase,
                                                                              reflectionOutput: FFAppState().ReflectionOutput,
                                                                              dateCreated: getCurrentTimestamp,
                                                                              name: currentUserDisplayName,
                                                                              dataNote: 'Single',
                                                                            ),
                                                                            reflectionsRecordReference);
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_show_snack_bar');
                                                                        ScaffoldMessenger.of(context)
                                                                            .showSnackBar(
                                                                          SnackBar(
                                                                            content:
                                                                                Text(
                                                                              'Please enter a clinical case',
                                                                              style: TextStyle(
                                                                                color: FlutterFlowTheme.of(context).primaryText,
                                                                              ),
                                                                            ),
                                                                            duration:
                                                                                Duration(milliseconds: 1000),
                                                                            backgroundColor:
                                                                                FlutterFlowTheme.of(context).secondary,
                                                                          ),
                                                                        );
                                                                      }
                                                                    } else {
                                                                      logFirebaseEvent(
                                                                          'Button_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'Clinical case too long! Enter a case with up to 80 words',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 4000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                      logFirebaseEvent(
                                                                          'Button_update_app_state');
                                                                      FFAppState()
                                                                              .ClinicalCase =
                                                                          _model
                                                                              .clinicalCaseTextController
                                                                              .text;
                                                                      FFAppState()
                                                                              .Capability1 =
                                                                          _model
                                                                              .dropDownCap1Value!;
                                                                      FFAppState()
                                                                              .Capability2 =
                                                                          _model
                                                                              .dropDownCap2Value!;
                                                                      FFAppState()
                                                                              .Capability3 =
                                                                          _model
                                                                              .dropDownCap3Value!;
                                                                      safeSetState(
                                                                          () {});
                                                                    }
                                                                  } else {
                                                                    logFirebaseEvent(
                                                                        'Button_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'Subscribe to use iReflect!',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 4000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }

                                                                  safeSetState(
                                                                      () {});
                                                                },
                                                                text: 'Go',
                                                                options:
                                                                    FFButtonOptions(
                                                                  height: 22.0,
                                                                  padding: EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          24.0,
                                                                          0.0,
                                                                          24.0,
                                                                          0.0),
                                                                  iconPadding: EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          0.0,
                                                                          0.0,
                                                                          0.0,
                                                                          0.0),
                                                                  color: FlutterFlowTheme.of(
                                                                          context)
                                                                      .primary,
                                                                  textStyle: FlutterFlowTheme.of(
                                                                          context)
                                                                      .titleSmall
                                                                      .override(
                                                                        fontFamily:
                                                                            FlutterFlowTheme.of(context).titleSmallFamily,
                                                                        color: Colors
                                                                            .white,
                                                                        letterSpacing:
                                                                            0.0,
                                                                        useGoogleFonts:
                                                                            GoogleFonts.asMap().containsKey(FlutterFlowTheme.of(context).titleSmallFamily),
                                                                      ),
                                                                  elevation:
                                                                      3.0,
                                                                  borderSide:
                                                                      BorderSide(
                                                                    color: Colors
                                                                        .transparent,
                                                                    width: 1.0,
                                                                  ),
                                                                  borderRadius:
                                                                      BorderRadius
                                                                          .circular(
                                                                              8.0),
                                                                ),
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ),
                                                ],
                                              ),
                                              TextFormField(
                                                controller: _model
                                                    .reflectionOutputTextController,
                                                focusNode: _model
                                                    .reflectionOutputFocusNode,
                                                autofocus: true,
                                                obscureText: false,
                                                decoration: InputDecoration(
                                                  hintText:
                                                      'Your response will appear here. Pick one or two questions to reflect on!',
                                                  hintStyle:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .bodySmall
                                                          .override(
                                                            fontFamily:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodySmallFamily,
                                                            color: _model
                                                                    .mouseRegionReflectionHovered
                                                                ? FlutterFlowTheme.of(
                                                                        context)
                                                                    .primary
                                                                : FlutterFlowTheme.of(
                                                                        context)
                                                                    .secondaryBackground,
                                                            letterSpacing: 0.0,
                                                            useGoogleFonts: GoogleFonts
                                                                    .asMap()
                                                                .containsKey(
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .bodySmallFamily),
                                                          ),
                                                  enabledBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  focusedBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  errorBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  focusedErrorBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                ),
                                                style:
                                                    FlutterFlowTheme.of(context)
                                                        .bodyMedium
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodyMediumFamily,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily),
                                                        ),
                                                maxLines: null,
                                                validator: _model
                                                    .reflectionOutputTextControllerValidator
                                                    .asValidator(context),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ).animateOnPageLoad(animationsMap[
                                        'containerOnPageLoadAnimation10']!),
                                  ),
                                  onEnter: ((event) async {
                                    safeSetState(() => _model
                                        .mouseRegionReflectionHovered = true);
                                  }),
                                  onExit: ((event) async {
                                    safeSetState(() => _model
                                        .mouseRegionReflectionHovered = false);
                                  }),
                                ),
                                MouseRegion(
                                  opaque: false,
                                  cursor:
                                      MouseCursor.defer ?? MouseCursor.defer,
                                  child: Padding(
                                    padding: EdgeInsets.all(10.0),
                                    child: Container(
                                      width: 570.0,
                                      height: 200.0,
                                      decoration: BoxDecoration(
                                        color: FlutterFlowTheme.of(context)
                                            .secondaryBackground,
                                        boxShadow: [
                                          BoxShadow(
                                            blurRadius: 4.0,
                                            color: Color(0x33000000),
                                            offset: Offset(
                                              0.0,
                                              2.0,
                                            ),
                                          )
                                        ],
                                        borderRadius:
                                            BorderRadius.circular(10.0),
                                        border: Border.all(
                                          color: FlutterFlowTheme.of(context)
                                              .accent3,
                                        ),
                                      ),
                                      child: Padding(
                                        padding: EdgeInsets.all(10.0),
                                        child: SingleChildScrollView(
                                          child: Column(
                                            mainAxisSize: MainAxisSize.max,
                                            children: [
                                              Row(
                                                mainAxisSize: MainAxisSize.max,
                                                mainAxisAlignment:
                                                    MainAxisAlignment.center,
                                                children: [
                                                  Container(
                                                    width: 300.0,
                                                    height: 40.0,
                                                    decoration: BoxDecoration(
                                                      color: FlutterFlowTheme
                                                              .of(context)
                                                          .primaryBackground,
                                                      boxShadow: [
                                                        BoxShadow(
                                                          blurRadius: 4.0,
                                                          color:
                                                              Color(0x33000000),
                                                          offset: Offset(
                                                            0.0,
                                                            2.0,
                                                          ),
                                                        )
                                                      ],
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              10.0),
                                                    ),
                                                    alignment:
                                                        AlignmentDirectional(
                                                            0.0, 0.0),
                                                    child: Text(
                                                      'Learning needs identified from this event',
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                    ),
                                                  ),
                                                  if ((_model.mouseRegionLearningHovered ==
                                                          true) &&
                                                      responsiveVisibility(
                                                        context: context,
                                                        phone: false,
                                                        tablet: false,
                                                      ))
                                                    Padding(
                                                      padding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  10.0,
                                                                  0.0,
                                                                  0.0,
                                                                  0.0),
                                                      child: Container(
                                                        width: 130.0,
                                                        height: 50.0,
                                                        decoration:
                                                            BoxDecoration(
                                                          color: FlutterFlowTheme
                                                                  .of(context)
                                                              .secondaryBackground,
                                                          boxShadow: [
                                                            BoxShadow(
                                                              blurRadius: 4.0,
                                                              color: Color(
                                                                  0x33000000),
                                                              offset: Offset(
                                                                0.0,
                                                                2.0,
                                                              ),
                                                            )
                                                          ],
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(
                                                                      10.0),
                                                        ),
                                                        child: Column(
                                                          mainAxisSize:
                                                              MainAxisSize.max,
                                                          children: [
                                                            Text(
                                                              'Run this capability:',
                                                              style: FlutterFlowTheme
                                                                      .of(context)
                                                                  .bodyMedium
                                                                  .override(
                                                                    fontFamily:
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily,
                                                                    letterSpacing:
                                                                        0.0,
                                                                    useGoogleFonts: GoogleFonts
                                                                            .asMap()
                                                                        .containsKey(
                                                                            FlutterFlowTheme.of(context).bodyMediumFamily),
                                                                  ),
                                                            ),
                                                            Padding(
                                                              padding:
                                                                  EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          0.0,
                                                                          5.0,
                                                                          0.0,
                                                                          0.0),
                                                              child:
                                                                  FFButtonWidget(
                                                                onPressed:
                                                                    () async {
                                                                  logFirebaseEvent(
                                                                      'REFLECT_GP_TRAINEE_PAGE_GO_BTN_ON_TAP');
                                                                  if ((valueOrDefault<bool>(
                                                                              currentUserDocument
                                                                                  ?.activeMembership,
                                                                              false) ==
                                                                          true) ||
                                                                      ((valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') !=
                                                                                  '') &&
                                                                          ((valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') == 'active') ||
                                                                              (valueOrDefault(currentUserDocument?.stripeSubscriptionStatus, '') == 'trialing')))) {
                                                                    if (functions.wordsLessThan(_model
                                                                            .clinicalCaseTextController
                                                                            .text) ==
                                                                        true) {
                                                                      if (_model
                                                                              .choiceChipsValue ==
                                                                          'Clinical Case Reviews') {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().ClinicalCase = functions.replaceTabWithSpace(_model
                                                                            .clinicalCaseTextController
                                                                            .text)!;
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().prompt5 =
                                                                            '${_model.introPromptCCR}${functions.escapenewline(FFAppState().ClinicalCase)}${_model.closingPromptLearningCCR}';
                                                                        safeSetState(
                                                                            () {});
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().ClinicalCase = functions.replaceTabWithSpace(_model
                                                                            .keyLearningTextController
                                                                            .text)!;
                                                                        safeSetState(
                                                                            () {});
                                                                        logFirebaseEvent(
                                                                            'Button_update_app_state');
                                                                        FFAppState().prompt5 =
                                                                            '${_model.introPromptSD}${functions.escapenewline(FFAppState().ClinicalCase)}${_model.closingPromptLearningSD}';
                                                                        safeSetState(
                                                                            () {});
                                                                      }

                                                                      if (FFAppState().ClinicalCase !=
                                                                              '') {
                                                                        logFirebaseEvent(
                                                                            'Button_backend_call');
                                                                        _model.aPI4result5single5 =
                                                                            await CallOpenAICall.call(
                                                                          prompt:
                                                                              functions.escapenewline(FFAppState().prompt5),
                                                                        );

                                                                        if ((_model.aPI4result5single5?.succeeded ??
                                                                            true)) {
                                                                          logFirebaseEvent(
                                                                              'Button_update_app_state');
                                                                          FFAppState().LearningOutput =
                                                                              getJsonField(
                                                                            (_model.aPI4result5single5?.jsonBody ??
                                                                                ''),
                                                                            r'''$.choices[:].message.content''',
                                                                          ).toString();
                                                                          safeSetState(
                                                                              () {});
                                                                          logFirebaseEvent(
                                                                              'Button_set_form_field');
                                                                          safeSetState(
                                                                              () {
                                                                            _model.learningOutputTextController?.text =
                                                                                getJsonField(
                                                                              (_model.aPI4result5single5?.jsonBody ?? ''),
                                                                              r'''$.choices[:].message.content''',
                                                                            ).toString();
                                                                          });
                                                                        } else {
                                                                          logFirebaseEvent(
                                                                              'Button_show_snack_bar');
                                                                          ScaffoldMessenger.of(context)
                                                                              .showSnackBar(
                                                                            SnackBar(
                                                                              content: Text(
                                                                                'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                                style: TextStyle(
                                                                                  color: FlutterFlowTheme.of(context).primaryText,
                                                                                ),
                                                                              ),
                                                                              duration: Duration(milliseconds: 4000),
                                                                              backgroundColor: FlutterFlowTheme.of(context).secondary,
                                                                            ),
                                                                          );
                                                                        }

                                                                        logFirebaseEvent(
                                                                            'Button_backend_call');

                                                                        var reflectionsRecordReference = ReflectionsRecord
                                                                            .collection
                                                                            .doc();
                                                                        await reflectionsRecordReference
                                                                            .set(createReflectionsRecordData(
                                                                          clinicalCase:
                                                                              FFAppState().ClinicalCase,
                                                                          learningOutput:
                                                                              FFAppState().LearningOutput,
                                                                          dateCreated:
                                                                              getCurrentTimestamp,
                                                                          name:
                                                                              currentUserDisplayName,
                                                                          dataNote:
                                                                              'Single',
                                                                        ));
                                                                        _model.reflectionoutputhidden4single5 = ReflectionsRecord.getDocumentFromData(
                                                                            createReflectionsRecordData(
                                                                              clinicalCase: FFAppState().ClinicalCase,
                                                                              learningOutput: FFAppState().LearningOutput,
                                                                              dateCreated: getCurrentTimestamp,
                                                                              name: currentUserDisplayName,
                                                                              dataNote: 'Single',
                                                                            ),
                                                                            reflectionsRecordReference);
                                                                      } else {
                                                                        logFirebaseEvent(
                                                                            'Button_show_snack_bar');
                                                                        ScaffoldMessenger.of(context)
                                                                            .showSnackBar(
                                                                          SnackBar(
                                                                            content:
                                                                                Text(
                                                                              'Please enter a clinical case',
                                                                              style: TextStyle(
                                                                                color: FlutterFlowTheme.of(context).primaryText,
                                                                              ),
                                                                            ),
                                                                            duration:
                                                                                Duration(milliseconds: 1000),
                                                                            backgroundColor:
                                                                                FlutterFlowTheme.of(context).secondary,
                                                                          ),
                                                                        );
                                                                      }
                                                                    } else {
                                                                      logFirebaseEvent(
                                                                          'Button_show_snack_bar');
                                                                      ScaffoldMessenger.of(
                                                                              context)
                                                                          .showSnackBar(
                                                                        SnackBar(
                                                                          content:
                                                                              Text(
                                                                            'Clinical case too long! Enter a case with up to 80 words',
                                                                            style:
                                                                                TextStyle(
                                                                              color: FlutterFlowTheme.of(context).primaryText,
                                                                            ),
                                                                          ),
                                                                          duration:
                                                                              Duration(milliseconds: 4000),
                                                                          backgroundColor:
                                                                              FlutterFlowTheme.of(context).secondary,
                                                                        ),
                                                                      );
                                                                      logFirebaseEvent(
                                                                          'Button_update_app_state');
                                                                      FFAppState()
                                                                              .ClinicalCase =
                                                                          _model
                                                                              .clinicalCaseTextController
                                                                              .text;
                                                                      FFAppState()
                                                                              .Capability1 =
                                                                          _model
                                                                              .dropDownCap1Value!;
                                                                      FFAppState()
                                                                              .Capability2 =
                                                                          _model
                                                                              .dropDownCap2Value!;
                                                                      FFAppState()
                                                                              .Capability3 =
                                                                          _model
                                                                              .dropDownCap3Value!;
                                                                      safeSetState(
                                                                          () {});
                                                                    }
                                                                  } else {
                                                                    logFirebaseEvent(
                                                                        'Button_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'Subscribe to use iReflect!',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 4000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                  }

                                                                  safeSetState(
                                                                      () {});
                                                                },
                                                                text: 'Go',
                                                                options:
                                                                    FFButtonOptions(
                                                                  height: 22.0,
                                                                  padding: EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          24.0,
                                                                          0.0,
                                                                          24.0,
                                                                          0.0),
                                                                  iconPadding: EdgeInsetsDirectional
                                                                      .fromSTEB(
                                                                          0.0,
                                                                          0.0,
                                                                          0.0,
                                                                          0.0),
                                                                  color: FlutterFlowTheme.of(
                                                                          context)
                                                                      .primary,
                                                                  textStyle: FlutterFlowTheme.of(
                                                                          context)
                                                                      .titleSmall
                                                                      .override(
                                                                        fontFamily:
                                                                            FlutterFlowTheme.of(context).titleSmallFamily,
                                                                        color: Colors
                                                                            .white,
                                                                        letterSpacing:
                                                                            0.0,
                                                                        useGoogleFonts:
                                                                            GoogleFonts.asMap().containsKey(FlutterFlowTheme.of(context).titleSmallFamily),
                                                                      ),
                                                                  elevation:
                                                                      3.0,
                                                                  borderSide:
                                                                      BorderSide(
                                                                    color: Colors
                                                                        .transparent,
                                                                    width: 1.0,
                                                                  ),
                                                                  borderRadius:
                                                                      BorderRadius
                                                                          .circular(
                                                                              8.0),
                                                                ),
                                                              ),
                                                            ),
                                                            FlutterFlowTimer(
                                                              initialTime: _model
                                                                  .timerInitialTimeMs,
                                                              getDisplayTime: (value) =>
                                                                  StopWatchTimer
                                                                      .getDisplayTime(
                                                                value,
                                                                hours: false,
                                                                milliSecond:
                                                                    false,
                                                              ),
                                                              controller: _model
                                                                  .timerController,
                                                              updateStateInterval:
                                                                  Duration(
                                                                      milliseconds:
                                                                          1000),
                                                              onChanged: (value,
                                                                  displayTime,
                                                                  shouldUpdate) {
                                                                _model.timerMilliseconds =
                                                                    value;
                                                                _model.timerValue =
                                                                    displayTime;
                                                                if (shouldUpdate)
                                                                  safeSetState(
                                                                      () {});
                                                              },
                                                              onEnded:
                                                                  () async {
                                                                logFirebaseEvent(
                                                                    'REFLECT_GP_TRAINEE_Timer_k0m9van1_ON_TIM');
                                                                if (valueOrDefault<
                                                                            bool>(
                                                                        currentUserDocument
                                                                            ?.activeMembership,
                                                                        false) ==
                                                                    true) {
                                                                  if (functions.wordsLessThan(_model
                                                                          .clinicalCaseTextController
                                                                          .text) !=
                                                                      true) {
                                                                    logFirebaseEvent(
                                                                        'Timer_show_snack_bar');
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                      SnackBar(
                                                                        content:
                                                                            Text(
                                                                          'Clinical case too long! Enter a case with up to 80 words',
                                                                          style:
                                                                              TextStyle(
                                                                            color:
                                                                                FlutterFlowTheme.of(context).primaryText,
                                                                          ),
                                                                        ),
                                                                        duration:
                                                                            Duration(milliseconds: 4000),
                                                                        backgroundColor:
                                                                            FlutterFlowTheme.of(context).secondary,
                                                                      ),
                                                                    );
                                                                    logFirebaseEvent(
                                                                        'Timer_update_app_state');
                                                                    FFAppState()
                                                                            .ClinicalCase =
                                                                        _model
                                                                            .clinicalCaseTextController
                                                                            .text;
                                                                    FFAppState()
                                                                            .Capability1 =
                                                                        _model
                                                                            .dropDownCap1Value!;
                                                                    FFAppState()
                                                                            .Capability2 =
                                                                        _model
                                                                            .dropDownCap2Value!;
                                                                    FFAppState()
                                                                            .Capability3 =
                                                                        _model
                                                                            .dropDownCap3Value!;
                                                                    safeSetState(
                                                                        () {});
                                                                  }
                                                                } else {
                                                                  logFirebaseEvent(
                                                                      'Timer_show_snack_bar');
                                                                  ScaffoldMessenger.of(
                                                                          context)
                                                                      .showSnackBar(
                                                                    SnackBar(
                                                                      content:
                                                                          Text(
                                                                        'Subscribe to use iReflect!',
                                                                        style:
                                                                            TextStyle(
                                                                          color:
                                                                              FlutterFlowTheme.of(context).primaryText,
                                                                        ),
                                                                      ),
                                                                      duration: Duration(
                                                                          milliseconds:
                                                                              4000),
                                                                      backgroundColor:
                                                                          FlutterFlowTheme.of(context)
                                                                              .secondary,
                                                                    ),
                                                                  );
                                                                }
                                                              },
                                                              textAlign:
                                                                  TextAlign
                                                                      .start,
                                                              style: FlutterFlowTheme
                                                                      .of(context)
                                                                  .headlineSmall
                                                                  .override(
                                                                    fontFamily:
                                                                        FlutterFlowTheme.of(context)
                                                                            .headlineSmallFamily,
                                                                    fontSize:
                                                                        1.0,
                                                                    letterSpacing:
                                                                        0.0,
                                                                    useGoogleFonts: GoogleFonts
                                                                            .asMap()
                                                                        .containsKey(
                                                                            FlutterFlowTheme.of(context).headlineSmallFamily),
                                                                  ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ),
                                                ],
                                              ),
                                              TextFormField(
                                                controller: _model
                                                    .learningOutputTextController,
                                                focusNode: _model
                                                    .learningOutputFocusNode,
                                                autofocus: true,
                                                obscureText: false,
                                                decoration: InputDecoration(
                                                  hintText:
                                                      'Your response will appear here. Pick one or two questions to reflect on!',
                                                  hintStyle:
                                                      FlutterFlowTheme.of(
                                                              context)
                                                          .bodySmall
                                                          .override(
                                                            fontFamily:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodySmallFamily,
                                                            color: _model
                                                                    .mouseRegionLearningHovered
                                                                ? FlutterFlowTheme.of(
                                                                        context)
                                                                    .primary
                                                                : FlutterFlowTheme.of(
                                                                        context)
                                                                    .secondaryBackground,
                                                            letterSpacing: 0.0,
                                                            useGoogleFonts: GoogleFonts
                                                                    .asMap()
                                                                .containsKey(
                                                                    FlutterFlowTheme.of(
                                                                            context)
                                                                        .bodySmallFamily),
                                                          ),
                                                  enabledBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  focusedBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  errorBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                  focusedErrorBorder:
                                                      UnderlineInputBorder(
                                                    borderSide: BorderSide(
                                                      color: Color(0x00000000),
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        const BorderRadius.only(
                                                      topLeft:
                                                          Radius.circular(4.0),
                                                      topRight:
                                                          Radius.circular(4.0),
                                                    ),
                                                  ),
                                                ),
                                                style:
                                                    FlutterFlowTheme.of(context)
                                                        .bodyMedium
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodyMediumFamily,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyMediumFamily),
                                                        ),
                                                maxLines: null,
                                                validator: _model
                                                    .learningOutputTextControllerValidator
                                                    .asValidator(context),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ).animateOnPageLoad(animationsMap[
                                        'containerOnPageLoadAnimation11']!),
                                  ),
                                  onEnter: ((event) async {
                                    safeSetState(() => _model
                                        .mouseRegionLearningHovered = true);
                                  }),
                                  onExit: ((event) async {
                                    safeSetState(() => _model
                                        .mouseRegionLearningHovered = false);
                                  }),
                                ),
                              ],
                            ),
                          ],
                        ),
                      if (_model.choiceChipsValue ==
                          'Personal Development Plans')
                        Column(
                          mainAxisSize: MainAxisSize.max,
                          children: [
                            Row(
                              mainAxisSize: MainAxisSize.max,
                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Column(
                                  mainAxisSize: MainAxisSize.max,
                                  children: [
                                    Row(
                                      mainAxisSize: MainAxisSize.max,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
                                      children: [
                                        Padding(
                                          padding:
                                              EdgeInsetsDirectional.fromSTEB(
                                                  20.0, 10.0, 10.0, 10.0),
                                          child: Container(
                                            width: 500.0,
                                            height: 210.0,
                                            decoration: BoxDecoration(
                                              color:
                                                  FlutterFlowTheme.of(context)
                                                      .secondaryBackground,
                                              boxShadow: [
                                                BoxShadow(
                                                  blurRadius: 4.0,
                                                  color: Color(0x33000000),
                                                  offset: Offset(
                                                    0.0,
                                                    2.0,
                                                  ),
                                                )
                                              ],
                                              borderRadius:
                                                  BorderRadius.circular(10.0),
                                              border: Border.all(
                                                color:
                                                    FlutterFlowTheme.of(context)
                                                        .accent3,
                                              ),
                                            ),
                                            child: Padding(
                                              padding: EdgeInsets.all(10.0),
                                              child: Column(
                                                mainAxisSize: MainAxisSize.max,
                                                mainAxisAlignment:
                                                    MainAxisAlignment
                                                        .spaceBetween,
                                                children: [
                                                  Row(
                                                    mainAxisSize:
                                                        MainAxisSize.max,
                                                    mainAxisAlignment:
                                                        MainAxisAlignment
                                                            .spaceEvenly,
                                                    children: [
                                                      Container(
                                                        width: 388.0,
                                                        decoration:
                                                            BoxDecoration(),
                                                        child: Text(
                                                          '1. What topics would you like your PDPs to be about?',
                                                          style: FlutterFlowTheme
                                                                  .of(context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                fontSize: 16.0,
                                                                letterSpacing:
                                                                    0.0,
                                                                fontWeight:
                                                                    FontWeight
                                                                        .w600,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                        ),
                                                      ),
                                                      FFButtonWidget(
                                                        onPressed: () async {
                                                          logFirebaseEvent(
                                                              'REFLECT_GP_TRAINEE_EXAMPLE_BTN_ON_TAP');
                                                          logFirebaseEvent(
                                                              'Button_update_page_state');
                                                          _model.pdpContext =
                                                              'I am a GPST1 in paediatrics and I would like to make a PDP about managing unwell children';
                                                          safeSetState(() {});
                                                          logFirebaseEvent(
                                                              'Button_set_form_field');
                                                          safeSetState(() {
                                                            _model.pDPTopicTextController
                                                                    ?.text =
                                                                _model
                                                                    .pdpContext!;
                                                          });
                                                        },
                                                        text: 'Example',
                                                        options:
                                                            FFButtonOptions(
                                                          height: 27.0,
                                                          padding:
                                                              EdgeInsetsDirectional
                                                                  .fromSTEB(
                                                                      5.0,
                                                                      0.0,
                                                                      5.0,
                                                                      0.0),
                                                          iconPadding:
                                                              EdgeInsetsDirectional
                                                                  .fromSTEB(
                                                                      0.0,
                                                                      0.0,
                                                                      0.0,
                                                                      0.0),
                                                          color: FlutterFlowTheme
                                                                  .of(context)
                                                              .primary,
                                                          textStyle:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .titleSmall
                                                                  .override(
                                                                    fontFamily:
                                                                        FlutterFlowTheme.of(context)
                                                                            .titleSmallFamily,
                                                                    color: Colors
                                                                        .white,
                                                                    fontSize:
                                                                        14.0,
                                                                    letterSpacing:
                                                                        0.0,
                                                                    useGoogleFonts: GoogleFonts
                                                                            .asMap()
                                                                        .containsKey(
                                                                            FlutterFlowTheme.of(context).titleSmallFamily),
                                                                  ),
                                                          elevation: 3.0,
                                                          borderSide:
                                                              BorderSide(
                                                            color: Colors
                                                                .transparent,
                                                            width: 1.0,
                                                          ),
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(
                                                                      8.0),
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                  Stack(
                                                    alignment:
                                                        AlignmentDirectional(
                                                            0.0, 1.0),
                                                    children: [
                                                      Padding(
                                                        padding:
                                                            EdgeInsetsDirectional
                                                                .fromSTEB(
                                                                    0.0,
                                                                    5.0,
                                                                    0.0,
                                                                    0.0),
                                                        child: TextFormField(
                                                          controller: _model
                                                              .pDPTopicTextController,
                                                          focusNode: _model
                                                              .pDPTopicFocusNode,
                                                          onChanged: (_) =>
                                                              EasyDebounce
                                                                  .debounce(
                                                            '_model.pDPTopicTextController',
                                                            Duration(
                                                                milliseconds:
                                                                    2000),
                                                            () async {
                                                              logFirebaseEvent(
                                                                  'REFLECT_GP_TRAINEE_PDPTopic_ON_TEXTFIELD');
                                                              logFirebaseEvent(
                                                                  'PDPTopic_update_app_state');
                                                              FFAppState()
                                                                      .ClinicalCase =
                                                                  _model
                                                                      .pDPTopicTextController
                                                                      .text;
                                                            },
                                                          ),
                                                          onFieldSubmitted:
                                                              (_) async {
                                                            logFirebaseEvent(
                                                                'REFLECT_GP_TRAINEE_PDPTopic_ON_TEXTFIELD');
                                                            logFirebaseEvent(
                                                                'PDPTopic_update_app_state');
                                                            FFAppState()
                                                                    .ClinicalCase =
                                                                functions.replaceTabWithSpace(
                                                                    _model
                                                                        .pDPTopicTextController
                                                                        .text)!;
                                                          },
                                                          autofocus: true,
                                                          textInputAction:
                                                              TextInputAction
                                                                  .done,
                                                          obscureText: false,
                                                          decoration:
                                                              InputDecoration(
                                                            hintStyle:
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodySmall
                                                                    .override(
                                                                      fontFamily:
                                                                          FlutterFlowTheme.of(context)
                                                                              .bodySmallFamily,
                                                                      color: _model.mouseRegionCaseHovered
                                                                          ? FlutterFlowTheme.of(context)
                                                                              .primary
                                                                          : FlutterFlowTheme.of(context)
                                                                              .secondaryBackground,
                                                                      letterSpacing:
                                                                          0.0,
                                                                      useGoogleFonts: GoogleFonts
                                                                              .asMap()
                                                                          .containsKey(
                                                                              FlutterFlowTheme.of(context).bodySmallFamily),
                                                                    ),
                                                            enabledBorder:
                                                                UnderlineInputBorder(
                                                              borderSide:
                                                                  BorderSide(
                                                                color: Color(
                                                                    0x00000000),
                                                                width: 1.0,
                                                              ),
                                                              borderRadius:
                                                                  const BorderRadius
                                                                      .only(
                                                                topLeft: Radius
                                                                    .circular(
                                                                        4.0),
                                                                topRight: Radius
                                                                    .circular(
                                                                        4.0),
                                                              ),
                                                            ),
                                                            focusedBorder:
                                                                UnderlineInputBorder(
                                                              borderSide:
                                                                  BorderSide(
                                                                color: Color(
                                                                    0x00000000),
                                                                width: 1.0,
                                                              ),
                                                              borderRadius:
                                                                  const BorderRadius
                                                                      .only(
                                                                topLeft: Radius
                                                                    .circular(
                                                                        4.0),
                                                                topRight: Radius
                                                                    .circular(
                                                                        4.0),
                                                              ),
                                                            ),
                                                            errorBorder:
                                                                UnderlineInputBorder(
                                                              borderSide:
                                                                  BorderSide(
                                                                color: Color(
                                                                    0x00000000),
                                                                width: 1.0,
                                                              ),
                                                              borderRadius:
                                                                  const BorderRadius
                                                                      .only(
                                                                topLeft: Radius
                                                                    .circular(
                                                                        4.0),
                                                                topRight: Radius
                                                                    .circular(
                                                                        4.0),
                                                              ),
                                                            ),
                                                            focusedErrorBorder:
                                                                UnderlineInputBorder(
                                                              borderSide:
                                                                  BorderSide(
                                                                color: Color(
                                                                    0x00000000),
                                                                width: 1.0,
                                                              ),
                                                              borderRadius:
                                                                  const BorderRadius
                                                                      .only(
                                                                topLeft: Radius
                                                                    .circular(
                                                                        4.0),
                                                                topRight: Radius
                                                                    .circular(
                                                                        4.0),
                                                              ),
                                                            ),
                                                            suffixIcon: _model
                                                                    .pDPTopicTextController!
                                                                    .text
                                                                    .isNotEmpty
                                                                ? InkWell(
                                                                    onTap:
                                                                        () async {
                                                                      _model
                                                                          .pDPTopicTextController
                                                                          ?.clear();
                                                                      logFirebaseEvent(
                                                                          'REFLECT_GP_TRAINEE_PDPTopic_ON_TEXTFIELD');
                                                                      logFirebaseEvent(
                                                                          'PDPTopic_update_app_state');
                                                                      FFAppState()
                                                                              .ClinicalCase =
                                                                          _model
                                                                              .pDPTopicTextController
                                                                              .text;
                                                                      safeSetState(
                                                                          () {});
                                                                    },
                                                                    child: Icon(
                                                                      Icons
                                                                          .clear,
                                                                      size:
                                                                          20.0,
                                                                    ),
                                                                  )
                                                                : null,
                                                          ),
                                                          style: FlutterFlowTheme
                                                                  .of(context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                          maxLines: 7,
                                                          validator: _model
                                                              .pDPTopicTextControllerValidator
                                                              .asValidator(
                                                                  context),
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ],
                                              ),
                                            ),
                                          ).animateOnPageLoad(animationsMap[
                                              'containerOnPageLoadAnimation12']!),
                                        ),
                                        if (widget.reflectionreference == null)
                                          Padding(
                                            padding: EdgeInsets.all(10.0),
                                            child: Container(
                                              width: 140.0,
                                              height: 210.0,
                                              decoration: BoxDecoration(
                                                color:
                                                    FlutterFlowTheme.of(context)
                                                        .secondaryBackground,
                                                boxShadow: [
                                                  BoxShadow(
                                                    blurRadius: 4.0,
                                                    color: Color(0x33000000),
                                                    offset: Offset(
                                                      0.0,
                                                      2.0,
                                                    ),
                                                  )
                                                ],
                                                borderRadius:
                                                    BorderRadius.circular(10.0),
                                                border: Border.all(
                                                  color: FlutterFlowTheme.of(
                                                          context)
                                                      .accent3,
                                                ),
                                              ),
                                              child: Padding(
                                                padding: EdgeInsets.all(10.0),
                                                child: Column(
                                                  mainAxisSize:
                                                      MainAxisSize.max,
                                                  children: [
                                                    Text(
                                                      '2. Press go!',
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                fontSize: 16.0,
                                                                letterSpacing:
                                                                    0.0,
                                                                fontWeight:
                                                                    FontWeight
                                                                        .w600,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                    ),
                                                    Padding(
                                                      padding:
                                                          EdgeInsetsDirectional
                                                              .fromSTEB(
                                                                  10.0,
                                                                  20.0,
                                                                  10.0,
                                                                  10.0),
                                                      child: FFButtonWidget(
                                                        onPressed: () async {
                                                          logFirebaseEvent(
                                                              'REFLECT_GP_TRAINEE_PAGE_Go_ON_TAP');
                                                          if ((valueOrDefault<
                                                                          bool>(
                                                                      currentUserDocument
                                                                          ?.activeMembership,
                                                                      false) ==
                                                                  true) ||
                                                              ((valueOrDefault(
                                                                              currentUserDocument
                                                                                  ?.stripeSubscriptionStatus,
                                                                              '') !=
                                                                          '') &&
                                                                  ((valueOrDefault(
                                                                              currentUserDocument
                                                                                  ?.stripeSubscriptionStatus,
                                                                              '') ==
                                                                          'active') ||
                                                                      (valueOrDefault(
                                                                              currentUserDocument?.stripeSubscriptionStatus,
                                                                              '') ==
                                                                          'trialing')))) {
                                                            if (_model.pDPTopicTextController
                                                                        .text !=
                                                                    '') {
                                                              logFirebaseEvent(
                                                                  'Go_update_app_state');
                                                              FFAppState()
                                                                      .pdpPromptContext =
                                                                  _model
                                                                      .pDPTopicTextController
                                                                      .text;
                                                              safeSetState(
                                                                  () {});
                                                              logFirebaseEvent(
                                                                  'Go_update_app_state');
                                                              FFAppState()
                                                                      .pdpFullPrompt =
                                                                  functions
                                                                      .escapenewline(
                                                                          '${FFAppState().pdpPrompt1} ${FFAppState().pdpPromptContext} ${FFAppState().pdpPrompt2}')!;
                                                              safeSetState(
                                                                  () {});
                                                              logFirebaseEvent(
                                                                  'Go_backend_call');
                                                              _model.pDPAPIResponse =
                                                                  await CallOpenAICall
                                                                      .call(
                                                                prompt: FFAppState()
                                                                    .pdpFullPrompt,
                                                              );

                                                              if ((_model
                                                                      .pDPAPIResponse
                                                                      ?.succeeded ??
                                                                  true)) {
                                                                logFirebaseEvent(
                                                                    'Go_set_form_field');
                                                                safeSetState(
                                                                    () {
                                                                  _model.pDPOutputTextController
                                                                          ?.text =
                                                                      getJsonField(
                                                                    (_model.pDPAPIResponse
                                                                            ?.jsonBody ??
                                                                        ''),
                                                                    r'''$.choices[:].message.content''',
                                                                  ).toString();
                                                                });
                                                              } else {
                                                                logFirebaseEvent(
                                                                    'Go_show_snack_bar');
                                                                ScaffoldMessenger.of(
                                                                        context)
                                                                    .showSnackBar(
                                                                  SnackBar(
                                                                    content:
                                                                        Text(
                                                                      'Something went wrong. Please email support@gpninja.co.uk if your issue does not resolve.',
                                                                      style:
                                                                          TextStyle(
                                                                        color: FlutterFlowTheme.of(context)
                                                                            .primaryText,
                                                                      ),
                                                                    ),
                                                                    duration: Duration(
                                                                        milliseconds:
                                                                            4000),
                                                                    backgroundColor:
                                                                        FlutterFlowTheme.of(context)
                                                                            .secondary,
                                                                  ),
                                                                );
                                                              }
                                                            } else {
                                                              logFirebaseEvent(
                                                                  'Go_show_snack_bar');
                                                              ScaffoldMessenger
                                                                      .of(context)
                                                                  .showSnackBar(
                                                                SnackBar(
                                                                  content: Text(
                                                                    'Make sure to fill in the first box to give context to your PDPs',
                                                                    style:
                                                                        TextStyle(
                                                                      color: FlutterFlowTheme.of(
                                                                              context)
                                                                          .primaryText,
                                                                    ),
                                                                  ),
                                                                  duration: Duration(
                                                                      milliseconds:
                                                                          4000),
                                                                  backgroundColor:
                                                                      FlutterFlowTheme.of(
                                                                              context)
                                                                          .secondary,
                                                                ),
                                                              );
                                                            }
                                                          } else {
                                                            logFirebaseEvent(
                                                                'Go_bottom_sheet');
                                                            await showModalBottomSheet(
                                                              isScrollControlled:
                                                                  true,
                                                              backgroundColor:
                                                                  Colors
                                                                      .transparent,
                                                              enableDrag: false,
                                                              context: context,
                                                              builder:
                                                                  (context) {
                                                                return WebViewAware(
                                                                  child:
                                                                      GestureDetector(
                                                                    onTap: () {
                                                                      FocusScope.of(
                                                                              context)
                                                                          .unfocus();
                                                                      FocusManager
                                                                          .instance
                                                                          .primaryFocus
                                                                          ?.unfocus();
                                                                    },
                                                                    child:
                                                                        Padding(
                                                                      padding: MediaQuery
                                                                          .viewInsetsOf(
                                                                              context),
                                                                      child:
                                                                          BottomSheetSubscribeReflectWidget(),
                                                                    ),
                                                                  ),
                                                                );
                                                              },
                                                            ).then((value) =>
                                                                safeSetState(
                                                                    () {}));
                                                          }

                                                          safeSetState(() {});
                                                        },
                                                        text: 'Go',
                                                        options:
                                                            FFButtonOptions(
                                                          width: 80.0,
                                                          height: 40.0,
                                                          padding:
                                                              EdgeInsetsDirectional
                                                                  .fromSTEB(
                                                                      0.0,
                                                                      0.0,
                                                                      0.0,
                                                                      0.0),
                                                          iconPadding:
                                                              EdgeInsetsDirectional
                                                                  .fromSTEB(
                                                                      0.0,
                                                                      0.0,
                                                                      0.0,
                                                                      0.0),
                                                          color: FlutterFlowTheme
                                                                  .of(context)
                                                              .primary,
                                                          textStyle:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .titleSmall
                                                                  .override(
                                                                    fontFamily:
                                                                        FlutterFlowTheme.of(context)
                                                                            .titleSmallFamily,
                                                                    color: Colors
                                                                        .white,
                                                                    letterSpacing:
                                                                        0.0,
                                                                    useGoogleFonts: GoogleFonts
                                                                            .asMap()
                                                                        .containsKey(
                                                                            FlutterFlowTheme.of(context).titleSmallFamily),
                                                                  ),
                                                          elevation: 3.0,
                                                          borderSide:
                                                              BorderSide(
                                                            color: Colors
                                                                .transparent,
                                                            width: 1.0,
                                                          ),
                                                          borderRadius:
                                                              BorderRadius
                                                                  .circular(
                                                                      8.0),
                                                        ),
                                                      ),
                                                    ),
                                                    Text(
                                                      'We\'ll get to work and suggest some PDPs for you!',
                                                      textAlign:
                                                          TextAlign.center,
                                                      style:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodyMedium
                                                              .override(
                                                                fontFamily: FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily,
                                                                color: FlutterFlowTheme.of(
                                                                        context)
                                                                    .secondaryText,
                                                                letterSpacing:
                                                                    0.0,
                                                                useGoogleFonts: GoogleFonts
                                                                        .asMap()
                                                                    .containsKey(
                                                                        FlutterFlowTheme.of(context)
                                                                            .bodyMediumFamily),
                                                              ),
                                                    ),
                                                  ],
                                                ),
                                              ),
                                            ).animateOnPageLoad(animationsMap[
                                                'containerOnPageLoadAnimation13']!),
                                          ),
                                      ],
                                    ),
                                    Padding(
                                      padding: EdgeInsetsDirectional.fromSTEB(
                                          0.0, 20.0, 0.0, 0.0),
                                      child: Container(
                                        width: 645.0,
                                        decoration: BoxDecoration(),
                                        child: Column(
                                          mainAxisSize: MainAxisSize.max,
                                          children: [
                                            Text(
                                              'What are PDPs?',
                                              style:
                                                  FlutterFlowTheme.of(context)
                                                      .headlineSmall
                                                      .override(
                                                        fontFamily:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .headlineSmallFamily,
                                                        letterSpacing: 0.0,
                                                        useGoogleFonts: GoogleFonts
                                                                .asMap()
                                                            .containsKey(
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .headlineSmallFamily),
                                                      ),
                                            ),
                                            Padding(
                                              padding: EdgeInsetsDirectional
                                                  .fromSTEB(
                                                      0.0, 20.0, 0.0, 0.0),
                                              child: Text(
                                                'Personal Development Plans (PDPs) are learning goals made at the start of each placement.\n\nTrainees are required to demonstrate they can assess their own learning needs, make a plan to address these needs, and then review their achievement of these needs.\n\nFor specific help and guidance on PDPs there are helpful guides on the RCGP and FourteenFish sites.\n',
                                                style:
                                                    FlutterFlowTheme.of(context)
                                                        .bodyLarge
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodyLargeFamily,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .bodyLargeFamily),
                                                        ),
                                              ),
                                            ),
                                            Row(
                                              mainAxisSize: MainAxisSize.max,
                                              mainAxisAlignment:
                                                  MainAxisAlignment.spaceEvenly,
                                              children: [
                                                FFButtonWidget(
                                                  onPressed: () async {
                                                    logFirebaseEvent(
                                                        'REFLECT_GP_TRAINEE_PAGE_RCGP_BTN_ON_TAP');
                                                    logFirebaseEvent(
                                                        'Button_launch_u_r_l');
                                                    await launchURL(
                                                        'https://www.rcgp.org.uk/mrcgp-exams/wpba/plans-reviews');
                                                  },
                                                  text: 'RCGP',
                                                  options: FFButtonOptions(
                                                    height: 40.0,
                                                    padding:
                                                        EdgeInsetsDirectional
                                                            .fromSTEB(24.0, 0.0,
                                                                24.0, 0.0),
                                                    iconPadding:
                                                        EdgeInsetsDirectional
                                                            .fromSTEB(0.0, 0.0,
                                                                0.0, 0.0),
                                                    color: FlutterFlowTheme.of(
                                                            context)
                                                        .primary,
                                                    textStyle: FlutterFlowTheme
                                                            .of(context)
                                                        .titleSmall
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .titleSmallFamily,
                                                          color: Colors.white,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .titleSmallFamily),
                                                        ),
                                                    elevation: 3.0,
                                                    borderSide: BorderSide(
                                                      color: Colors.transparent,
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            8.0),
                                                  ),
                                                ),
                                                FFButtonWidget(
                                                  onPressed: () async {
                                                    logFirebaseEvent(
                                                        'REFLECT_GP_TRAINEE_FOURTEEN_FISH_BTN_ON_');
                                                    logFirebaseEvent(
                                                        'Button_launch_u_r_l');
                                                    await launchURL(
                                                        'https://support.fourteenfish.com/hc/en-gb/articles/360017584838-PDP-for-Trainees');
                                                  },
                                                  text: 'FourteenFish',
                                                  options: FFButtonOptions(
                                                    height: 40.0,
                                                    padding:
                                                        EdgeInsetsDirectional
                                                            .fromSTEB(24.0, 0.0,
                                                                24.0, 0.0),
                                                    iconPadding:
                                                        EdgeInsetsDirectional
                                                            .fromSTEB(0.0, 0.0,
                                                                0.0, 0.0),
                                                    color: FlutterFlowTheme.of(
                                                            context)
                                                        .primary,
                                                    textStyle: FlutterFlowTheme
                                                            .of(context)
                                                        .titleSmall
                                                        .override(
                                                          fontFamily:
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .titleSmallFamily,
                                                          color: Colors.white,
                                                          letterSpacing: 0.0,
                                                          useGoogleFonts: GoogleFonts
                                                                  .asMap()
                                                              .containsKey(
                                                                  FlutterFlowTheme.of(
                                                                          context)
                                                                      .titleSmallFamily),
                                                        ),
                                                    elevation: 3.0,
                                                    borderSide: BorderSide(
                                                      color: Colors.transparent,
                                                      width: 1.0,
                                                    ),
                                                    borderRadius:
                                                        BorderRadius.circular(
                                                            8.0),
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                                Padding(
                                  padding: EdgeInsetsDirectional.fromSTEB(
                                      20.0, 10.0, 10.0, 10.0),
                                  child: Container(
                                    width: 600.0,
                                    height:
                                        MediaQuery.sizeOf(context).height * 0.8,
                                    decoration: BoxDecoration(
                                      color: FlutterFlowTheme.of(context)
                                          .secondaryBackground,
                                      boxShadow: [
                                        BoxShadow(
                                          blurRadius: 4.0,
                                          color: Color(0x33000000),
                                          offset: Offset(
                                            0.0,
                                            2.0,
                                          ),
                                        )
                                      ],
                                      borderRadius: BorderRadius.circular(10.0),
                                      border: Border.all(
                                        color: FlutterFlowTheme.of(context)
                                            .accent3,
                                      ),
                                    ),
                                    child: Padding(
                                      padding: EdgeInsets.all(10.0),
                                      child: SingleChildScrollView(
                                        child: Column(
                                          mainAxisSize: MainAxisSize.max,
                                          children: [
                                            TextFormField(
                                              controller: _model
                                                  .pDPOutputTextController,
                                              focusNode:
                                                  _model.pDPOutputFocusNode,
                                              autofocus: true,
                                              obscureText: false,
                                              decoration: InputDecoration(
                                                hintStyle: FlutterFlowTheme.of(
                                                        context)
                                                    .bodySmall
                                                    .override(
                                                      fontFamily:
                                                          FlutterFlowTheme.of(
                                                                  context)
                                                              .bodySmallFamily,
                                                      color: _model
                                                              .mouseRegionCapability1Hovered
                                                          ? FlutterFlowTheme.of(
                                                                  context)
                                                              .primary
                                                          : FlutterFlowTheme.of(
                                                                  context)
                                                              .secondaryBackground,
                                                      letterSpacing: 0.0,
                                                      useGoogleFonts: GoogleFonts
                                                              .asMap()
                                                          .containsKey(
                                                              FlutterFlowTheme.of(
                                                                      context)
                                                                  .bodySmallFamily),
                                                    ),
                                                enabledBorder:
                                                    UnderlineInputBorder(
                                                  borderSide: BorderSide(
                                                    color: Color(0x00000000),
                                                    width: 1.0,
                                                  ),
                                                  borderRadius:
                                                      const BorderRadius.only(
                                                    topLeft:
                                                        Radius.circular(4.0),
                                                    topRight:
                                                        Radius.circular(4.0),
                                                  ),
                                                ),
                                                focusedBorder:
                                                    UnderlineInputBorder(
                                                  borderSide: BorderSide(
                                                    color: Color(0x00000000),
                                                    width: 1.0,
                                                  ),
                                                  borderRadius:
                                                      const BorderRadius.only(
                                                    topLeft:
                                                        Radius.circular(4.0),
                                                    topRight:
                                                        Radius.circular(4.0),
                                                  ),
                                                ),
                                                errorBorder:
                                                    UnderlineInputBorder(
                                                  borderSide: BorderSide(
                                                    color: Color(0x00000000),
                                                    width: 1.0,
                                                  ),
                                                  borderRadius:
                                                      const BorderRadius.only(
                                                    topLeft:
                                                        Radius.circular(4.0),
                                                    topRight:
                                                        Radius.circular(4.0),
                                                  ),
                                                ),
                                                focusedErrorBorder:
                                                    UnderlineInputBorder(
                                                  borderSide: BorderSide(
                                                    color: Color(0x00000000),
                                                    width: 1.0,
                                                  ),
                                                  borderRadius:
                                                      const BorderRadius.only(
                                                    topLeft:
                                                        Radius.circular(4.0),
                                                    topRight:
                                                        Radius.circular(4.0),
                                                  ),
                                                ),
                                              ),
                                              style:
                                                  FlutterFlowTheme.of(context)
                                                      .bodyMedium
                                                      .override(
                                                        fontFamily:
                                                            FlutterFlowTheme.of(
                                                                    context)
                                                                .bodyMediumFamily,
                                                        letterSpacing: 0.0,
                                                        useGoogleFonts: GoogleFonts
                                                                .asMap()
                                                            .containsKey(
                                                                FlutterFlowTheme.of(
                                                                        context)
                                                                    .bodyMediumFamily),
                                                      ),
                                              maxLines: null,
                                              validator: _model
                                                  .pDPOutputTextControllerValidator
                                                  .asValidator(context),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ).animateOnPageLoad(animationsMap[
                                      'containerOnPageLoadAnimation14']!),
                                ),
                              ],
                            ),
                          ],
                        ),
                    ],
                  ),
                );
              },
            ),
          ),
        ));
  }
}
